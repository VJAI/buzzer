{"version":3,"sources":["webpack://$buzz/webpack/universalModuleDefinition","webpack://$buzz/webpack/bootstrap","webpack://$buzz/./src/Utility.js","webpack://$buzz/./src/Engine.js","webpack://$buzz/./src/DownloadResult.js","webpack://$buzz/./src/DownloadStatus.js","webpack://$buzz/./src/Emitter.js","webpack://$buzz/./src/Queue.js","webpack://$buzz/./src/Buzz.js","webpack://$buzz/./src/BufferLoader.js","webpack://$buzz/./src/MediaLoader.js","webpack://$buzz/./src/Html5AudioPool.js","webpack://$buzz/./src/Heap.js","webpack://$buzz/./src/Sound.js","webpack://$buzz/./src/WorkerTimer.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Utility","_navigator","_contextType","_formats","_userAgent","navigator","this","userAgent","AudioContext","webkitAudioContext","audio","Audio","mp3","Boolean","canPlayType","replace","mpeg","opus","ogg","oga","wav","aac","caf","m4a","mp4","weba","webm","dolby","flac","Math","round","Date","now","random","format","formats","find","isFormatSupported","source","ext","isBase64","exec","toLowerCase","sources","isSourceSupported","str","test","maxTouchPoints","msMaxTouchPoints","ErrorType","NoAudio","LoadError","PlayError","EngineError","EngineState","NotReady","Ready","Suspending","Suspended","Resuming","Destroying","Done","EngineEvents","Add","Remove","Volume","Mute","Pause","Stop","Suspend","Resume","Error","userInputEventNames","engine","_id","utility","id","_muted","_volume","_maxNodesPerSource","_cleanUpInterval","_inactiveTime","_autoEnable","_intervalId","_isAudioAvailable","_state","_context","_gainNode","_queue","_heap","_bufferLoader","_mediaLoader","Heap","Queue","_resumeAndRemoveListeners","args","getContext","_fire","type","error","volume","muted","maxNodesPerSource","cleanUpInterval","autoEnable","onadd","onremove","onstop","onpause","onmute","onvolume","onsuspend","onresume","onerror","ondone","on","BufferLoader","MediaLoader","state","forEach","eventName","document","addEventListener","createGain","gain","setValueAtTime","currentTime","connect","destination","setInterval","free","urls","progressCallback","load","url","groupId","allocateForGroup","src","soundId","allocateForSound","unload","releaseForGroup","hasFreeNodes","vol","undefined","sounds","sound","stop","add","suspend","then","run","resume","cleanUp","clearInterval","destroy","dispose","clear","emitter","remove","terminate","close","handler","once","off","idOrUrl","Sound","_gain","removeSound","idle","fire","default","status","DownloadStatus","Failure","Success","Emitter","_objectsEventsHandlersMap","_hasObject","objEvents","push","_hasEvent","filter","eventSubscriber","eventSubscribers","length","setTimeout","subscriber","_eventActions","actionIdentifier","action","removeAfterRun","hasEvent","fn","keys","_run","hasAction","queued","BuzzState","Destroyed","BuzzEvents","Load","LoadProgress","UnLoad","PlayStart","PlayEnd","Seek","Rate","FadeStart","FadeEnd","FadeStop","Destroy","LoadState","NotLoaded","Loading","Loaded","Buzz","_src","_format","_sprite","_rate","_loop","_preload","_autoplay","_stream","_duration","_compatibleSrc","_loadState","_engine","_fading","_fadeTimer","_noOfLoadCalls","_onLoadProgress","setup","_onEngineResume","isAudioAvailable","Array","isArray","sprite","rate","loop","autoplay","stream","preload","onload","onloadprogress","onunload","onplaystart","onplayend","onrate","onseek","ondestroy","play","isLoaded","getCompatibleSource","downloadResult","duration","_buffer","_onLoadFailure","indexOf","getSupportedFormat","getSupportedSource","soundOrId","_play","newSoundId","playSound","soundArgs","buffer","playEndCallback","destroyCallback","fadeEndCallback","audioErrorCallback","err","loadCallback","positions","startPos","endPos","newSound","_removePlayActions","fadeStop","_sounds","pause","isGroup","mute","unmute","to","fade","clearTimeout","seek","isPlaying","persist","abandon","evt","percentageDownloaded","playAndFire","$buzz","method","result","arguments","context","_bufferCache","_progressCallsAndCallbacks","_disposed","_load","Promise","all","map","_unload","resolve","DownloadResult","reject","decodeAudioData","arrayBuffer","data","atob","split","dataView","Uint8Array","charCodeAt","req","XMLHttpRequest","open","responseType","response","lengthComputable","loaded","total","send","heap","_audioPool","_bufferingAudios","Html5AudioPool","console","log","removeAudioObjOfUrl","audioObj","a","_cleanUp","releaseForSource","release","allocateForSource","onCanPlayThrough","obj","onError","releaseAudio","canplaythrough","readyState","removeEventListener","splice","_resourceNodesMap","_heapCleaned","_createSrc","_checkMaxNodesForSrc","unallocated","_createGroup","nodes","allocated","shift","groupSounds","x","_destroyNode","audioNodes","slice","totalAllocatedLength","isIE","onend","HeapItem","HeapItemCollection","inactiveTime","_url","items","toString","values","item","soundGroupId","inactiveDurationInSeconds","lastPlayed","isPersistent","isPaused","itemsArray","_collections","col","SoundState","Playing","Paused","_audio","_bufferSourceNode","_startPos","_endPos","_currentPos","_rateSeek","_startTime","_loadCallback","_playEndCallback","_destroyCallback","_fadeEndCallback","_audioErrorCallback","_mediaElementAudioSourceNode","_endTimer","_isSprite","_lastPlayed","_persist","_onBufferEnded","_onHtml5Ended","_onCanPlayThrough","_onAudioError","playbackRate","_setLoop","createMediaElementSource","_playHtml5","_playBuffer","_clearEndTimer","_destroyBufferNode","linearRampToValueAtTime","exponentialRampToValueAtTime","workerTimer","cancelScheduledValues","_getTimeVars","abs","realTime","rateElapsed","_destroyAudio","_destroyMediaSourceNode","disconnect","max","createBufferSource","startTime","start","noteGrainOn","timeout","noteGrainOff","loopStart","loopEnd","WorkerTimer","_worker","_isWorkerThreadAvailable","_timerCallbacks","_timerId","_handleMessage","Worker","blob","_getBlob","WORKER_SCRIPT","workerUrl","_createObjectURL","script","Blob","e","blobBuilderType","BlobBuilder","WebKitBlobBuilder","append","getBlob","file","URL","createObjectURL","webkitURL","callback","timerId","cb","repeat","postMessage","command","timeoutId","intervalId"],"mappings":"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","file":"musquito-2.0.3.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"$buzz\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"$buzz\"] = factory();\n\telse\n\t\troot[\"$buzz\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","/**\n * Contains helper methods.\n */\nclass Utility {\n\n  /**\n   * The navigator object.\n   * @type {Navigator}\n   * @private\n   */\n  _navigator = null;\n\n  /**\n   * The AudioContext type.\n   * @type {Function}\n   * @private\n   */\n  _contextType = null;\n\n  /**\n   * Dictionary of audio formats and their support status.\n   * @type {object}\n   * @private\n   */\n  _formats = {};\n\n  /**\n   * User agent.\n   * @private\n   */\n  _userAgent = null;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    if (typeof navigator !== 'undefined') {\n      this._navigator = navigator;\n      this._userAgent = navigator.userAgent;\n    }\n\n    // Set the available Web Audio Context type available in browser.\n    if (typeof AudioContext !== 'undefined') {\n      this._contextType = AudioContext;\n    } else if (typeof webkitAudioContext !== 'undefined') {\n      this._contextType = webkitAudioContext;\n    }\n\n    // Determine the supported audio formats.\n    let audio = new Audio();\n\n    this._formats = {\n      mp3: Boolean(audio.canPlayType('audio/mp3;').replace(/^no$/, '')),\n      mpeg: Boolean(audio.canPlayType('audio/mpeg;').replace(/^no$/, '')),\n      opus: Boolean(audio.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, '')),\n      ogg: Boolean(audio.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, '')),\n      oga: Boolean(audio.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, '')),\n      wav: Boolean(audio.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, '')),\n      aac: Boolean(audio.canPlayType('audio/aac;').replace(/^no$/, '')),\n      caf: Boolean(audio.canPlayType('audio/x-caf;').replace(/^no$/, '')),\n      m4a: Boolean((audio.canPlayType('audio/x-m4a;') ||\n        audio.canPlayType('audio/m4a;') ||\n        audio.canPlayType('audio/aac;')).replace(/^no$/, '')),\n      mp4: Boolean((audio.canPlayType('audio/x-mp4;') ||\n        audio.canPlayType('audio/mp4;') ||\n        audio.canPlayType('audio/aac;')).replace(/^no$/, '')),\n      weba: Boolean(audio.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n      webm: Boolean(audio.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n      dolby: Boolean(audio.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, '')),\n      flac: Boolean((audio.canPlayType('audio/x-flac;') || audio.canPlayType('audio/flac;')).replace(/^no$/, ''))\n    };\n\n    audio = null;\n  }\n\n  /**\n   * Returns an unique id (credit: https://howlerjs.com).\n   * @return {number}\n   */\n  id() {\n    return Math.round(Date.now() * Math.random());\n  }\n\n  /**\n   * Returns the available context type.\n   * @return {Function}\n   */\n  getContextType() {\n    return this._contextType;\n  }\n\n  /**\n   * Instantiates and returns the audio context.\n   * @return {AudioContext|webkitAudioContext}\n   */\n  getContext() {\n    return new this._contextType();\n  }\n\n  /**\n   * Returns the supported audio formats.\n   * @return {Object}\n   */\n  supportedFormats() {\n    return this._formats;\n  }\n\n  /**\n   * Returns true if the passed format is supported.\n   * @param {string} format The audio format ex. \"mp3\"\n   * @return {boolean}\n   */\n  isFormatSupported(format) {\n    return Boolean(this._formats[format]);\n  }\n\n  /**\n   * Returns the first supported format from the passed array.\n   * @param {string[]} formats Array of audio formats\n   * @return {string}\n   */\n  getSupportedFormat(formats) {\n    return formats.find(format => this.isFormatSupported(format));\n  }\n\n  /**\n   * Returns true if the audio source is supported.\n   * @param {string} source The audio source url or base64 string\n   * @return {boolean}\n   */\n  isSourceSupported(source) {\n    let ext = this.isBase64(source) ?\n      (/^data:audio\\/([^;,]+);/i).exec(source) :\n      (/^.+\\.([^.]+)$/).exec(source);\n\n    ext = (/^.+\\.([^.]+)$/).exec(source);\n    return ext ? this.isFormatSupported(ext[1].toLowerCase()) : false;\n  }\n\n  /**\n   * Returns the first supported audio source from the passed array.\n   * @param {string[]} sources Array of audio sources. The audio source could be either url or base64 string.\n   * @return {string}\n   */\n  getSupportedSource(sources) {\n    return sources.find(source => this.isSourceSupported(source));\n  }\n\n  /**\n   * Returns whether the passed string is a base64 string or not.\n   * @param {string} str Base64 audio string\n   * @return {boolean}\n   */\n  isBase64(str) {\n    return (/^data:[^;]+;base64,/).test(str);\n  }\n\n  /**\n   * Returns true if the platform is mobile.\n   * @return {boolean}\n   * @private\n   */\n  _isMobile() {\n    if (!this._navigator) {\n      return false;\n    }\n\n    return (/iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i).test(this._userAgent);\n  }\n\n  /**\n   * Returns true if the platform is touch supported.\n   * @return {boolean}\n   * @private\n   */\n  _isTouch() {\n    return typeof window !== 'undefined' && (Boolean(('ontouchend' in window) ||\n      (this._navigator && this._navigator.maxTouchPoints > 0) ||\n      (this._navigator && this._navigator.msMaxTouchPoints > 0)));\n  }\n\n  /**\n   * Returns true if the user agent is IE.\n   * @return {boolean}\n   */\n  isIE() {\n    return Boolean(this._userAgent && (/MSIE |Trident\\//).test(this._userAgent));\n  }\n}\n\nexport default new Utility();\n\n","import BufferLoader from './BufferLoader';\nimport MediaLoader  from './MediaLoader';\nimport emitter      from './Emitter';\nimport Heap         from './Heap';\nimport Queue        from './Queue';\nimport utility      from './Utility';\nimport Sound        from './Sound';\n\n/**\n * Enum that represents the different type of errors thrown by Engine and Buzzes.\n * @enum {string}\n */\nconst ErrorType = {\n  NoAudio: 'no-audio',\n  LoadError: 'load',\n  PlayError: 'play',\n  EngineError: 'engine'\n};\n\n/**\n * Represents the different states of the audio engine.\n * @enum {string}\n */\nconst EngineState = {\n  NotReady: 'notready',\n  Ready: 'ready',\n  Suspending: 'suspending',\n  Suspended: 'suspended',\n  Resuming: 'resuming',\n  Destroying: 'destroying',\n  Done: 'done',\n  NoAudio: 'no-audio'\n};\n\n/**\n * Enum that represents the different events by engine.\n * @enum {string}\n */\nconst EngineEvents = {\n  Add: 'add',\n  Remove: 'remove',\n  Volume: 'volume',\n  Mute: 'mute',\n  Pause: 'pause',\n  Stop: 'stop',\n  Suspend: 'suspend',\n  Resume: 'resume',\n  Error: 'error',\n  Done: 'done'\n};\n\n/**\n * Array of event names.\n * @type {string[]}\n */\nconst userInputEventNames = [\n  'click',\n  'contextmenu',\n  'auxclick',\n  'dblclick',\n  'mousedown',\n  'mouseup',\n  'pointerup',\n  'touchend',\n  'keydown',\n  'keyup'\n];\n\n/**\n * The audio engine that orchestrates all the sounds.\n * @class\n */\nclass Engine {\n\n  /**\n   * Unique id of the engine.\n   * @type {number}\n   * @private\n   */\n  _id = utility.id();\n\n  /**\n   * Represents whether the audio engine is currently muted or not.\n   * @type {boolean}\n   * @private\n   */\n  _muted = false;\n\n  /**\n   * Represents the global volume.\n   * @type {number}\n   * @private\n   */\n  _volume = 1.0;\n\n  /**\n   * Maximum number of HTML5 audio objects allowed for a url.\n   * @type {number}\n   * @private\n   */\n  _maxNodesPerSource = 10;\n\n  /**\n   * The heap clean-up period.\n   * @type {number}\n   * @private\n   */\n  _cleanUpInterval = 5;\n\n  /**\n   * Inactive time of sound.\n   * @type {number}\n   * @private\n   */\n  _inactiveTime = 2;\n\n  /**\n   * Auto-enables audio in first user interaction.\n   * @type {boolean}\n   * @private\n   */\n  _autoEnable = true;\n\n  /**\n   * The clean-up interval id.\n   * @type {number|null}\n   * @private\n   */\n  _intervalId = null;\n\n  /**\n   * True if Web Audio API is available.\n   * @type {boolean}\n   * @private\n   */\n  _isAudioAvailable = false;\n\n  /**\n   * Represents the current state of the engine.\n   * @type {EngineState}\n   * @private\n   */\n  _state = EngineState.NotReady;\n\n  /**\n   * The Web Audio API's audio context.\n   * @type {AudioContext}\n   * @private\n   */\n  _context = null;\n\n  /**\n   * The master gain node.\n   * @type {GainNode}\n   * @private\n   */\n  _gainNode = null;\n\n  /**\n   * The action queue.\n   * @type {Queue}\n   * @private\n   */\n  _queue = null;\n\n  /**\n   * The sound heap.\n   * @type {Heap}\n   * @private\n   */\n  _heap = null;\n\n  /**\n   * Loader - the component that loads audio buffers with audio data.\n   * @type {BufferLoader}\n   * @private\n   */\n  _bufferLoader = null;\n\n  /**\n   * MediaLoader - the component that loads HTML5 audio nodes with audio.\n   * @type {MediaLoader}\n   * @private\n   */\n  _mediaLoader = null;\n\n  /**\n   * Instantiates the heap and action queue.\n   * @constructor\n   */\n  constructor() {\n    this._heap = new Heap(this._inactiveTime);\n    this._queue = new Queue();\n    this._resumeAndRemoveListeners = this._resumeAndRemoveListeners.bind(this);\n  }\n\n  /**\n   * Instantiate the audio context and other dependencies.\n   * @param {object} [args] Input parameters object.\n   * @param {number} [args.volume = 1.0] The global volume of the sound engine.\n   * @param {boolean} [args.muted = false] Stay muted initially or not.\n   * @param {number} [args.maxNodesPerSource = 10] Maximum number of HTML5 audio objects allowed for a url.\n   * @param {number} [args.cleanUpInterval = 5] The heap clean-up interval period in minutes.\n   * @param {boolean} [args.autoEnable = true] Auto-enables audio in first user interaction.\n   * @param {function} [args.onadd] Event-handler for the \"add\" event.\n   * @param {function} [args.onremove] Event-handler for the \"remove\" event.\n   * @param {function} [args.onstop] Event-handler for the \"stop\" event.\n   * @param {function} [args.onpause] Event-handler for the \"pause\" event.\n   * @param {function} [args.onmute] Event-handler for the \"mute\" event.\n   * @param {function} [args.onvolume] Event-handler for the \"volume\" event.\n   * @param {function} [args.onsuspend] Event-handler for the \"suspend\" event.\n   * @param {function} [args.onresume] Event-handler for the \"resume\" event.\n   * @param {function} [args.onerror] Event-handler for the \"error\" event.\n   * @param {function} [args.ondone] Event-handler for the \"done\" event.\n   * @return {Engine}\n   */\n  setup(args) {\n    // If the setup is already done return.\n    if (this._state !== EngineState.NotReady) {\n      return this;\n    }\n\n    this._context = utility.getContext();\n\n    // Determine the audio stuff available in the current platform and set the flags accordingly.\n    this._isAudioAvailable = Boolean(this._context);\n\n    // If no Web Audio and HTML5 audio is available fire an error event.\n    if (!this._isAudioAvailable) {\n      this._state = EngineState.NoAudio;\n      this._fire(EngineEvents.Error, { type: ErrorType.NoAudio, error: 'Web Audio API is not available' });\n      return this;\n    }\n\n    // Read the input parameters from the options.\n    const {\n      volume,\n      muted,\n      maxNodesPerSource,\n      cleanUpInterval,\n      autoEnable,\n      onadd,\n      onremove,\n      onstop,\n      onpause,\n      onmute,\n      onvolume,\n      onsuspend,\n      onresume,\n      onerror,\n      ondone\n    } = args || {};\n\n    // Set the properties from the read parameters.\n    typeof volume === 'number' && volume >= 0 && volume <= 1.0 && (this._volume = volume);\n    typeof muted === 'boolean' && (this._muted = muted);\n    typeof maxNodesPerSource === 'number' && (this._maxNodesPerSource = maxNodesPerSource);\n    typeof cleanUpInterval === 'number' && (this._cleanUpInterval = cleanUpInterval);\n    typeof autoEnable === 'boolean' && (this._autoEnable = autoEnable);\n    typeof onadd === 'function' && this.on(EngineEvents.Add, onadd);\n    typeof onremove === 'function' && this.on(EngineEvents.Remove, onremove);\n    typeof onstop === 'function' && this.on(EngineEvents.Stop, onstop);\n    typeof onpause === 'function' && this.on(EngineEvents.Pause, onpause);\n    typeof onmute === 'function' && this.on(EngineEvents.Mute, onmute);\n    typeof onvolume === 'function' && this.on(EngineEvents.Volume, onvolume);\n    typeof onsuspend === 'function' && this.on(EngineEvents.Suspend, onsuspend);\n    typeof onresume === 'function' && this.on(EngineEvents.Resume, onresume);\n    typeof onerror === 'function' && this.on(EngineEvents.Error, onerror);\n    typeof ondone === 'function' && this.on(EngineEvents.Done, ondone);\n\n    // Create the buffer loader.\n    this._bufferLoader = new BufferLoader(this._context);\n\n    // Create the media loader.\n    this._mediaLoader = new MediaLoader(this._maxNodesPerSource, this._heap);\n\n    // Auto-enable audio in first user interaction.\n    // https://developers.google.com/web/updates/2018/11/web-audio-autoplay#moving-forward\n    if (this._autoEnable && this._context.state === 'suspended') {\n      userInputEventNames.forEach(eventName => document.addEventListener(eventName, this._resumeAndRemoveListeners));\n    }\n\n    // Create the audio graph.\n    this._gainNode = this._context.createGain();\n    this._gainNode.gain.setValueAtTime(this._muted ? 0 : this._volume, this._context.currentTime);\n    this._gainNode.connect(this._context.destination);\n\n    this._intervalId = window.setInterval(this._heap.free, this._cleanUpInterval * 60 * 1000);\n\n    this._state = this._context.state !== 'suspended' ? EngineState.Ready : EngineState.Suspended;\n\n    return this;\n  }\n\n  /**\n   * Loads single or multiple audio resources into audio buffers and returns them.\n   * @param {string|string[]} urls Single or array of audio urls.\n   * @param {function} [progressCallback] The callback that is called to intimate the percentage downloaded.\n   * @return {Promise}\n   */\n  load(urls, progressCallback) {\n    return this._bufferLoader.load(urls, progressCallback);\n  }\n\n  /**\n   * Loads HTML5 audio nodes for the passed urls.\n   * @param {string|string[]} urls Single or array of audio urls.\n   * @return {Promise<DownloadResult|Array<DownloadResult>>}\n   */\n  loadMedia(urls) {\n    return this._mediaLoader.load(urls);\n  }\n\n  /**\n   * Loads audio node for group.\n   * @param {string} url The audio file url.\n   * @param {number} groupId The group id.\n   * @return {Promise<DownloadResult>}\n   */\n  allocateForGroup(url, groupId) {\n    return this._mediaLoader.allocateForGroup(url, groupId);\n  }\n\n  /**\n   * Allocates an audio node for sound and returns it.\n   * @param {string} src The audio file url.\n   * @param {number} groupId The buzz id.\n   * @param {number} soundId The sound id.\n   * @return {Audio}\n   */\n  allocateForSound(src, groupId, soundId) {\n    return this._mediaLoader.allocateForSound(src, groupId, soundId);\n  }\n\n  /**\n   * Unloads single or multiple loaded audio buffers from cache.\n   * @param {string|string[]} [urls] Single or array of audio urls.\n   * @return {Engine}\n   */\n  unload(urls) {\n    if (urls) {\n      this._bufferLoader.unload(urls);\n      return this;\n    }\n\n    this._bufferLoader.unload();\n\n    return this;\n  }\n\n  /**\n   * Releases audio nodes allocated for the passed urls.\n   * @param {string|string[]} [urls] Single or array of audio urls.\n   * @return {Engine}\n   */\n  unloadMedia(urls) {\n    if (urls) {\n      this._mediaLoader.unload(urls);\n      return this;\n    }\n\n    this._mediaLoader.unload();\n\n    return this;\n  }\n\n  /**\n   * Releases the allocated audio nodes for the group.\n   * @param {string} url The audio file url.\n   * @param {number} groupId The group id.\n   * @return {Engine}\n   */\n  releaseForGroup(url, groupId) {\n    this._mediaLoader.releaseForGroup(url, groupId);\n    return this;\n  }\n\n  /**\n   * Returns if there are free audio nodes available for a group.\n   * @param {string} src The audio file url.\n   * @param {number} groupId The group id.\n   * @return {boolean}\n   */\n  hasFreeNodes(src, groupId) {\n    return this._mediaLoader.hasFreeNodes(src, groupId);\n  }\n\n  /**\n   * Mutes the engine.\n   * @return {Engine}\n   */\n  mute() {\n    // If the engine is already muted return.\n    if (this._muted) {\n      return this;\n    }\n\n    // Set the value of gain node to 0.\n    this._gainNode.gain.setValueAtTime(0, this._context.currentTime);\n\n    // Set the muted property true.\n    this._muted = true;\n\n    // Fire the \"mute\" event.\n    this._fire(EngineEvents.Mute, this._muted);\n\n    return this;\n  }\n\n  /**\n   * Un-mutes the engine.\n   * @return {Engine}\n   */\n  unmute() {\n    // If the engine is not muted return.\n    if (!this._muted) {\n      return this;\n    }\n\n    // Reset the gain node's value back to volume.\n    this._gainNode.gain.setValueAtTime(this._volume, this._context.currentTime);\n\n    // Set the muted property to false.\n    this._muted = false;\n\n    // Fire the \"mute\" event.\n    this._fire(EngineEvents.Mute, this._muted);\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the volume for the audio engine that controls global volume for all sounds.\n   * @param {number} [vol] Should be within 0.0 to 1.0.\n   * @return {Engine|number}\n   */\n  volume(vol) {\n    // If no parameter is passed then return the current volume.\n    if (vol === undefined) {\n      return this._volume;\n    }\n\n    // If passed volume is not an acceptable value return.\n    if (typeof vol !== 'number' || vol < 0 || vol > 1.0) {\n      return this;\n    }\n\n    // Set the gain's value to the passed volume.\n    this._gainNode.gain.setValueAtTime(this._muted ? 0 : vol, this._context.currentTime);\n\n    // Set the volume to the property.\n    this._volume = vol;\n\n    // Fire the \"volume\" event.\n    this._fire(EngineEvents.Volume, this._volume);\n\n    return this;\n  }\n\n  /**\n   * Stops all the currently playing sounds.\n   * @return {Engine}\n   */\n  stop() {\n    // Stop all the sounds.\n    this._heap.sounds().forEach(sound => sound.stop());\n\n    // Fire the \"stop\" event.\n    this._fire(EngineEvents.Stop);\n\n    return this;\n  }\n\n  /**\n   * Stops all the playing sounds and suspends the audio context immediately.\n   * @return {Engine}\n   */\n  suspend() {\n    // If the context is resuming then suspend after resumed.\n    if (this._state === EngineState.Resuming) {\n      this._queue.add('after-resume', 'suspend', () => this.suspend());\n      return this;\n    }\n\n    // If the state is not ready return.\n    if (this._state !== EngineState.Ready) {\n      return this;\n    }\n\n    // Stop all the playing sounds.\n    this.stop();\n\n    // Set the state to suspending.\n    this._state = EngineState.Suspending;\n\n    // Suspend the Audio Context.\n    this._context.suspend().then(() => {\n      this._state = EngineState.Suspended;\n      this._queue.run('after-suspend');\n      this._fire(EngineEvents.Suspend);\n    });\n\n    return this;\n  }\n\n  /**\n   * Resumes the audio context from the suspended mode.\n   * @return {Engine}\n   */\n  resume() {\n    // If the context is suspending then resume after suspended.\n    if (this._state === EngineState.Suspending) {\n      this._queue.add('after-suspend', 'resume', () => this.resume());\n      return this;\n    }\n\n    if (this._state !== EngineState.Suspended) {\n      return this;\n    }\n\n    this._state = EngineState.Resuming;\n\n    this._context.resume().then(() => {\n      this._state = EngineState.Ready;\n      this._queue.run('after-resume');\n      this._fire(EngineEvents.Resume);\n    });\n\n    return this;\n  }\n\n  /**\n   * Shuts down the engine.\n   * @return {Engine}\n   */\n  terminate() {\n    if (this._state === EngineState.Done || this._state === EngineState.Destroying) {\n      return this;\n    }\n\n    const cleanUp = () => {\n      // Un-listen from user input events.\n      userInputEventNames.forEach(eventName => document.addEventListener(eventName, this._resumeAndRemoveListeners));\n\n      // Stop the timer.\n      this._intervalId && window.clearInterval(this._intervalId);\n      this._intervalId = null;\n\n      // Destroy the heap.\n      this._heap.destroy();\n      this._heap = null;\n\n      // Clear the cache and remove the loader.\n      if (this._bufferLoader) {\n        this._bufferLoader.dispose();\n        this._bufferLoader = null;\n      }\n\n      // Dispose the MediaLoader.\n      if (this._mediaLoader) {\n        this._mediaLoader.dispose();\n        this._mediaLoader = null;\n      }\n\n      this._context = null;\n      this._queue.clear();\n      this._queue = null;\n      this._state = EngineState.Done;\n\n      // Fire the \"done\" event.\n      this._fire(EngineEvents.Done);\n\n      emitter.clear(this._id);\n    };\n\n    // Close the context.\n    if (this._context) {\n      if (this._state === EngineState.Suspending) {\n        this._queue.remove('after-suspend');\n        this._queue.add('after-suspend', 'destroy', () => this.terminate());\n        return this;\n      } else if (this._state === EngineState.Resuming) {\n        this._queue.remove('after-resume');\n        this._queue.add('after-resume', 'destroy', () => this.terminate());\n        return this;\n      }\n\n      this._state = EngineState.Destroying;\n      this._context && this._context.close().then(() => cleanUp());\n    } else {\n      this._state = EngineState.Destroying;\n      cleanUp();\n    }\n\n    return this;\n  }\n\n  /**\n   * Subscribes to an event.\n   * @param {string} eventName Name of the event.\n   * @param {function} handler The event-handler function.\n   * @param {boolean} [once = false] Is it one-time subscription or not.\n   * @return {Engine}\n   */\n  on(eventName, handler, once = false) {\n    emitter.on(this._id, eventName, handler, once);\n    return this;\n  }\n\n  /**\n   * Un-subscribes from an event.\n   * @param {string} eventName The event name.\n   * @param {function} [handler] The handler function.\n   * @return {Engine}\n   */\n  off(eventName, handler) {\n    emitter.off(this._id, eventName, handler);\n    return this;\n  }\n\n  /**\n   * Returns the existing sound in heap or create a new one and return.\n   * @param {number|string} idOrUrl The sound id or audio url/base64 string.\n   * @param {number} [groupId] The group id.\n   * @param {object} [args] The sound creation arguments.\n   * @return {Sound}\n   */\n  sound(idOrUrl, groupId, args) {\n    if (typeof idOrUrl === 'number') {\n      return this._heap.sound(idOrUrl);\n    }\n\n    const sound = new Sound(args);\n    this._heap.add(idOrUrl, groupId, sound);\n    sound._gain().connect(this._gainNode);\n\n    return sound;\n  }\n\n  /**\n   * Removes the destroyed sound.\n   * @param {string} src The audio url.\n   * @param {number} groupId The group id.\n   * @param {number} soundId The sound id.\n   */\n  removeSound(src, groupId, soundId) {\n    this._heap.removeSound(src, groupId, soundId);\n  }\n\n  /**\n   * Returns the sounds belongs to a group or all the sounds from the heap.\n   * @param {number} [groupId] The group id.\n   * @return {Array<Sound>}\n   */\n  sounds(groupId) {\n    return this._heap.sounds(groupId);\n  }\n\n  /**\n   * Destroys the sounds belong to the passed group.\n   * @param {boolean} idle True to destroy only the idle sounds.\n   * @param {string} [src] The audio resource url.\n   * @param {number} [groupId] The group id.\n   * @return {Engine}\n   */\n  free(idle, src, groupId) {\n    this._heap.free(idle, src, groupId);\n    this._mediaLoader.cleanUp();\n    return this;\n  }\n\n  /**\n   * Returns whether the engine is currently muted or not.\n   * @return {boolean}\n   */\n  muted() {\n    return this._muted;\n  }\n\n  /**\n   * Returns the state of the engine.\n   * @return {EngineState}\n   */\n  state() {\n    return this._state;\n  }\n\n  /**\n   * Returns the created audio context.\n   * @return {AudioContext}\n   */\n  context() {\n    return this._context;\n  }\n\n  /**\n   * Returns the master gain node.\n   * @return {GainNode}\n   */\n  masterGain() {\n    return this._gainNode;\n  }\n\n  /**\n   * Returns true if Web Audio API is available.\n   * @return {boolean}\n   */\n  isAudioAvailable() {\n    return this._isAudioAvailable;\n  }\n\n  /**\n   * Returns the buffer loader.\n   * @return {BufferLoader}\n   */\n  bufferLoader() {\n    return this._bufferLoader;\n  }\n\n  /**\n   * Returns the HTML5 media loader.\n   * @return {MediaLoader}\n   */\n  mediaLoader() {\n    return this._mediaLoader;\n  }\n\n  /**\n   * Fires an event of engine.\n   * @param {string} eventName The event name.\n   * @param {...*} args The arguments that to be passed to handler.\n   * @return {Engine}\n   * @private\n   */\n  _fire(eventName, ...args) {\n    emitter.fire(this._id, eventName, ...args, this);\n    return this;\n  }\n\n  /**\n   * Resume the context and un-listen from user input events.\n   * @private\n   */\n  _resumeAndRemoveListeners() {\n    this.resume();\n    userInputEventNames.forEach(eventName => document.addEventListener(eventName, this._resumeAndRemoveListeners));\n  }\n}\n\nconst engine = new Engine();\nexport { engine as default, EngineState, EngineEvents, ErrorType };\n","import DownloadStatus from './DownloadStatus';\n\n/**\n * Represents the download result of an audio.\n * @class\n */\nclass DownloadResult {\n\n  /**\n   * The url of the audio resource\n   * @type {string|null}\n   */\n  url = null;\n\n  /**\n   * AudioBuffer or Html5Audio element\n   * @type {AudioBuffer|Audio}\n   */\n  value = null;\n\n  /**\n   * Download error\n   * @type {any}\n   */\n  error = null;\n\n  /**\n   * Success or failure status of download.\n   * @type {DownloadStatus}\n   */\n  status = null;\n\n  /**\n   * @param {string|null} url The url of the audio resource\n   * @param {AudioBuffer|Audio} [value] AudioBuffer or Html5Audio element\n   * @param {*} [error] Download error\n   */\n  constructor(url, value, error) {\n    this.url = url;\n    this.value = value;\n    this.error = error || null;\n    this.status = error ? DownloadStatus.Failure : DownloadStatus.Success;\n  }\n}\n\nexport default DownloadResult;\n","/**\n * Enum to represent the download status of audio resource.\n * @enum {string}\n */\nconst DownloadStatus = {\n  Success: 'success',\n  Failure: 'error'\n};\n\nexport default DownloadStatus;\n","/**\n * Singleton global event emitter.\n * @class\n */\nclass Emitter {\n\n  /**\n   * Dictionary that maps the objects with their events and handlers.\n   * @type {object}\n   * @private\n   */\n  _objectsEventsHandlersMap = {};\n\n  /**\n   * Subscribes to an event of the passed object.\n   * @param {number} id The unique id of the object.\n   * @param {string} eventName Name of the event\n   * @param {function} handler The event-handler function\n   * @param {boolean} [once = false] Is it one-time subscription or not?\n   * @return {Emitter}\n   */\n  on(id, eventName, handler, once = false) {\n    if (!this._hasObject(id)) {\n      this._objectsEventsHandlersMap[id] = {};\n    }\n\n    const objEvents = this._objectsEventsHandlersMap[id];\n\n    if (!objEvents.hasOwnProperty(eventName)) {\n      objEvents[eventName] = [];\n    }\n\n    objEvents[eventName].push({\n      handler: handler,\n      once: once\n    });\n\n    return this;\n  }\n\n  /**\n   * Un-subscribes from an event of the passed object.\n   * @param {number} id The unique id of the object.\n   * @param {string} eventName The event name.\n   * @param {function} [handler] The handler function.\n   * @return {Emitter}\n   */\n  off(id, eventName, handler) {\n    if (!this._hasEvent(id, eventName)) {\n      return this;\n    }\n\n    const objEvents = this._objectsEventsHandlersMap[id];\n\n    if (!handler) {\n      objEvents[eventName] = [];\n    } else {\n      objEvents[eventName] = objEvents[eventName].filter(eventSubscriber => {\n        return eventSubscriber.handler !== handler;\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Fires an event of the object passing the source and other optional arguments.\n   * @param {number} id The unique id of the object.\n   * @param {string} eventName The event name\n   * @param {...*} args The arguments that to be passed to handler\n   * @return {Emitter}\n   */\n  fire(id, eventName, ...args) {\n    if (!this._hasEvent(id, eventName)) {\n      return this;\n    }\n\n    let eventSubscribers = this._objectsEventsHandlersMap[id][eventName];\n\n    for (let i = 0; i < eventSubscribers.length; i++) {\n      let eventSubscriber = eventSubscribers[i];\n\n      setTimeout(function (subscriber) {\n        const { handler, once } = subscriber;\n\n        handler(...args);\n\n        if (once) {\n          this.off(id, eventName, handler);\n        }\n      }.bind(this, eventSubscriber), 0);\n    }\n\n    return this;\n  }\n\n  /**\n   * Clears the event handlers of the passed object.\n   * @param {number} [id] The unique id of the object.\n   * @return {Emitter}\n   */\n  clear(id) {\n    if (!id) {\n      this._objectsEventsHandlersMap = {};\n      return this;\n    }\n\n    if (this._hasObject(id)) {\n      delete this._objectsEventsHandlersMap[id];\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns true if the object is already registered.\n   * @param {number} id The object id.\n   * @return {boolean}\n   * @private\n   */\n  _hasObject(id) {\n    return this._objectsEventsHandlersMap.hasOwnProperty(id);\n  }\n\n  /**\n   * Returns true if the passed object has an entry of the passed event.\n   * @param {number} id The object id.\n   * @param {string} eventName The event name.\n   * @return {boolean}\n   * @private\n   */\n  _hasEvent(id, eventName) {\n    return this._hasObject(id) && this._objectsEventsHandlersMap[id].hasOwnProperty(eventName);\n  }\n}\n\nexport default new Emitter();\n","/**\n * Stores queue of actions that has to be run before or after specific events.\n */\nclass Queue {\n\n  _eventActions = {};\n\n  /**\n   * Queues the passed action to the event.\n   * @param {string} eventName The event name.\n   * @param {string} actionIdentifier The action identifier.\n   * @param {function} action The action function.\n   * @param {boolean} [removeAfterRun = true] Remove the action once it's run.\n   */\n  add(eventName, actionIdentifier, action, removeAfterRun = true) {\n    if (!this.hasEvent(eventName)) {\n      this._eventActions[eventName] = {};\n    }\n\n    this._eventActions[eventName][actionIdentifier] = { fn: action, removeAfterRun: removeAfterRun };\n  }\n\n  /**\n   * Returns true if there is a event exists for the passed name.\n   * @param {string} eventName The event name.\n   * @return {boolean}\n   */\n  hasEvent(eventName) {\n    return this._eventActions.hasOwnProperty(eventName);\n  }\n\n  /**\n   * Returns true if the passed action is already queued-up.\n   * @param {string} eventName The event name.\n   * @param {string} actionIdentifier The action identifier.\n   * @return {boolean}\n   */\n  hasAction(eventName, actionIdentifier) {\n    if (!this.hasEvent(eventName)) {\n      return false;\n    }\n\n    return this._eventActions[eventName].hasOwnProperty(actionIdentifier);\n  }\n\n  /**\n   * Runs all the actions queued up for the passed event.\n   * @param {string} eventName The event name.\n   * @param {string} [actionIdentifier] The action identifier.\n   */\n  run(eventName, actionIdentifier) {\n    if (!this.hasEvent(eventName)) {\n      return;\n    }\n\n    if (typeof actionIdentifier !== 'undefined') {\n      if (!this.hasAction(eventName, actionIdentifier)) {\n        return;\n      }\n\n      this._run(eventName, actionIdentifier);\n\n      return;\n    }\n\n    Object.keys(this._eventActions[eventName]).forEach(action => this._run(eventName, action));\n  }\n\n  /**\n   * Removes the event or a queued action for the event.\n   * @param {string} eventName The event name.\n   * @param {string} [actionIdentifier] The action identifier.\n   */\n  remove(eventName, actionIdentifier) {\n    if (!this._eventActions.hasOwnProperty(eventName)) {\n      return;\n    }\n\n    if (!actionIdentifier) {\n      delete this._eventActions[eventName];\n      return;\n    }\n\n    delete this._eventActions[eventName][actionIdentifier];\n  }\n\n  /**\n   * Clears all the stored events and the queued-up actions.\n   */\n  clear() {\n    this._eventActions = {};\n  }\n\n  /**\n   * Runs a single action.\n   * @param {string} eventName The event name.\n   * @param {string} actionIdentifier The action identifier.\n   * @private\n   */\n  _run(eventName, actionIdentifier) {\n    const queued = this._eventActions[eventName][actionIdentifier];\n    queued.fn();\n    queued.removeAfterRun && this.remove(eventName, actionIdentifier);\n  }\n}\n\nexport default Queue;\n","import engine, { EngineEvents, EngineState, ErrorType } from './Engine';\nimport Queue from './Queue';\nimport utility from './Utility';\nimport emitter from './Emitter';\nimport DownloadStatus from './DownloadStatus';\n\n/**\n * Enum that represents the different states of a sound group (buzz).\n * @enum {string}\n */\nconst BuzzState = {\n  Ready: 'ready',\n  Destroyed: 'destroyed'\n};\n\n/**\n * Enum that represents the different events fired by a buzz.\n * @enum {string}\n */\nconst BuzzEvents = {\n  Load: 'load',\n  LoadProgress: 'loadprogress',\n  UnLoad: 'unload',\n  PlayStart: 'playstart',\n  PlayEnd: 'playend',\n  Pause: 'pause',\n  Stop: 'stop',\n  Volume: 'volume',\n  Mute: 'mute',\n  Seek: 'seek',\n  Rate: 'rate',\n  FadeStart: 'fadestart',\n  FadeEnd: 'fadeend',\n  FadeStop: 'fadestop',\n  Error: 'error',\n  Destroy: 'destroy'\n};\n\n/**\n * Enum that represents the different states occurs while loading a sound.\n * @enum {string}\n */\nconst LoadState = {\n  NotLoaded: 'notloaded',\n  Loading: 'loading',\n  Loaded: 'loaded'\n};\n\n/**\n * A wrapper class that simplifies dealing with group of sounds.\n */\nclass Buzz {\n\n  /**\n   * Unique id.\n   * @type {number}\n   * @private\n   */\n  _id = -1;\n\n  /**\n   * Represents the source of the sound. The source can be an url or base64 string.\n   * @type {*}\n   * @private\n   */\n  _src = null;\n\n  /**\n   * The formats of the passed audio sources.\n   * @type {Array<string>}\n   * @private\n   */\n  _format = [];\n\n  /**\n   * The sprite definition.\n   * @type {object}\n   * @private\n   */\n  _sprite = null;\n\n  /**\n   * The current volume of the sound. Should be from 0.0 to 1.0.\n   * @type {number}\n   * @private\n   */\n  _volume = 1.0;\n\n  /**\n   * The current rate of the playback. Should be from 0.5 to 5.\n   * @type {number}\n   * @private\n   */\n  _rate = 1;\n\n  /**\n   * True if the sound is currently muted.\n   * @type {boolean}\n   * @private\n   */\n  _muted = false;\n\n  /**\n   * True if the sound should play repeatedly.\n   * @type {boolean}\n   * @private\n   */\n  _loop = false;\n\n  /**\n   * True to pre-loaded the sound on construction.\n   * @type {boolean}\n   * @private\n   */\n  _preload = false;\n\n  /**\n   * True to auto-play the sound on construction.\n   * @type {boolean}\n   * @private\n   */\n  _autoplay = false;\n\n  /**\n   * True to use HTML5 audio node.\n   * @type {boolean}\n   * @private\n   */\n  _stream = false;\n\n  /**\n   * Duration of the playback in seconds.\n   * @type {number}\n   * @private\n   */\n  _duration = 0;\n\n  /**\n   * The best compatible source in the audio sources passed.\n   * @type {string|null}\n   * @private\n   */\n  _compatibleSrc = null;\n\n  /**\n   * Represents the different states that occurs while loading the sound.\n   * @type {LoadState}\n   * @private\n   */\n  _loadState = LoadState.NotLoaded;\n\n  /**\n   * Represents the state of this group.\n   * @type {BuzzState}\n   * @private\n   */\n  _state = BuzzState.Ready;\n\n  /**\n   * The action queue.\n   * @type {Queue}\n   * @private\n   */\n  _queue = null;\n\n  /**\n   * The audio engine.\n   * @type {Engine}\n   * @private\n   */\n  _engine = null;\n\n  /**\n   * True if the group is currently fading.\n   * @type {boolean}\n   * @private\n   */\n  _fading = false;\n\n  /**\n   * The timer that runs function after the fading is complete.\n   * @type {number|null}\n   * @private\n   */\n  _fadeTimer = null;\n\n  _noOfLoadCalls = 0;\n\n  /**\n   * Initializes the internal properties.\n   * @param {string|Array<string>|object} args The input parameters of this sound group.\n   * @param {string} [args.id] The unique id of the sound.\n   * @param {string|string[]} args.src Single or array of audio urls/base64 strings.\n   * @param {number} [args.volume = 1.0] The initial volume of the sound. Should be from 0.0 to 1.0.\n   * @param {number} [args.rate = 1] The initial playback rate of the sound. Should be from 0.5 to 5.0.\n   * @param {boolean} [args.loop = false] True to play the sound repeatedly.\n   * @param {boolean} [args.muted = false] True to be muted initially.\n   * @param {boolean} [args.preload = false] True to pre-load the sound after construction.\n   * @param {boolean} [args.autoplay = false] True to play automatically after construction.\n   * @param {boolean} [args.stream = false] True to use HTML5 audio node.\n   * @param {string|string[]} [args.format] The file format(s) of the passed audio source(s).\n   * @param {object} [args.sprite] The sprite definition.\n   * @param {function} [args.onload] Event-handler for the \"load\" event.\n   * @param {function} [args.onloadprogress] Event-handler for the \"loadprogress\" event (only for non-stream types).\n   * @param {function} [args.onunload] Event-handler for the \"unload\" event.\n   * @param {function} [args.onplaystart] Event-handler for the \"playstart\" event.\n   * @param {function} [args.onplayend] Event-handler for the \"playend\" event.\n   * @param {function} [args.onstop] Event-handler for the \"stop\" event.\n   * @param {function} [args.onpause] Event-handler for the \"pause\" event.\n   * @param {function} [args.onmute] Event-handler for the \"mute\" event.\n   * @param {function} [args.onvolume] Event-handler for the \"volume\" event.\n   * @param {function} [args.onrate] Event-handler for the \"rate\" event.\n   * @param {function} [args.onseek] Event-handler for the \"seek\" event.\n   * @param {function} [args.onerror] Event-handler for the \"error\" event.\n   * @param {function} [args.ondestroy] Event-handler for the \"destroy\" event.\n   * @constructor\n   */\n  constructor(args) {\n    this._onLoadProgress = this._onLoadProgress.bind(this);\n\n    // Setup the audio engine.\n    this._engine = engine;\n    this._engine.setup();\n    this._engine.on(EngineEvents.Resume, this._onEngineResume = this._onEngineResume.bind(this));\n\n    // If no audio is available throw error.\n    if (!this._engine.isAudioAvailable()) {\n      this._fire(BuzzEvents.Error, null, { type: ErrorType.NoAudio, error: 'Web Audio is un-available' });\n      return this;\n    }\n\n    if (typeof args === 'string') {\n      this._src = [args];\n    } else if (Array.isArray(args) && args.length) {\n      this._src = args;\n    } else if (typeof args === 'object') {\n      const {\n        id,\n        src,\n        format,\n        sprite,\n        volume,\n        rate,\n        muted,\n        loop,\n        autoplay,\n        stream,\n        preload,\n        onload,\n        onloadprogress,\n        onunload,\n        onplaystart,\n        onplayend,\n        onstop,\n        onpause,\n        onmute,\n        onvolume,\n        onrate,\n        onseek,\n        onerror,\n        ondestroy\n      } = args;\n\n      // Set the passed id or the random one.\n      this._id = typeof id === 'number' ? id : utility.id();\n\n      // Set the source.\n      if (typeof src === 'string') {\n        this._src = [src];\n      } else if (Array.isArray(src) && src.length) {\n        this._src = src;\n      }\n\n      // Set the format.\n      if (Array.isArray(format)) {\n        this._format = format;\n      } else if (typeof format === 'string' && format) {\n        this._format = [format];\n      }\n\n      // Set other properties.\n      typeof sprite === 'object' && (this._sprite = sprite);\n      typeof volume === 'number' && volume >= 0 && volume <= 1.0 && (this._volume = volume);\n      typeof rate === 'number' && rate >= 0.5 && rate <= 5 && (this._rate = rate);\n      typeof muted === 'boolean' && (this._muted = muted);\n      typeof loop === 'boolean' && (this._loop = loop);\n      typeof autoplay === 'boolean' && (this._autoplay = autoplay);\n      typeof stream === 'boolean' && (this._stream = stream);\n      typeof preload === 'boolean' && (this._preload = preload);\n\n      // Bind the passed event handlers to events.\n      typeof onload === 'function' && this.on(BuzzEvents.Load, onload);\n      typeof onloadprogress === 'function' && this.on(BuzzEvents.LoadProgress, onloadprogress);\n      typeof onunload === 'function' && this.on(BuzzEvents.UnLoad, onunload);\n      typeof onplaystart === 'function' && this.on(BuzzEvents.PlayStart, onplaystart);\n      typeof onplayend === 'function' && this.on(BuzzEvents.PlayEnd, onplayend);\n      typeof onstop === 'function' && this.on(BuzzEvents.Stop, onstop);\n      typeof onpause === 'function' && this.on(BuzzEvents.Pause, onpause);\n      typeof onmute === 'function' && this.on(BuzzEvents.Mute, onmute);\n      typeof onvolume === 'function' && this.on(BuzzEvents.Volume, onvolume);\n      typeof onrate === 'function' && this.on(BuzzEvents.Rate, onrate);\n      typeof onseek === 'function' && this.on(BuzzEvents.Seek, onseek);\n      typeof onerror === 'function' && this.on(BuzzEvents.Error, onerror);\n      typeof ondestroy === 'function' && this.on(BuzzEvents.Destroy, ondestroy);\n    }\n\n    // Throw error if source is not passed.\n    if (!this._src) {\n      throw new Error('You should pass the source for the audio.');\n    }\n\n    // Instantiate the dependencies.\n    this._queue = new Queue();\n\n    if (this._autoplay) {\n      this.play();\n    } else if (this._preload) {\n      this.load();\n    }\n  }\n\n  /**\n   * Loads the sound to the underlying audio object.\n   * @param {number} [soundId] The id of the sound to be loaded (for stream types).\n   * @return {Buzz}\n   */\n  load(soundId) {\n    if (soundId) {\n      const sound = this.sound(soundId);\n      sound && sound.load();\n      return this;\n    }\n\n    // If the sound is not of stream and the source is loaded or currently loading then return.\n    if (!this._stream && (this.isLoaded() || this._loadState === LoadState.Loading)) {\n      return this;\n    }\n\n    // Set the state to loading.\n    this._loadState = LoadState.Loading;\n\n    // Increment the calls which is needed for stream types.\n    this._noOfLoadCalls = this._noOfLoadCalls + 1;\n\n    const src = this._compatibleSrc || (this._compatibleSrc = this.getCompatibleSource());\n\n    // Load the audio source.\n    const load$ = this._stream ? this._engine.allocateForGroup(src, this._id) : this._engine.load(src, this._onLoadProgress);\n    load$.then(downloadResult => {\n      this._noOfLoadCalls > 0 && (this._noOfLoadCalls = this._noOfLoadCalls - 1);\n\n      if (this._stream && this._state === BuzzState.Destroyed) {\n        this._engine.releaseForGroup(this._compatibleSrc, this._id);\n        return;\n      }\n\n      if (this._state === BuzzState.Destroyed || this._loadState === LoadState.NotLoaded) {\n        return;\n      }\n\n      // If loading succeeded,\n      // i. Save the result.\n      // ii. Set the load state as loaded.\n      // iii. Fire the load event.\n      // iv. Run the methods that are queued to run after successful load.\n      if (downloadResult.status === DownloadStatus.Success) {\n        if (this._stream) {\n          this._duration = downloadResult.value.duration;\n        } else {\n          this._buffer = downloadResult.value;\n          this._duration = this._buffer.duration;\n        }\n\n        this._loadState = LoadState.Loaded;\n        this._fire(BuzzEvents.Load, null, downloadResult);\n        this._queue.run('after-load');\n        return;\n      }\n\n      this._onLoadFailure(downloadResult.error);\n    });\n\n    return this;\n  }\n\n  /**\n   * Returns the first compatible source based on the passed sources and the format.\n   * @return {string}\n   */\n  getCompatibleSource() {\n    // If the user has passed \"format\", check if it is supported or else retrieve the first supported source from the array.\n    return this._format.length ?\n      this._src[this._format.indexOf(utility.getSupportedFormat(this._format))] :\n      utility.getSupportedSource(this._src);\n  }\n\n  /**\n   * Plays the passed sound defined in the sprite or the sound that belongs to the passed id.\n   * @param {string|number} [soundOrId] The sound name defined in sprite or the sound id.\n   * @return {Buzz|number}\n   */\n  play(soundOrId) {\n    const isIdPassed = typeof soundOrId === 'number';\n\n    // If id is passed then get the sound from the engine and play it.\n    if (isIdPassed) {\n      const sound = this._engine.sound(soundOrId);\n      sound && this._play(sound);\n      return this;\n    }\n\n    const newSoundId = utility.id(),\n      playSound = () => {\n        const soundArgs = {\n          id: newSoundId,\n          buffer: this._buffer,\n          stream: this._stream,\n          audio: this._stream ? this._engine.allocateForSound(this._compatibleSrc, this._id, newSoundId) : null,\n          volume: this._volume,\n          rate: this._rate,\n          muted: this._muted,\n          loop: this._loop,\n          playEndCallback: () => this._fire(BuzzEvents.PlayEnd, newSoundId),\n          destroyCallback: () => {\n            this._engine.removeSound(this._compatibleSrc, this._id, newSoundId);\n            this._fire(BuzzEvents.Destroy, newSoundId);\n            emitter.clear(newSoundId);\n          },\n          fadeEndCallback: () => this._fire(BuzzEvents.FadeEnd, newSoundId),\n          audioErrorCallback: (sound, err) => {\n            this._fire(BuzzEvents.Error, { type: ErrorType.LoadError, soundId: newSoundId, error: err });\n            sound.destroy();\n          },\n          loadCallback: () => {\n            this._fire(BuzzEvents.Load, newSoundId);\n          }\n        };\n\n        if (typeof soundOrId === 'string' && this._sprite && this._sprite.hasOwnProperty(soundOrId)) {\n          const positions = this._sprite[soundOrId];\n          soundArgs.startPos = positions[0];\n          soundArgs.endPos = positions[1];\n        }\n\n        const newSound = this._engine.sound(this._compatibleSrc, this._id, soundArgs);\n        this._play(newSound);\n      };\n\n    // If the sound is not yet loaded push an action to the queue to play the sound once it's loaded.\n    if (!this.isLoaded()) {\n      this._queue.add('after-load', `play-${newSoundId}`, () => playSound());\n      this.load();\n    } else {\n      playSound();\n    }\n\n    return newSoundId;\n  }\n\n  /**\n   * Pauses the sound belongs to the passed id or all the sounds belongs to this group.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  pause(id) {\n    this._removePlayActions(id);\n    typeof id !== 'number' && this.fadeStop();\n    this._sounds(id).forEach(sound => sound.pause());\n    this._fire(BuzzEvents.Pause, id);\n\n    return this;\n  }\n\n  /**\n   * Stops the sound belongs to the passed id or all the sounds belongs to this group.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  stop(id) {\n    this._removePlayActions(id);\n    typeof id !== 'number' && this.fadeStop();\n    this._sounds(id).forEach(sound => sound.stop());\n    this._fire(BuzzEvents.Stop, id);\n\n    return this;\n  }\n\n  /**\n   * Mutes the sound belongs to the passed id or all the sounds belongs to this group.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  mute(id) {\n    const isGroup = typeof id !== 'number';\n    isGroup && this.fadeStop();\n    this._sounds(id).forEach(sound => sound.mute());\n    isGroup && (this._muted = true);\n\n    this._fire(BuzzEvents.Mute, id, this._muted);\n\n    return this;\n  }\n\n  /**\n   * Un-mutes the sound belongs to the passed id or all the sounds belongs to this group.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  unmute(id) {\n    const isGroup = typeof id !== 'number';\n    isGroup && this.fadeStop();\n    this._sounds(id).forEach(sound => sound.unmute());\n    isGroup && (this._muted = false);\n\n    this._fire(BuzzEvents.Mute, id, this._muted);\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the volume of the passed sound or the group.\n   * @param {number} [volume] Should be from 0.0 to 1.0.\n   * @param {number} [id] The sound id.\n   * @return {Buzz|number}\n   */\n  volume(volume, id) {\n    const isGroup = typeof id !== 'number';\n\n    if (typeof volume === 'number' && volume >= 0 && volume <= 1.0) {\n      isGroup && this.fadeStop();\n      this._sounds(id).forEach(sound => sound.volume(volume));\n      typeof id !== 'number' && (this._volume = volume);\n      this._fire(BuzzEvents.Volume, id, this._volume);\n      return this;\n    }\n\n    if (!isGroup) {\n      const sound = this._engine.sound(id);\n      return sound ? sound.volume() : null;\n    }\n\n    return this._volume;\n  }\n\n  /**\n   * Fades the group's or passed sound's volume to the passed value in the passed duration.\n   * @param {number} to The destination volume.\n   * @param {number} duration The period of fade in seconds.\n   * @param {string} [type = linear] The fade type (linear or exponential).\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  fade(to, duration, type = 'linear', id) {\n    const isGroup = typeof id !== 'number';\n\n    if (isGroup && this._fading) {\n      return this;\n    }\n\n    this._fire(BuzzEvents.FadeStart, id);\n\n    this._sounds(id).forEach(sound => sound.fade(to, duration, type));\n\n    if (isGroup) {\n      this._fading = true;\n\n      this._fadeTimer = setTimeout(() => {\n        this.volume(to);\n\n        clearTimeout(this._fadeTimer);\n\n        this._fadeTimer = null;\n        this._fading = false;\n        this._fire(BuzzEvents.FadeEnd);\n      }, duration * 1000);\n    }\n\n    return this;\n  }\n\n  /**\n   * Stops the group's or passed sound's current running fade.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  fadeStop(id) {\n    const isGroup = typeof id !== 'number';\n\n    if (isGroup && !this._fading) {\n      return this;\n    }\n\n    this._sounds(id).forEach(sound => sound.fadeStop());\n\n    if (isGroup) {\n      if (this._fadeTimer) {\n        clearTimeout(this._fadeTimer);\n        this._fadeTimer = null;\n      }\n\n      this._fading = false;\n    }\n\n    this._fire(BuzzEvents.FadeStop, id);\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the rate of the passed sound or the group.\n   * @param {number} [rate] Should be from 0.5 to 5.0.\n   * @param {number} [id] The sound id.\n   * @return {Buzz|number}\n   */\n  rate(rate, id) {\n    if (typeof rate === 'number' && rate >= 0.5 && rate <= 5) {\n      this._sounds(id).forEach(sound => sound.rate(rate));\n      typeof id !== 'number' && (this._rate = rate);\n      this._fire(BuzzEvents.Rate, id, this._rate);\n      return this;\n    }\n\n    if (typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? sound.rate() : null;\n    }\n\n    return this._rate;\n  }\n\n  /**\n   * Gets/sets the current playback position of the sound.\n   * @param {number} id The sound id\n   * @param {number} [seek] The seek position.\n   * @return {Buzz|number}\n   */\n  seek(id, seek) {\n    if (!id) {\n      return this;\n    }\n\n    const sound = this.sound(id);\n\n    if (!sound) {\n      return this;\n    }\n\n    if (typeof seek === 'number') {\n      // If the audio source is not yet loaded push an item to the queue to seek after the sound is loaded\n      // and load the sound.\n      if (!this.isLoaded()) {\n        this._queue.add('after-load', `seek-${id}`, () => this.seek(id, seek));\n        this.load();\n        return this;\n      }\n\n      sound.seek(seek);\n      this._fire(BuzzEvents.Seek, id, seek);\n      return this;\n    }\n\n    return sound.seek();\n  }\n\n  /**\n   * Gets/sets the looping behavior of a sound or the group.\n   * @param {boolean} [loop] True to loop the sound.\n   * @param {number} [id] The sound id.\n   * @return {Buzz|boolean}\n   */\n  loop(loop, id) {\n    if (typeof loop === 'boolean') {\n      this._sounds(id).forEach(sound => sound.loop(loop));\n      typeof id !== 'number' && (this._loop = loop);\n      return this;\n    }\n\n    if (typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? sound.loop() : null;\n    }\n\n    return this._loop;\n  }\n\n  /**\n   * Returns true if the passed sound is playing.\n   * @param {number} id The sound id.\n   * @return {boolean}\n   */\n  playing(id) {\n    const sound = this._engine.sound(id);\n    return sound ? sound.isPlaying() : null;\n  }\n\n  /**\n   * Returns true if the passed sound is muted or the group is muted.\n   * @param {number} [id] The sound id.\n   * @return {boolean}\n   */\n  muted(id) {\n    if (typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? sound.muted() : null;\n    }\n\n    return this._muted;\n  }\n\n  /**\n   * Returns the state of the passed sound or the group.\n   * @param {number} [id] The sound id.\n   * @return {BuzzState|SoundState}\n   */\n  state(id) {\n    if (typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? sound.state() : null;\n    }\n\n    return this._state;\n  }\n\n  /**\n   * Returns the duration of the passed sound or the total duration of the sound.\n   * @param {number} [id] The sound id.\n   * @return {number}\n   */\n  duration(id) {\n    if (typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? sound.duration() : null;\n    }\n\n    return this._duration;\n  }\n\n  /**\n   * Unloads the loaded audio buffer or free audio nodes.\n   * @return {Buzz}\n   */\n  unload() {\n    this._queue.remove('after-load');\n    this._stream && this._engine.releaseForGroup(this._compatibleSrc, this._id);\n    this._buffer = null;\n    this._stream && (this._duration = 0);\n    this._loadState = LoadState.NotLoaded;\n    this._noOfLoadCalls = 0;\n    return this;\n  }\n\n  /**\n   * Stops and destroys all the sounds belongs to this group and release other dependencies.\n   * @param {number} [soundId] The sound id.\n   */\n  destroy(soundId) {\n    if (soundId) {\n      const sound = this.sound(soundId);\n      sound && sound.destroy();\n      return;\n    }\n\n    if (this._state === BuzzState.Destroyed) {\n      return;\n    }\n\n    this.stop();\n    this._queue.clear();\n    this._engine.off(EngineEvents.Resume, this._onEngineResume);\n    this._engine.free(false, this._compatibleSrc, this._id);\n    this._engine.releaseForGroup(this._compatibleSrc, this._id);\n\n    this._buffer = null;\n    this._queue = null;\n    this._engine = null;\n    this._state = BuzzState.Destroyed;\n\n    this._fire(BuzzEvents.Destroy);\n\n    emitter.clear(this._id);\n  }\n\n  /**\n   * Makes the passed sound persistent that means it can't be auto-destroyed.\n   * @param {number} soundId The sound id.\n   */\n  persist(soundId) {\n    const sound = this.sound(soundId);\n    sound && sound.persist();\n  }\n\n  /**\n   * Makes the passed sound un-persistent that means it can be auto-destroyed.\n   * @param {number} soundId The sound id.\n   */\n  abandon(soundId) {\n    const sound = this.sound(soundId);\n    sound && sound.abandon();\n  }\n\n  /**\n   * Subscribes to an event for the sound or the group.\n   * @param {string} eventName The event name.\n   * @param {function} handler The event handler.\n   * @param {boolean} [once = false] True for one-time event handling.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  on(eventName, handler, once = false, id) {\n    emitter.on(id || this._id, eventName, handler, once);\n    return this;\n  }\n\n  /**\n   * Un-subscribes from an event for the sound or the group.\n   * @param {string} eventName The event name.\n   * @param {function} handler The event handler.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  off(eventName, handler, id) {\n    emitter.off(id || this._id, eventName, handler);\n    return this;\n  }\n\n  /**\n   * Returns the unique id of the sound.\n   * @return {number}\n   */\n  id() {\n    return this._id;\n  }\n\n  /**\n   * Returns the audio resource loading status.\n   * @return {LoadState}\n   */\n  loadState() {\n    return this._loadState;\n  }\n\n  /**\n   * Returns true if the audio source is loaded.\n   * @return {boolean}\n   */\n  isLoaded() {\n    return this._stream ? this._engine.hasFreeNodes(this._compatibleSrc, this._id) : this._loadState === LoadState.Loaded;\n  }\n\n  /**\n   * Returns the sound for the passed id.\n   * @param {number} id The sound id.\n   * @return {Sound}\n   */\n  sound(id) {\n    return this._engine.sound(id);\n  }\n\n  /**\n   * Returns true if the passed sound exists.\n   * @param {number} id The sound id.\n   * @return {boolean}\n   */\n  alive(id) {\n    return Boolean(this.sound(id));\n  }\n\n  /**\n   * Called on failure of loading audio source.\n   * @param {*} error The audio source load error.\n   * @private\n   */\n  _onLoadFailure(error) {\n    // Remove the queued actions from this class that are supposed to run after load.\n    this._noOfLoadCalls === 0 && this._queue.remove('after-load');\n\n    // Set the load state back to not loaded.\n    this._loadState = LoadState.NotLoaded;\n\n    // Fire the error event.\n    this._fire(BuzzEvents.Error, null, { type: ErrorType.LoadError, error: error });\n  }\n\n  /**\n   * The resource load progress handler.\n   * @param {object} evt The progress data.\n   * @private\n   */\n  _onLoadProgress(evt) {\n    this._fire(BuzzEvents.LoadProgress, null, evt.percentageDownloaded);\n  }\n\n  /**\n   * Whenever the engine resume run the actions queued for it.\n   * @private\n   */\n  _onEngineResume() {\n    this._queue.run('after-engine-resume');\n  }\n\n  /**\n   * Checks the engine state and plays the passed sound.\n   * @param {Sound} sound The sound.\n   * @private\n   */\n  _play(sound) {\n    if (this._engine.state() === EngineState.Destroying || this._engine.state() === EngineState.Done) {\n      this._fire(BuzzEvents.Error, null, { type: ErrorType.PlayError, error: 'The engine is stopping/stopped' });\n      return;\n    }\n\n    if (this._engine.state() === EngineState.NoAudio) {\n      this._fire(BuzzEvents.Error, null, { type: ErrorType.NoAudio, error: 'Web Audio is un-available' });\n      return;\n    }\n\n    const playAndFire = () => {\n      sound.play();\n      this._fire(BuzzEvents.PlayStart, sound.id());\n    };\n\n    if ([EngineState.Suspending, EngineState.Suspended, EngineState.Resuming].indexOf(this._engine.state()) > -1) {\n      this._queue.add('after-engine-resume', `sound-${sound.id()}`, () => playAndFire());\n      this._engine.state() !== EngineState.Resuming && this._engine.resume();\n      return;\n    }\n\n    playAndFire();\n  }\n\n  /**\n   * Remove the play actions queued from the queue.\n   * @param {number} [id] The sound id.\n   * @private\n   */\n  _removePlayActions(id) {\n    this._queue.remove('after-load', id ? `play-${id}` : null);\n    this._queue.remove('after-engine-resume', id ? `sound-${id}` : null);\n  }\n\n  /**\n   * Returns the sound for the passed id or all the sounds belong to this group.\n   * @param {number} [id] The sound id.\n   * @return {Array<Sound>}\n   * @private\n   */\n  _sounds(id) {\n    if (typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? [sound] : [];\n    }\n\n    return this._engine.sounds(this._id);\n  }\n\n  /**\n   * Fires an event of group or sound.\n   * @param {string} eventName The event name.\n   * @param {number} [id] The sound id.\n   * @param {...*} args The arguments that to be passed to handler.\n   * @return {Buzz}\n   * @private\n   */\n  _fire(eventName, id, ...args) {\n    if (id) {\n      emitter.fire(id, eventName, ...args, this.sound(id), this);\n      emitter.fire(this._id, eventName, ...args, this.sound(id), this);\n    } else {\n      emitter.fire(this._id, eventName, ...args, this);\n    }\n\n    return this;\n  }\n}\n\nconst $buzz = args => new Buzz(args);\n[\n  'setup',\n  'load',\n  'loadMedia',\n  'unload',\n  'unloadMedia',\n  'mute',\n  'unmute',\n  'volume',\n  'stop',\n  'suspend',\n  'resume',\n  'terminate',\n  'muted',\n  'state',\n  'context',\n  'masterGain',\n  'isAudioAvailable',\n  'bufferLoader',\n  'mediaLoader',\n  'on',\n  'off'\n].forEach(method => {\n  $buzz[method] = function () {\n    const result = engine[method](...arguments);\n    return result === engine ? $buzz : result;\n  };\n});\n\nmodule.exports = $buzz;\n","import utility from './Utility';\nimport DownloadResult from './DownloadResult';\n\n/**\n * Loads the audio sources into audio buffers and returns them.\n * The loaded buffers are cached.\n * @class\n */\nclass BufferLoader {\n\n  /**\n   * AudioContext.\n   * @type {AudioContext}\n   * @private\n   */\n  _context = null;\n\n  /**\n   * In-memory audio buffer cache store.\n   * @type {object}\n   * @private\n   */\n  _bufferCache = {};\n\n  /**\n   * Dictionary to store the current progress calls and their callbacks.\n   * @type {object}\n   * @private\n   */\n  _progressCallsAndCallbacks = {};\n\n  /**\n   * True if the loader is disposed.\n   * @type {boolean}\n   * @private\n   */\n  _disposed = false;\n\n  /**\n   * Create the cache.\n   * @param {AudioContext} context The Audio Context\n   */\n  constructor(context) {\n    this._context = context;\n  }\n\n  /**\n   * Loads single or multiple audio resources into audio buffers.\n   * @param {string|string[]} urls Single or array of audio urls.\n   * @param {function} [progressCallback] The callback that is called to intimate the percentage downloaded.\n   * @return {Promise<DownloadResult|Array<DownloadResult>>}\n   */\n  load(urls, progressCallback) {\n    if (typeof urls === 'string') {\n      return this._load(urls, progressCallback);\n    }\n\n    return Promise.all(urls.map(url => this._load(url, progressCallback)));\n  }\n\n  /**\n   * Removes the cached audio buffers.\n   * @param {string|string[]} [urls] Single or array of audio urls\n   */\n  unload(urls) {\n    if (typeof urls === 'string') {\n      this._unload(urls);\n      return;\n    }\n\n    if (Array.isArray(urls)) {\n      urls.forEach(url => this._unload(url), this);\n      return;\n    }\n\n    this._bufferCache = {};\n  }\n\n  /**\n   * Dispose the loader.\n   */\n  dispose() {\n    if (this._disposed) {\n      return;\n    }\n\n    this.unload();\n    this._bufferCache = null;\n    this._progressCallsAndCallbacks = null;\n    this._context = null;\n    this._disposed = true;\n  }\n\n  /**\n   * Loads a single audio resource into audio buffer and cache result if the download is succeeded.\n   * @param {string} url The Audio url.\n   * @param {function} [progressCallback] The callback that is called to intimate the percentage downloaded.\n   * @return {Promise<DownloadResult>}\n   * @private\n   */\n  _load(url, progressCallback) {\n    return new Promise(resolve => {\n      if (this._bufferCache.hasOwnProperty(url)) {\n        resolve(new DownloadResult(url, this._bufferCache[url]));\n        return;\n      }\n\n      if (this._progressCallsAndCallbacks.hasOwnProperty(url)) {\n        this._progressCallsAndCallbacks[url].push(resolve);\n        return;\n      }\n\n      this._progressCallsAndCallbacks[url] = [];\n      this._progressCallsAndCallbacks[url].push(resolve);\n\n      const reject = err => {\n        if (this._disposed) {\n          return;\n        }\n\n        this._progressCallsAndCallbacks[url].forEach(r => r(new DownloadResult(url, null, err)));\n        delete this._progressCallsAndCallbacks[url];\n      };\n\n      const decodeAudioData = arrayBuffer => {\n        if (this._disposed) {\n          return;\n        }\n\n        this._context.decodeAudioData(arrayBuffer, buffer => {\n          this._bufferCache[url] = buffer;\n          this._progressCallsAndCallbacks[url].forEach(r => r(new DownloadResult(url, buffer)));\n          delete this._progressCallsAndCallbacks[url];\n        }, reject);\n      };\n\n      if (utility.isBase64(url)) {\n        const data = atob(url.split(',')[1]);\n        const dataView = new Uint8Array(data.length); // eslint-disable-line no-undef\n\n        for (let i = 0; i < data.length; i++) {\n          dataView[i] = data.charCodeAt(i);\n        }\n\n        decodeAudioData(dataView.buffer);\n        return;\n      }\n\n      const req = new XMLHttpRequest();\n      req.open('GET', url, true);\n      req.responseType = 'arraybuffer';\n\n      req.addEventListener('load', () => decodeAudioData(req.response), false);\n\n      if (progressCallback) {\n        req.addEventListener('progress', (evt) => {\n          if (!evt.lengthComputable) {\n            progressCallback({ url: url, percentageDownloaded: 0 });\n          }\n\n          const percentageDownloaded = Math.round((evt.loaded / evt.total) * 100);\n          progressCallback({ url: url, percentageDownloaded: percentageDownloaded });\n        });\n      }\n\n      req.addEventListener('error', reject, false);\n      req.send();\n    });\n  }\n\n  /**\n   * Removes the single cached audio buffer.\n   * @param {string} url Audio url\n   * @private\n   */\n  _unload(url) {\n    delete this._bufferCache[url];\n  }\n}\n\nexport default BufferLoader;\n","import Html5AudioPool from './Html5AudioPool';\nimport DownloadResult from './DownloadResult';\n\n/**\n * Loads the HTML5 audio nodes and returns them.\n * @class\n */\nclass MediaLoader {\n\n  /**\n   * HTML5 audio pool.\n   * @type {Html5AudioPool}\n   * @private\n   */\n  _audioPool = null;\n\n  /**\n   * Store the array of audio elements that are currently in buffering state.\n   * @type {Array}\n   * @private\n   */\n  _bufferingAudios = [];\n\n  /**\n   * True if the loader is disposed.\n   * @type {boolean}\n   * @private\n   */\n  _disposed = false;\n\n  /**\n   * Creates the audio pool.\n   * @param {number} maxNodesPerSource Maximum number of audio nodes allowed for a url.\n   * @param {Heap} heap The sounds store.\n   */\n  constructor(maxNodesPerSource, heap) {\n    this._audioPool = new Html5AudioPool(maxNodesPerSource, heap);\n  }\n\n  /**\n   * Preloads the HTML5 audio nodes with audio and return them.\n   * @param {string|string[]} urls Single or array of audio file urls.\n   * @return {Promise<DownloadResult|Array<DownloadResult>>}\n   */\n  load(urls) {\n    console.log(typeof urls);\n    if (typeof urls === 'string') {\n      return this._load(urls);\n    }\n\n    return Promise.all(urls.map(url => this._load(url)));\n  }\n\n  /**\n   * Allocates audio node for a group.\n   * @param {string} url The audio file url.\n   * @param {number} groupId The group id.\n   * @return {Promise<DownloadResult>}\n   */\n  allocateForGroup(url, groupId) {\n    return this._load(url, groupId);\n  }\n\n  /**\n   * Allocates an audio node for sound and returns it.\n   * @param {string} src The audio file url.\n   * @param {number} groupId The buzz id.\n   * @param {number} soundId The sound id.\n   * @return {Audio}\n   */\n  allocateForSound(src, groupId, soundId) {\n    return this._audioPool.allocateForSound(src, groupId, soundId);\n  }\n\n  /**\n   * Releases the allocated audio node(s) for the passed urls.\n   * @param {string|string[]} [urls] Single or array of audio file urls.\n   */\n  unload(urls) {\n    const removeAudioObjOfUrl = url => {\n      const audioObj = this._bufferingAudios.find(a => a.url === url);\n      audioObj && this._cleanUp(audioObj);\n    };\n\n    if (!urls) {\n      this._bufferingAudios.forEach(audioObj => this._cleanUp(audioObj));\n      this._audioPool.release();\n    } else if (typeof urls === 'string') {\n      removeAudioObjOfUrl(urls);\n      this._audioPool.releaseForSource(urls);\n    } else if (Array.isArray(urls) && urls.length) {\n      urls.forEach(url => {\n        removeAudioObjOfUrl(url);\n        this._audioPool.releaseForSource(url);\n      });\n    }\n  }\n\n  /**\n   * Releases the allocated audio node for the passed group.\n   * @param {string} url The audio file url.\n   * @param {number} groupId The group id.\n   */\n  releaseForGroup(url, groupId) {\n    this._bufferingAudios\n      .filter(a => a.groupId === groupId)\n      .forEach(a => this._cleanUp(a));\n\n    this._audioPool.releaseForGroup(url, groupId);\n  }\n\n  /**\n   * Returns if there are free audio nodes available for a group.\n   * @param {string} src The audio file url.\n   * @param {number} groupId The group id.\n   * @return {boolean}\n   */\n  hasFreeNodes(src, groupId) {\n    return this._audioPool.hasFreeNodes(src, groupId);\n  }\n\n  /**\n   * Acquires the unallocated audio nodes and removes the excess ones.\n   */\n  cleanUp() {\n    this._audioPool.cleanUp();\n  }\n\n  /**\n   * Clear the event handlers of buffering audio elements and dispose the pool.\n   */\n  dispose() {\n    if (this._disposed) {\n      return;\n    }\n\n    [...this._bufferingAudios].forEach(audioObj => this._cleanUp(audioObj));\n    this._bufferingAudios = null;\n    this._audioPool.dispose();\n    this._audioPool = null;\n    this._disposed = true;\n  }\n\n  /**\n   * Preload the HTML5 audio element with the passed audio file and allocate it to the passed sound (if any).\n   * @param {string} url The audio file url.\n   * @param {number} [groupId] The buzz id.\n   * @return {Promise}\n   * @private\n   */\n  _load(url, groupId) {\n    return new Promise(resolve => {\n      const audio = groupId ? this._audioPool.allocateForGroup(url, groupId) : this._audioPool.allocateForSource(url);\n\n      const onCanPlayThrough = () => {\n        if (this._disposed) {\n          return;\n        }\n\n        const audioObj = this._bufferingAudios.find(obj => obj.audio === audio);\n        audioObj && this._cleanUp(audioObj);\n        resolve(new DownloadResult(url, audio));\n      };\n\n      const onError = (err) => {\n        if (this._disposed) {\n          return;\n        }\n\n        const audioObj = this._bufferingAudios.find(obj => obj.audio === audio);\n        audioObj && this._cleanUp(audioObj);\n        this._audioPool.releaseAudio(url, audio, groupId);\n        resolve(new DownloadResult(url, null, err));\n      };\n\n      audio.addEventListener('canplaythrough', onCanPlayThrough);\n      audio.addEventListener('error', onError);\n\n      this._bufferingAudios.push({\n        url: url,\n        groupId: groupId,\n        audio: audio,\n        canplaythrough: onCanPlayThrough,\n        error: onError\n      });\n\n      if (!audio.src) { // new audio element?\n        audio.src = url;\n        audio.load();\n        return;\n      }\n\n      audio.currentTime = 0;\n\n      if (audio.readyState >= 3) {\n        onCanPlayThrough();\n      }\n    });\n  }\n\n  /**\n   * Removes the event-handlers from the audio element.\n   * @param {object} audioObj The buffering audio object.\n   * @private\n   */\n  _cleanUp(audioObj) {\n    ['canplaythrough', 'error'].forEach(evt => audioObj.audio.removeEventListener(evt, audioObj[audioObj]));\n    this._bufferingAudios.splice(this._bufferingAudios.indexOf(audioObj), 1);\n  }\n}\n\nexport default MediaLoader;\n","import utility from './Utility';\n\n/**\n * Manages the pool of HTML5 audio nodes.\n * @class\n */\nclass Html5AudioPool {\n\n  /**\n   * Maximum number of HTML5 audio nodes that can be allocated for a resource.\n   * @type {number}\n   * @private\n   */\n  _maxNodesPerSource = 100;\n\n  /**\n   * The sounds store.\n   * @type {Heap}\n   * @private\n   */\n  _heap = null;\n\n  /**\n   * Created audio nodes for each resource.\n   * @type {object}\n   * @private\n   */\n  _resourceNodesMap = {};\n\n  /**\n   * True if the heap is cleaned manually.\n   * @type {boolean}\n   * @private\n   */\n  _heapCleaned = false;\n\n  /**\n   * Constructor\n   * @param {number} maxNodesPerSource Maximum number of audio nodes allowed for a resource.\n   * @param {Heap} heap The sounds store.\n   */\n  constructor(maxNodesPerSource, heap) {\n    this._maxNodesPerSource = maxNodesPerSource;\n    this._heap = heap;\n  }\n\n  /**\n   * Allocates an audio node for the passed source.\n   * @param {string} src The audio url.\n   * @return {Audio}\n   */\n  allocateForSource(src) {\n    this._createSrc(src);\n    this._checkMaxNodesForSrc(src);\n\n    const nodes = this._resourceNodesMap[src],\n      { unallocated } = nodes;\n\n    const audio = new Audio();\n    unallocated.push(audio);\n\n    return audio;\n  }\n\n  /**\n   * Allocates a HTML5 audio node to a particular group.\n   * @param {string} src The audio url.\n   * @param {number} [groupId] The buzz group id.\n   * @return {Audio}\n   */\n  allocateForGroup(src, groupId) {\n    this._createGroup(src, groupId);\n    this._checkMaxNodesForSrc(src);\n\n    const nodes = this._resourceNodesMap[src],\n      { unallocated, allocated } = nodes,\n      audio = unallocated.length ? unallocated.shift() : new Audio();\n\n    allocated[groupId].push(audio);\n\n    return audio;\n  }\n\n  /**\n   * Allocates the pre-loaded HTML5 audio node to a sound.\n   * @param {string} src The audio file url.\n   * @param {number} groupId The group id.\n   * @return {Audio}\n   */\n  allocateForSound(src, groupId) {\n    this._createGroup(src, groupId);\n\n    const nodes = this._resourceNodesMap[src],\n      { allocated } = nodes;\n\n    const groupSounds = allocated[groupId];\n\n    if (!groupSounds.length) {\n      throw new Error(`No free audio nodes available in the group ${groupId}`);\n    }\n\n    return groupSounds.shift();\n  }\n\n  /**\n   * Releases the audio nodes allocated for all resources.\n   */\n  release() {\n    Object.keys(this._resourceNodesMap).forEach(src => this.releaseForSource(src));\n  }\n\n  /**\n   * Releases the audio nodes allocated for a resource.\n   * @param {string} src The audio url.\n   */\n  releaseForSource(src) {\n    const nodes = this._resourceNodesMap[src],\n      { unallocated, allocated } = nodes;\n\n    unallocated.forEach(x => this._destroyNode(x));\n\n    Object.keys(allocated).forEach(groupId => this.releaseForGroup(src, groupId));\n\n    delete this._resourceNodesMap[src];\n  }\n\n  /**\n   * Releases the audio nodes allocated for a group.\n   * @param {string} src The audio file url.\n   * @param {number} groupId The group id.\n   */\n  releaseForGroup(src, groupId) {\n    const nodes = this._resourceNodesMap[src],\n      { allocated } = nodes;\n\n    allocated[groupId].forEach(audio => this._destroyNode(audio));\n    delete allocated[groupId];\n  }\n\n  /**\n   * Destroys the audio node reserved for sound.\n   * @param {string} src The audio file url.\n   * @param {Audio} audio The sound id.\n   * @param {number} groupId The buzz id.\n   */\n  releaseAudio(src, audio, groupId) {\n    const nodes = this._resourceNodesMap[src],\n      { allocated, unallocated } = nodes;\n\n    this._destroyNode(audio);\n\n    if (groupId) {\n      allocated[groupId] = allocated[groupId].filter(x => x !== audio);\n    } else {\n      nodes.unallocated = unallocated.filter(x => x !== audio);\n    }\n\n    groupId && !allocated[groupId].length && delete allocated[groupId];\n    !unallocated.length && !Object.keys(allocated).length && delete this._resourceNodesMap[src];\n  }\n\n  /**\n   * Acquires the unallocated audio nodes and removes the excess ones.\n   */\n  cleanUp() {\n    Object.keys(this._resourceNodesMap).forEach(src => {\n      const nodes = this._resourceNodesMap[src],\n        { unallocated, allocated } = nodes;\n\n      let audioNodes = [];\n\n      Object.keys(allocated).forEach(groupId => {\n        audioNodes = [...audioNodes, ...allocated[groupId]];\n        delete allocated[groupId];\n      });\n\n      nodes.unallocated = [...unallocated, ...audioNodes].slice(0, this._maxNodesPerSource);\n    });\n  }\n\n  /**\n   * Releases all the audio nodes.\n   */\n  dispose() {\n    Object.keys(this._resourceNodesMap).forEach(src => this.releaseForSource(src));\n    this._heap = null;\n  }\n\n  /**\n   * Returns true if there are free audio nodes available for a group.\n   * @param {string} src The audio file url.\n   * @param {number} groupId The group id.\n   * @return {boolean}\n   */\n  hasFreeNodes(src, groupId) {\n    if (!this._resourceNodesMap.hasOwnProperty(src)) {\n      return false;\n    }\n\n    const nodes = this._resourceNodesMap[src],\n      { allocated } = nodes;\n\n    return allocated[groupId].length > 0;\n  }\n\n  /**\n   * Creates an entry for the passed source in object if not exists.\n   * @param {string} src The audio file.\n   * @private\n   */\n  _createSrc(src) {\n    if (this._resourceNodesMap.hasOwnProperty(src)) {\n      return;\n    }\n\n    this._resourceNodesMap[src] = {\n      unallocated: [],\n      allocated: {}\n    };\n  }\n\n  /**\n   * Creates an entry for the passed source and group if not exists.\n   * @param {string} src The audio file.\n   * @param {number} groupId The group id.\n   * @private\n   */\n  _createGroup(src, groupId) {\n    this._createSrc(src);\n\n    const nodes = this._resourceNodesMap[src],\n      { allocated } = nodes;\n\n    if (allocated.hasOwnProperty(groupId)) {\n      return;\n    }\n\n    allocated[groupId] = [];\n  }\n\n  /**\n   * Chekcks and throws error if max audio nodes reached for the passed resource.\n   * @param {string} src The source url.\n   * @private\n   */\n  _checkMaxNodesForSrc(src) {\n    if (!this._resourceNodesMap.hasOwnProperty(src)) {\n      return;\n    }\n\n    const nodes = this._resourceNodesMap[src],\n      { unallocated, allocated } = nodes;\n\n    let totalAllocatedLength = 0;\n\n    Object.keys(allocated).forEach(groupId => {\n      totalAllocatedLength = totalAllocatedLength + allocated[groupId].length;\n    });\n\n    if (unallocated.length + totalAllocatedLength < this._maxNodesPerSource) {\n      return;\n    }\n\n    if (!this._heapCleaned) {\n      this._heap.free(src);\n      this._heapCleaned = true;\n      this._checkMaxNodesForSrc(src);\n    }\n\n    this._heapCleaned = false;\n\n    throw new Error(`Maximum nodes reached for resource ${src}`);\n  }\n\n  /**\n   * Destroys the passed audio node.\n   * @param {Audio} audio The HTML5 audio element.\n   * @private\n   */\n  _destroyNode(audio) {\n    audio.pause();\n    utility.isIE() && (audio.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA');\n    audio.onerror = null;\n    audio.onend = null;\n    audio.canplaythrough = null;\n  }\n}\n\nexport default Html5AudioPool;\n","/**\n * Represents a heap item.\n */\nclass HeapItem {\n\n  /**\n   * The sound object.\n   * @type {Sound}\n   */\n  sound = null;\n\n  /**\n   * The group id.\n   * @type {number|null}\n   */\n  groupId = null;\n\n  /**\n   * Set the group id and sound.\n   * @param {number} groupId The group id.\n   * @param {Sound} sound The sound instance.\n   */\n  constructor(groupId, sound) {\n    this.groupId = groupId;\n    this.sound = sound;\n  }\n}\n\n/**\n * Represents a collection of sounds belong to an audio resource.\n */\nclass HeapItemCollection {\n\n  /**\n   * The audio source url.\n   * @type {string|null}\n   */\n  _url = null;\n\n  /**\n   * The collection of sound objects.\n   * @type {object}\n   */\n  items = {};\n\n  /**\n   * The inactive time of sound.\n   * @type {number}\n   * @private\n   */\n  _inactiveTime = 0;\n\n  /**\n   * Initialize stuff.\n   * @param {string} url The audio url.\n   * @param {number} inactiveTime The inactive time of sound.\n   */\n  constructor(url, inactiveTime) {\n    this._url = url;\n    this._inactiveTime = inactiveTime;\n    this.free = this.free.bind(this);\n  }\n\n  /**\n   * Adds a new sound item to the collection.\n   * @param {number} groupId The group id.\n   * @param {Sound} sound The sound instance.\n   */\n  add(groupId, sound) {\n    const soundId = sound.id().toString();\n\n    if (this.items.hasOwnProperty(soundId)) {\n      return;\n    }\n\n    this.items[soundId] = new HeapItem(groupId, sound);\n  }\n\n  /**\n   * Removes the sounds.\n   * @param {boolean} [idle = true] True to destroy only the idle sounds.\n   * @param {number} [groupId] The group id.\n   */\n  free(idle = true, groupId) {\n    const now = new Date();\n\n    Object.values(this.items).forEach(item => {\n      const { sound, soundGroupId } = item;\n      const inactiveDurationInSeconds = (now - sound.lastPlayed()) / 1000;\n\n      if (idle && (sound.isPersistent() ||\n        sound.isPlaying() ||\n        sound.isPaused() ||\n        inactiveDurationInSeconds < this._inactiveTime * 60)) {\n        return;\n      }\n\n      if (!Boolean(groupId) || soundGroupId === groupId) {\n        sound.destroy();\n        delete this.items[sound.id()];\n      }\n    });\n  }\n\n  /**\n   * Returns the sounds belong to the group or all the sounds in the collection.\n   * @param {number} [groupId] The group id.\n   * @return {Array<HeapItem>}\n   */\n  sounds(groupId) {\n    const itemsArray = Object.values(this.items);\n    const items = groupId ? itemsArray.filter(item => item.groupId === groupId) : itemsArray;\n    return items.map(item => item.sound);\n  }\n\n  /**\n   * Destroys all the sounds.\n   */\n  destroy() {\n    Object.values(this.items).forEach(item => item.sound.destroy());\n    this.items = {};\n  }\n}\n\n/**\n * Stores all the created sounds.\n */\nclass Heap {\n\n  /**\n   * The inactive time of sound.\n   * @type {number}\n   * @private\n   */\n  _inactiveTime = 0;\n\n  /**\n   * The sound collections.\n   * @type {object}\n   * @private\n   */\n  _collections = {};\n\n  /**\n   * Initialize stuff.\n   * @param {number} inactiveTime The inactive time of sound in minutes.\n   */\n  constructor(inactiveTime) {\n    this._inactiveTime = inactiveTime;\n    this.free = this.free.bind(this);\n  }\n\n  /**\n   * Adds a new sound to the respective collection.\n   * @param {string} url The audio source url or base64 string.\n   * @param {number} groupId The group id.\n   * @param {Sound} sound The sound instance.\n   */\n  add(url, groupId, sound) {\n    if (!this._collections.hasOwnProperty(url)) {\n      this._collections[url] = new HeapItemCollection(url, this._inactiveTime);\n    }\n\n    this._collections[url].add(groupId, sound);\n  }\n\n  /**\n   * Returns the sound based on the id.\n   * @param {number} id The sound id.\n   * @return {Sound}\n   */\n  sound(id) {\n    return this.sounds().find(sound => sound.id() === id);\n  }\n\n  /**\n   * Returns the sounds belongs to a particular group or all of them.\n   * @param {number} [groupId] The group id.\n   * @return {Array}\n   */\n  sounds(groupId) {\n    const sounds = [];\n    Object.values(this._collections).forEach(col => sounds.push(...col.sounds(groupId)));\n    return sounds;\n  }\n\n  /**\n   * Removes sounds from the collections.\n   * @param {boolean} [idle = true] True to destroy only the idle sounds.\n   * @param {string} [src] The audio resource url.\n   * @param {number} [groupId] The group id.\n   */\n  free(idle = true, src, groupId) {\n    if (src) {\n      this._collections[src].free(idle, groupId);\n      return;\n    }\n\n    Object.values(this._collections).forEach(col => col.free(idle, groupId));\n  }\n\n  /**\n   * Removes the destroyed sound.\n   * @param {string} src The audio url.\n   * @param {number} groupId The group id.\n   * @param {number} soundId The sound id.\n   */\n  removeSound(src, groupId, soundId) {\n    delete this._collections[src].items[soundId];\n  }\n\n  /**\n   * Destroys all the sounds.\n   */\n  destroy() {\n    Object.values(this._collections).forEach(col => col.destroy());\n    this._collections = {};\n  }\n}\n\nexport default Heap;\n","import engine         from './Engine';\nimport utility        from './Utility';\nimport workerTimer    from './WorkerTimer';\n\n/**\n * Enum that represents the different states of a sound.\n * @enum {string}\n */\nconst SoundState = {\n  Ready: 'ready',\n  Playing: 'playing',\n  Paused: 'paused',\n  Destroyed: 'destroyed'\n};\n\n/**\n * Represents a sound created using Web Audio API.\n * @class\n */\nclass Sound {\n\n  /**\n   * Unique id.\n   * @type {number}\n   * @private\n   */\n  _id = -1;\n\n  /**\n   * The current volume of the sound. Should be from 0.0 to 1.0.\n   * @type {number}\n   * @private\n   */\n  _volume = 1.0;\n\n  /**\n   * The current playback speed. Should be from 0.5 to 5.\n   * @type {number}\n   * @private\n   */\n  _rate = 1;\n\n  /**\n   * True if the sound is currently muted.\n   * @type {boolean}\n   * @private\n   */\n  _muted = false;\n\n  /**\n   * True if the sound should play repeatedly.\n   * @type {boolean}\n   * @private\n   */\n  _loop = false;\n\n  /**\n   * The current state (playing, paused etc.) of the sound.\n   * @type {SoundState}\n   * @private\n   */\n  _state = SoundState.Ready;\n\n  /**\n   * Web API's audio context.\n   * @type {AudioContext}\n   * @private\n   */\n  _context = null;\n\n  /**\n   * The gain node to control the volume of the sound.\n   * @type {GainNode}\n   * @private\n   */\n  _gainNode = null;\n\n  /**\n   * True to use HTML5 audio node.\n   * @type {boolean}\n   * @private\n   */\n  _stream = false;\n\n  /**\n   * The audio buffer.\n   * @type {AudioBuffer}\n   * @private\n   */\n  _buffer = null;\n\n  /**\n   * The HTML5 Audio element.\n   * @type {Audio}\n   * @private\n   */\n  _audio = null;\n\n  /**\n   * The AudioBufferSourceNode that plays the audio buffer assigned to it.\n   * @type {AudioBufferSourceNode}\n   * @private\n   */\n  _bufferSourceNode = null;\n\n  /**\n   * Duration of the playback in seconds.\n   * @type {number}\n   * @private\n   */\n  _duration = 0;\n\n  /**\n   * The playback start position.\n   * @type {number}\n   * @private\n   */\n  _startPos = 0;\n\n  /**\n   * The playback end position.\n   * @type {number}\n   * @private\n   */\n  _endPos = 0;\n\n  /**\n   * The current position of the playback.\n   * @type {number}\n   * @private\n   */\n  _currentPos = 0;\n\n  /**\n   * The position of the playback during rate change.\n   * @type {number}\n   * @private\n   */\n  _rateSeek = 0;\n\n  /**\n   * The time at which the playback started.\n   * This property is required for getting the seek position of the playback.\n   * @type {number}\n   * @private\n   */\n  _startTime = 0;\n\n  /**\n   * The callback that will be called when the underlying HTML5 audio node is loaded.\n   * @type {function}\n   * @private\n   */\n  _loadCallback = null;\n\n  /**\n   * The callback that will be invoked after the play ends.\n   * @type {function}\n   * @private\n   */\n  _playEndCallback = null;\n\n  /**\n   * The callback that will be invoked after the sound destroyed.\n   * @type {function}\n   * @private\n   */\n  _destroyCallback = null;\n\n  /**\n   * True if the sound is currently fading.\n   * @type {boolean}\n   * @private\n   */\n  _fading = false;\n\n  /**\n   * The timer that runs function after the fading is complete.\n   * @type {number|null}\n   * @private\n   */\n  _fadeTimer = null;\n\n  /**\n   * The callback that will be invoked after the fade is completed.\n   * @type {function}\n   * @private\n   */\n  _fadeEndCallback = null;\n\n  /**\n   * The callback that will be invoked when there is error in HTML5 audio node.\n   * @type {function}\n   * @private\n   */\n  _audioErrorCallback = null;\n\n  /**\n   * Web Audio API's audio node to control media element.\n   * @type {MediaElementAudioSourceNode}\n   * @private\n   */\n  _mediaElementAudioSourceNode = null;\n\n  /**\n   * Represents the timer that is used to reset the variables once the sprite sound is played.\n   * @type {number|null}\n   * @private\n   */\n  _endTimer = null;\n\n  /**\n   * True for sprite.\n   * @type {boolean}\n   * @private\n   */\n  _isSprite = false;\n\n  /**\n   * Last played time.\n   * @type {Date}\n   * @private\n   */\n  _lastPlayed = new Date();\n\n  /**\n   * True to not auto-destroy.\n   * @type {boolean}\n   * @private\n   */\n  _persist = false;\n\n  /**\n   * Initializes the internal properties of the sound.\n   * @param {object} args The input parameters of the sound.\n   * @param {string} args.id The unique id of the sound.\n   * @param {boolean} [args.stream = false] True to use HTML5 audio node for playing sound.\n   * @param {Audio} [args.audio] The pre-loaded HTML5 audio object.\n   * @param {AudioBuffer} [args.buffer] Audio source buffer.\n   * @param {number} [args.volume = 1.0] The initial volume of the sound. Should be from 0.0 to 1.0.\n   * @param {number} [args.rate = 1] The initial playback rate of the sound. Should be from 0.5 to 5.0.\n   * @param {boolean} [args.loop = false] True to play the sound repeatedly.\n   * @param {boolean} [args.muted = false] True to be muted initially.\n   * @param {number} [args.startPos] The playback start position.\n   * @param {number} [args.endPos] The playback end position.\n   * @param {function} [args.loadCallback] The callback that will be called when the underlying HTML5 audio node is loaded.\n   * @param {function} [args.playEndCallback] The callback that will be invoked after the play ends.\n   * @param {function} [args.destroyCallback] The callback that will be invoked after destroyed.\n   * @param {function} [args.fadeEndCallback] The callback that will be invoked the fade is completed.\n   * @param {function} [args.audioErrorCallback] The callback that will be invoked when there is error in HTML5 audio node.\n   * @constructor\n   */\n  constructor(args) {\n    this._onBufferEnded = this._onBufferEnded.bind(this);\n    this._onHtml5Ended = this._onHtml5Ended.bind(this);\n    this._onCanPlayThrough = this._onCanPlayThrough.bind(this);\n    this._onAudioError = this._onAudioError.bind(this);\n\n    const {\n      id,\n      stream,\n      buffer,\n      audio,\n      volume,\n      rate,\n      loop,\n      muted,\n      startPos,\n      endPos,\n      loadCallback,\n      playEndCallback,\n      destroyCallback,\n      fadeEndCallback,\n      audioErrorCallback\n    } = args;\n\n    // Set the passed id or the random one.\n    this._id = typeof id === 'number' ? id : utility.id();\n\n    // Set the passed audio buffer and duration.\n    this._buffer = buffer;\n    this._audio = audio;\n\n    // Set other properties.\n    volume && (this._volume = volume);\n    rate && (this._rate = rate);\n    muted && (this._muted = muted);\n    loop && (this._loop = loop);\n    startPos && (this._startPos = startPos);\n    endPos && (this._endPos = endPos);\n    this._loadCallback = loadCallback;\n    this._playEndCallback = playEndCallback;\n    this._destroyCallback = destroyCallback;\n    this._fadeEndCallback = fadeEndCallback;\n    this._audioErrorCallback = audioErrorCallback;\n    this._stream = Boolean(stream);\n\n    this._endPos = this._stream ? this._audio.duration : this._buffer.duration;\n    this._duration = this._endPos - this._startPos;\n    this._isSprite = this._duration < this._endPos;\n\n    // If stream is `true` then set the playback rate, looping and listen to `error` event.\n    if (this._stream) {\n      this._audio.playbackRate = this._rate;\n      this._setLoop(this._loop);\n      this._audio.addEventListener('error', this._onAudioError);\n    }\n\n    // If web audio is available, create gain node and set the volume..\n    if (engine.isAudioAvailable()) {\n      this._context = engine.context();\n      this._gainNode = this._context.createGain();\n      this._gainNode.gain.setValueAtTime(this._muted ? 0 : this._volume, this._context.currentTime);\n\n      // Create media element audio source node.\n      if (this._stream) {\n        this._mediaElementAudioSourceNode = this._context.createMediaElementSource(this._audio);\n        this._mediaElementAudioSourceNode.connect(this._gainNode);\n      }\n    }\n  }\n\n  /**\n   * Pre-loads the underlying HTML audio node (only in case of stream).\n   */\n  load() {\n    if (!this._stream || this.isPlaying() || this.state() === SoundState.Destroyed) {\n      return;\n    }\n\n    this._audio.addEventListener('canplaythrough', this._onCanPlayThrough);\n    this._audio.currentTime = 0;\n\n    if (this._audio.readyState >= 3) {\n      this._onCanPlayThrough();\n    }\n  }\n\n  /**\n   * Plays the sound or the sound defined in the sprite.\n   * @return {Sound}\n   */\n  play() {\n    // If the sound is already playing then return.\n    if (this.isPlaying()) {\n      return this;\n    }\n\n    this._stream ? this._playHtml5() : this._playBuffer();\n\n    // Record the starting time and set the state.\n    this._startTime = this._context.currentTime;\n    this._state = SoundState.Playing;\n\n    return this;\n  }\n\n  /**\n   * Pauses the playing sound.\n   * @return {Sound}\n   */\n  pause() {\n    // If the sound is already playing return.\n    if (!this.isPlaying()) {\n      return this;\n    }\n\n    // Stop the current running fade.\n    this.fadeStop();\n\n    if (this._stream) {\n      this._audio.removeEventListener('ended', this._onHtml5Ended);\n      this._clearEndTimer();\n      this._audio.pause();\n    } else {\n      this._rateSeek = 0;\n      this._destroyBufferNode();\n    }\n\n    this._currentPos = this.seek();\n    this._state = SoundState.Paused;\n\n    return this;\n  }\n\n  /**\n   * Stops the sound that is playing or in paused state.\n   * @return {Sound}\n   */\n  stop() {\n    // If the sound is not playing or paused return.\n    if (!this.isPlaying() && !this.isPaused()) {\n      return this;\n    }\n\n    // Stop the current running fade.\n    this.fadeStop();\n\n    if (this._stream) {\n      this._audio.removeEventListener('ended', this._onHtml5Ended);\n      this._clearEndTimer();\n      this._audio.pause();\n      this._audio.currentTime = this._startPos || 0;\n    } else {\n      this._currentPos = 0;\n      this._rateSeek = 0;\n      this._destroyBufferNode();\n    }\n\n    this._lastPlayed = new Date();\n\n    this._state = SoundState.Ready;\n\n    return this;\n  }\n\n  /**\n   * Mutes the sound.\n   * @return {Sound}\n   */\n  mute() {\n    // Stop the current running fade.\n    this.fadeStop();\n\n    // Set the value of gain node to 0.\n    this._gainNode.gain.setValueAtTime(0, this._context.currentTime);\n\n    // Set the muted property true.\n    this._muted = true;\n\n    return this;\n  }\n\n  /**\n   * Un-mutes the sound.\n   * @return {Sound}\n   */\n  unmute() {\n    // Stop the current running fade.\n    this.fadeStop();\n\n    // Reset the gain node's value back to volume.\n    this._gainNode.gain.setValueAtTime(this._volume, this._context.currentTime);\n\n    // Set the muted property to false.\n    this._muted = false;\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the volume.\n   * @param {number} [vol] Should be from 0.0 to 1.0.\n   * @return {Sound|number}\n   */\n  volume(vol) {\n    // If no input parameter is passed then return the volume.\n    if (typeof vol === 'undefined') {\n      return this._volume;\n    }\n\n    // Stop the current running fade.\n    this.fadeStop();\n\n    // Set the gain's value to the passed volume.\n    this._gainNode.gain.setValueAtTime(this._muted ? 0 : vol, this._context.currentTime);\n\n    // Set the volume to the property.\n    this._volume = vol;\n\n    return this;\n  }\n\n  /**\n   * Fades the sound volume to the passed value in the passed duration.\n   * @param {number} to The destination volume.\n   * @param {number} duration The period of fade.\n   * @param {string} [type = linear] The fade type (linear or exponential).\n   * @return {Sound}\n   */\n  fade(to, duration, type = 'linear') {\n    // If a fade is already running stop it.\n    if (this._fading) {\n      this.fadeStop();\n    }\n\n    this._fading = true;\n\n    if (type === 'linear') {\n      this._gainNode.gain.linearRampToValueAtTime(to, this._context.currentTime + duration);\n    } else {\n      this._gainNode.gain.exponentialRampToValueAtTime(to, this._context.currentTime + duration);\n    }\n\n    this._fadeTimer = workerTimer.setTimeout(() => {\n      this.volume(to);\n\n      workerTimer.clearTimeout(this._fadeTimer);\n\n      this._fadeTimer = null;\n      this._fading = false;\n\n      this._fadeEndCallback && this._fadeEndCallback(this);\n    }, duration * 1000);\n\n    return this;\n  }\n\n  /**\n   * Stops the current running fade.\n   * @return {Sound}\n   */\n  fadeStop() {\n    if (!this._fading) {\n      return this;\n    }\n\n    this._gainNode.gain.cancelScheduledValues(this._context.currentTime);\n\n    if (this._fadeTimer) {\n      workerTimer.clearTimeout(this._fadeTimer);\n      this._fadeTimer = null;\n    }\n\n    this._fading = false;\n    this.volume(this._gainNode.gain.value);\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the playback rate.\n   * @param {number} [rate] The playback rate. Should be from 0.5 to 5.\n   * @return {Sound|number}\n   */\n  rate(rate) {\n    // If no input parameter is passed return the current rate.\n    if (typeof rate === 'undefined') {\n      return this._rate;\n    }\n\n    this._rate = rate;\n    this._rateSeek = this.seek();\n\n    if (this.isPlaying()) {\n      if (this._stream) {\n        this._audio.playbackRate = rate;\n\n        if (this._isSprite) {\n          this._clearEndTimer();\n          let [, duration] = this._getTimeVars();\n          this._endTimer = workerTimer.setTimeout(this._onHtml5Ended, (duration * 1000) / Math.abs(rate));\n        }\n      } else {\n        this._startTime = this._context.currentTime;\n        this._bufferSourceNode && (this._bufferSourceNode.playbackRate.setValueAtTime(rate, this._context.currentTime));\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the seek position.\n   * @param {number} [seek] The seek position.\n   * @return {Sound|number}\n   */\n  seek(seek) {\n    // If no parameter is passed return the current position.\n    if (typeof seek === 'undefined') {\n      if (this._stream) {\n        return this._audio.currentTime;\n      }\n\n      const realTime = this.isPlaying() ? this._context.currentTime - this._startTime : 0;\n      const rateElapsed = this._rateSeek ? this._rateSeek - this._currentPos : 0;\n      return this._currentPos + (rateElapsed + realTime * this._rate);\n    }\n\n    // If seeking outside the borders then return.\n    if (seek < this._startPos || seek > this._endPos) {\n      return this;\n    }\n\n    // If the sound is currently playing... pause it, set the seek position and then continue playing.\n    const isPlaying = this.isPlaying();\n\n    if (isPlaying) {\n      this.pause();\n    }\n\n    this._currentPos = seek;\n\n    if (isPlaying) {\n      this.play();\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the loop parameter of the sound.\n   * @param {boolean} [loop] True to loop the sound.\n   * @return {Sound/boolean}\n   */\n  loop(loop) {\n    if (typeof loop !== 'boolean') {\n      return this._loop;\n    }\n\n    this._loop = loop;\n    this._setLoop(loop);\n\n    return this;\n  }\n\n  /**\n   * Destroys the dependencies and release the memory.\n   * @return {Sound}\n   */\n  destroy() {\n    // If the sound is already destroyed return.\n    if (this._state === SoundState.Destroyed) {\n      return this;\n    }\n\n    // Stop the sound.\n    this.stop();\n\n    // Destroy the audio node and media element audio source node.\n    this._destroyAudio();\n    this._destroyMediaSourceNode();\n\n    // Disconnect from the master gain.\n    this._gainNode && this._gainNode.disconnect();\n\n    this._buffer = null;\n    this._context = null;\n    this._gainNode = null;\n\n    // Set the state to \"destroyed\".\n    this._state = SoundState.Destroyed;\n\n    this._destroyCallback && this._destroyCallback(this);\n\n    return this;\n  }\n\n  /**\n   * Returns the unique id of the sound.\n   * @return {number}\n   */\n  id() {\n    return this._id;\n  }\n\n  /**\n   * Returns whether the sound is muted or not.\n   * @return {boolean}\n   */\n  muted() {\n    return this._muted;\n  }\n\n  /**\n   * Returns the state of the sound.\n   * @return {SoundState}\n   */\n  state() {\n    return this._state;\n  }\n\n  /**\n   * Returns the total duration of the playback.\n   * @return {number}\n   */\n  duration() {\n    return this._duration;\n  }\n\n  /**\n   * Returns true if the buzz is playing.\n   * @return {boolean}\n   */\n  isPlaying() {\n    return this._state === SoundState.Playing;\n  }\n\n  /**\n   * Returns true if buzz is paused.\n   * @return {boolean}\n   */\n  isPaused() {\n    return this._state === SoundState.Paused;\n  }\n\n  /**\n   * Returns last played time.\n   * @return {number}\n   */\n  lastPlayed() {\n    return this._lastPlayed;\n  }\n\n  /**\n   * Disables auto-destroy.\n   */\n  persist() {\n    if (this._state === SoundState.Destroyed) {\n      return;\n    }\n\n    this._persist = true;\n  }\n\n  /**\n   * Enables auto-destroy.\n   */\n  abandon() {\n    if (this._state === SoundState.Destroyed) {\n      return;\n    }\n\n    this._persist = false;\n  }\n\n  /**\n   * Returns true if auto-destroy enabled.\n   * @return {boolean}\n   */\n  isPersistent() {\n    return this._persist;\n  }\n\n  /**\n   * HTML5 Audio error handler.\n   * @param {object} err Error object.\n   * @private\n   */\n  _onAudioError(err) {\n    this._audioErrorCallback && this._audioErrorCallback(this, err);\n  }\n\n  /**\n   * Returns the seek, duration and timeout for the playback.\n   * @return {[number, number, number]}\n   * @private\n   */\n  _getTimeVars() {\n    let seek = Math.max(0, this._currentPos > 0 ? this._currentPos : this._startPos),\n      duration = this._endPos - this._startPos,\n      timeout = (duration * 1000) / this._rate;\n\n    return [seek, duration, timeout];\n  }\n\n  /**\n   * Plays the audio using audio buffer.\n   * @private\n   */\n  _playBuffer() {\n    let [seek, duration] = this._getTimeVars();\n\n    // Create a new buffersourcenode to play the sound.\n    this._bufferSourceNode = this._context.createBufferSource();\n\n    // Set the buffer, playback rate and loop parameters\n    this._bufferSourceNode.buffer = this._buffer;\n    this._bufferSourceNode.playbackRate.setValueAtTime(this._rate, this._context.currentTime);\n    this._setLoop(this._loop);\n\n    // Connect the node to the audio graph.\n    this._bufferSourceNode.connect(this._gainNode);\n\n    // Listen to the \"ended\" event to reset/clean things.\n    this._bufferSourceNode.addEventListener('ended', this._onBufferEnded);\n\n    const startTime = this._context.currentTime;\n\n    // Call the supported method to play the sound.\n    if (typeof this._bufferSourceNode.start !== 'undefined') {\n      this._bufferSourceNode.start(startTime, seek, this._loop ? undefined : duration);\n    } else {\n      this._bufferSourceNode.noteGrainOn(startTime, seek, this._loop ? undefined : duration);\n    }\n  }\n\n  /**\n   * Plays the audio using HTML5 audio object.\n   * @private\n   */\n  _playHtml5() {\n    let [seek, , timeout] = this._getTimeVars();\n\n    this._audio.currentTime = seek;\n\n    if (this._isSprite) {\n      this._endTimer = workerTimer.setTimeout(this._onHtml5Ended, timeout);\n    } else {\n      this._audio.addEventListener('ended', this._onHtml5Ended);\n    }\n\n    this._audio.play();\n  }\n\n  /**\n   * Callback that is invoked after the buffer playback is ended.\n   * @private\n   */\n  _onBufferEnded() {\n    this._lastPlayed = new Date();\n\n    // Reset the seek positions\n    this._currentPos = 0;\n    this._rateSeek = 0;\n\n    // Destroy the node (AudioBufferSourceNodes are one-time use and throw objects).\n    this._destroyBufferNode();\n\n    // Reset the state to allow future actions.\n    this._state = SoundState.Ready;\n\n    // Invoke the callback if there is one.\n    this._playEndCallback && this._playEndCallback(this);\n  }\n\n  /**\n   * Callback that is invoked after the html audio playback is ended.\n   * @private\n   */\n  _onHtml5Ended() {\n    if (this._loop) {\n      this.stop().play();\n    } else {\n      this.stop();\n      this._state = SoundState.Ready;\n      this._playEndCallback && this._playEndCallback(this);\n    }\n  }\n\n  /**\n   * Clears the end-timer.\n   * @private\n   */\n  _clearEndTimer() {\n    if (!this._endTimer) {\n      return;\n    }\n\n    workerTimer.clearTimeout(this._endTimer);\n    this._endTimer = null;\n  }\n\n  /**\n   * Event handler for audio's \"canplaythrough\" event.\n   * @private\n   */\n  _onCanPlayThrough() {\n    this._loadCallback();\n    this._audio.removeEventListener('canplaythrough', this._onCanPlayThrough);\n  };\n\n  /**\n   * Returns the gain node.\n   * @return {GainNode}\n   */\n  _gain() {\n    return this._gainNode;\n  }\n\n  /**\n   * Stops the playing buffer source node and destroys it.\n   * @private\n   */\n  _destroyBufferNode() {\n    if (!this._bufferSourceNode) {\n      return;\n    }\n\n    if (typeof this._bufferSourceNode.stop !== 'undefined') {\n      this._bufferSourceNode.stop();\n    } else {\n      this._bufferSourceNode.noteGrainOff();\n    }\n\n    this._bufferSourceNode.disconnect();\n    this._bufferSourceNode.removeEventListener('ended', this._onBufferEnded);\n    this._bufferSourceNode = null;\n  }\n\n  /**\n   * Destroys the media audio source node.\n   * @private\n   */\n  _destroyMediaSourceNode() {\n    if (!this._mediaElementAudioSourceNode) {\n      return;\n    }\n\n    this._mediaElementAudioSourceNode.disconnect();\n    this._mediaElementAudioSourceNode = null;\n  }\n\n  /**\n   * Destroys the passed audio node.\n   * @private\n   */\n  _destroyAudio() {\n    if (!this._audio) {\n      return;\n    }\n\n    this._audio.removeEventListener('canplaythrough', this._onCanPlayThrough);\n    this._audio.removeEventListener('error', this._onAudioError);\n    this._audio.pause();\n    utility.isIE() && (this._audio.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA');\n    this._audio.onerror = null;\n    this._audio.onend = null;\n    this._audio.canplaythrough = null;\n    this._audio = null;\n  }\n\n  /**\n   * Sets the sound to play repeatedly or not.\n   * @param {boolean} loop True to play the sound repeatedly.\n   * @private\n   */\n  _setLoop(loop) {\n    if (this._stream) {\n      this._audio.loop = loop;\n    } else {\n      this._bufferSourceNode.loop = loop;\n\n      if (loop) {\n        this._bufferSourceNode.loopStart = this._startPos;\n        this._bufferSourceNode.loopEnd = this._endPos;\n      }\n    }\n  }\n}\n\nexport { Sound as default, SoundState };\n","// Credit: https://github.com/goldfire/howler.js/issues/626\n\nconst WORKER_SCRIPT = `\n  var timerIds = {}, timeoutWorker = {};\n  \n  timeoutWorker.setTimeout = function(timerId, duration) {\n    timerIds[timerId] = setTimeout(function() {\n      postMessage({ timerId: timerId });\n    }, duration);\n  };\n  \n  timeoutWorker.clearTimeout = function(timerId) {\n    clearTimeout(timerIds[timerId]);\n  };\n  \n  timeoutWorker.setInterval = function(timerId, duration) {\n    timerIds[timerId] = setInterval(function() {\n      postMessage({ timerId: timerId });\n    }, duration);\n  };\n  \n  timeoutWorker.clearInterval = function(timerId) {\n    clearInterval(timerIds[timerId]);\n  };\n  \n  onmessage = function(e) {\n    var command = e.data.command;\n    timeoutWorker[command](e.data.timerId, e.data.duration);\n  };\n`;\n\n/**\n * Provides more accurate timeouts and intervals when the browser tab is not active using Web Workers.\n * @class\n */\nclass WorkerTimer {\n\n  /**\n   * Web worker.\n   * @type {Worker}\n   * @private\n   */\n  _worker = null;\n\n  /**\n   * Whether Web Worker is available or not. If not available then normal setTimeout and setInterval will be used.\n   * @type {boolean}\n   * @private\n   */\n  _isWorkerThreadAvailable = false;\n\n  /**\n   * Dictionary to store the callbacks that should be invoked after timeouts and intervals.\n   * @type {{}}\n   * @private\n   */\n  _timerCallbacks = {};\n\n  /**\n   * The incrementing id that is used to link the timer running in worker with the callback.\n   * @type {number}\n   * @private\n   */\n  _timerId = 0;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._handleMessage = this._handleMessage.bind(this);\n  }\n\n  /**\n   * Initialize the worker\n   */\n  init() {\n    if (!Worker || this._worker) {\n      return;\n    }\n\n    let blob = this._getBlob(WORKER_SCRIPT);\n    if (blob === null) {\n      return;\n    }\n\n    let workerUrl = this._createObjectURL(blob);\n    if (workerUrl === null) {\n      return;\n    }\n\n    this._worker = new Worker(workerUrl);\n    this._worker.addEventListener('message', this._handleMessage);\n    this._isWorkerThreadAvailable = true;\n  }\n\n  /**\n   * Returns a blob.\n   * @param {string} script The javascript code string.\n   * @return {*}\n   * @private\n   */\n  _getBlob(script) {\n    let blob = null;\n\n    try {\n      blob = new Blob([script], { type: 'application/javascript' });\n    } catch (e) {\n      let blobBuilderType = null;\n\n      if (typeof BlobBuilder !== 'undefined') {\n        blobBuilderType = BlobBuilder;\n      } else if (typeof WebKitBlobBuilder !== 'undefined') {\n        blobBuilderType = WebKitBlobBuilder;\n      }\n\n      blob = new blobBuilderType(); // eslint-disable-line new-cap\n      blob.append(script);\n      blob = blob.getBlob();\n    }\n\n    return blob;\n  }\n\n  /**\n   * Returns object url.\n   * @param {*} file The blob.\n   * @return {*}\n   * @private\n   */\n  _createObjectURL(file) {\n    if (typeof URL !== 'undefined' && URL.createObjectURL) {\n      return URL.createObjectURL(file);\n    } else if (typeof webkitURL !== 'undefined') {\n      return webkitURL.createObjectURL(file);\n    }\n\n    return null;\n  }\n\n  /**\n   * Callback that handles the messages send by worker.\n   * @param {object} e Event argument that contains the message data and other information\n   * @private\n   */\n  _handleMessage(e) {\n    const callback = this._timerCallbacks[e.data.timerId];\n\n    if (callback && callback.cb) {\n      callback.cb();\n    }\n\n    if (!callback.repeat) {\n      delete this._timerCallbacks[e.data.timerId];\n    }\n  }\n\n  /**\n   * Invokes a callback after the passed time.\n   * @param {function} callback The callback that should be called after the elapsed period.\n   * @param {number} duration The time period in ms.\n   * @return {number}\n   */\n  setTimeout(callback, duration) {\n    if (!this._isWorkerThreadAvailable) {\n      return setTimeout(callback, duration);\n    }\n\n    this._timerId = this._timerId + 1;\n    this._timerCallbacks[this._timerId] = { cb: callback, repeat: false };\n    this._worker.postMessage({ command: 'setTimeout', timerId: this._timerId, duration: duration });\n    return this._timerId;\n  }\n\n  /**\n   * Clears the scheduled timeout.\n   * @param {number} timeoutId The timeout id.\n   */\n  clearTimeout(timeoutId) {\n    if (!this._isWorkerThreadAvailable) {\n      return clearTimeout(timeoutId);\n    }\n\n    this._worker.postMessage({ command: 'clearTimeout', timerId: timeoutId });\n    delete this._timerCallbacks[timeoutId];\n  }\n\n  /**\n   * Invokes the callback function at the passed interval.\n   * @param {function} callback The callback function.\n   * @param {number} duration The time interval.\n   * @return {number}\n   */\n  setInterval(callback, duration) {\n    if (!this._isWorkerThreadAvailable) {\n      return setInterval(callback, duration);\n    }\n\n    this._timerId = this._timerId + 1;\n    this._timerCallbacks[this._timerId] = { cb: callback, repeat: true };\n    this._worker.postMessage({ command: 'setInterval', timerId: this._timerId, duration: duration });\n    return this._timerId;\n  }\n\n  /**\n   * Clears the scheduled interval.\n   * @param {number} intervalId The interval id.\n   */\n  clearInterval(intervalId) {\n    if (!this._isWorkerThreadAvailable) {\n      return clearTimeout(intervalId);\n    }\n\n    this._worker.postMessage({ command: 'clearTimeout', timerId: intervalId });\n    delete this._timerCallbacks[intervalId];\n  }\n\n  /**\n   * Kills the worker thread.\n   */\n  terminate() {\n    if (this._worker) {\n      this._worker.removeEventListener('message', this._handleMessage);\n      this._worker.terminate();\n      this._worker = null;\n    }\n\n    this._isWorkerThreadAvailable = false;\n    this._timerCallbacks = {};\n    this._timerId = 0;\n  }\n}\n\nexport default new WorkerTimer();\n"],"sourceRoot":""}