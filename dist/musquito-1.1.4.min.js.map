{"version":3,"sources":["webpack://$buzz/webpack/universalModuleDefinition","webpack://$buzz/webpack/bootstrap","webpack://$buzz/./src/Utility.js","webpack://$buzz/./src/Engine.js","webpack://$buzz/./src/Loader.js","webpack://$buzz/./src/Emitter.js","webpack://$buzz/./src/Queue.js","webpack://$buzz/./src/Buzz.js","webpack://$buzz/./src/Heap.js","webpack://$buzz/./src/Sound.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Utility","_navigator","_contextType","_formats","navigator","this","AudioContext","webkitAudioContext","audio","Audio","mp3","Boolean","canPlayType","replace","mpeg","opus","ogg","oga","wav","aac","caf","m4a","mp4","weba","webm","dolby","flac","Math","round","Date","now","random","format","formats","find","isFormatSupported","source","ext","isBase64","exec","toLowerCase","sources","isSourceSupported","str","test","userAgent","maxTouchPoints","msMaxTouchPoints","ErrorType","NoAudio","LoadError","PlayError","EngineError","EngineState","NotReady","Ready","Suspending","Suspended","Resuming","Destroying","Done","EngineEvents","Add","Remove","Volume","Mute","Pause","Stop","Suspend","Resume","Error","userInputEventNames","engine","_id","utility","id","_muted","_volume","_cleanUpInterval","_autoEnable","_intervalId","_isAudioAvailable","_state","_context","_gainNode","_queue","_heap","_loader","Heap","Queue","_resumeAndRemoveListeners","args","getContext","_fire","type","error","volume","muted","cleanUpInterval","autoEnable","onadd","onremove","onstop","onpause","onmute","onvolume","onsuspend","onresume","onerror","ondone","on","Loader","state","forEach","eventName","document","addEventListener","createGain","gain","setValueAtTime","currentTime","connect","destination","setInterval","free","urls","load","unload","vol","undefined","sounds","sound","stop","add","suspend","then","run","resume","cleanUp","clearInterval","destroy","dispose","clear","emitter","remove","terminate","close","handler","once","off","idOrUrl","groupId","Sound","_gain","idle","fire","default","DownloadStatus","Success","Failure","DownloadResult","url","status","context","_bufferCache","_progressCallsAndCallbacks","_disposed","_load","Promise","all","map","Array","isArray","_unload","resolve","push","reject","err","decodeAudioData","arrayBuffer","buffer","data","atob","split","dataView","Uint8Array","length","charCodeAt","req","XMLHttpRequest","open","responseType","response","send","Emitter","_objectsEventsHandlersMap","_hasObject","objEvents","_hasEvent","filter","eventSubscriber","eventSubscribers","setTimeout","subscriber","_eventActions","actionIdentifier","action","removeAfterRun","hasEvent","fn","keys","_run","hasAction","queued","BuzzState","Destroyed","BuzzEvents","Load","UnLoad","PlayStart","PlayEnd","Seek","Rate","FadeStart","FadeEnd","FadeStop","Destroy","LoadState","NotLoaded","Loading","Loaded","Buzz","_src","_format","_sprite","_rate","_loop","_preload","_autoplay","_buffer","_duration","_compatibleSrc","_loadState","_engine","_fading","_fadeTimer","setup","_onEngineResume","isAudioAvailable","src","sprite","rate","loop","autoplay","preload","onload","onunload","onplaystart","onplayend","onrate","onseek","ondestroy","play","isLoaded","getCompatibleSource","downloadResult","duration","_onLoadFailure","indexOf","getSupportedFormat","getSupportedSource","soundOrId","_play","newSoundId","playSound","soundArgs","playEndCallback","destroyCallback","fadeEndCallback","positions","startPos","endPos","newSound","_removePlayActions","fadeStop","_sounds","pause","isGroup","mute","unmute","to","fade","clearTimeout","seek","isPlaying","playAndFire","$buzz","method","result","arguments","HeapItem","HeapItemCollection","items","soundId","toString","values","item","soundGroupId","isPaused","itemsArray","_collections","col","SoundState","Playing","Paused","_bufferSourceNode","_startPos","_endPos","_currentPos","_rateSeek","_startTime","_playEndCallback","_destroyCallback","_fadeEndCallback","max","createBufferSource","playbackRate","_setLoop","_destroyBufferNode","startTime","start","noteGrainOn","linearRampToValueAtTime","exponentialRampToValueAtTime","cancelScheduledValues","realTime","rateElapsed","disconnect","noteGrainOff","removeEventListener","_onEnded","loopStart","loopEnd"],"mappings":"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","file":"musquito-1.1.4.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"$buzz\"] = factory();\n\telse\n\t\troot[\"$buzz\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","/**\n * Contains helper methods.\n */\nclass Utility {\n\n  /**\n   * The navigator object.\n   * @type {Navigator}\n   * @private\n   */\n  _navigator = null;\n\n  /**\n   * The AudioContext type.\n   * @type {Function}\n   * @private\n   */\n  _contextType = null;\n\n  /**\n   * Dictionary of audio formats and their support status.\n   * @type {object}\n   * @private\n   */\n  _formats = {};\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    if (typeof navigator !== 'undefined') {\n      this._navigator = navigator;\n    }\n\n    // Set the available Web Audio Context type available in browser.\n    if (typeof AudioContext !== 'undefined') {\n      this._contextType = AudioContext;\n    } else if (typeof webkitAudioContext !== 'undefined') {\n      this._contextType = webkitAudioContext;\n    }\n\n    // Determine the supported audio formats.\n    let audio = new Audio();\n\n    this._formats = {\n      mp3: Boolean(audio.canPlayType('audio/mp3;').replace(/^no$/, '')),\n      mpeg: Boolean(audio.canPlayType('audio/mpeg;').replace(/^no$/, '')),\n      opus: Boolean(audio.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, '')),\n      ogg: Boolean(audio.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, '')),\n      oga: Boolean(audio.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, '')),\n      wav: Boolean(audio.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, '')),\n      aac: Boolean(audio.canPlayType('audio/aac;').replace(/^no$/, '')),\n      caf: Boolean(audio.canPlayType('audio/x-caf;').replace(/^no$/, '')),\n      m4a: Boolean((audio.canPlayType('audio/x-m4a;') ||\n        audio.canPlayType('audio/m4a;') ||\n        audio.canPlayType('audio/aac;')).replace(/^no$/, '')),\n      mp4: Boolean((audio.canPlayType('audio/x-mp4;') ||\n        audio.canPlayType('audio/mp4;') ||\n        audio.canPlayType('audio/aac;')).replace(/^no$/, '')),\n      weba: Boolean(audio.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n      webm: Boolean(audio.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n      dolby: Boolean(audio.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, '')),\n      flac: Boolean((audio.canPlayType('audio/x-flac;') || audio.canPlayType('audio/flac;')).replace(/^no$/, ''))\n    };\n\n    audio = null;\n  }\n\n  /**\n   * Returns an unique id (credit: https://howlerjs.com).\n   * @return {number}\n   */\n  id() {\n    return Math.round(Date.now() * Math.random());\n  }\n\n  /**\n   * Returns the available context type.\n   * @return {Function}\n   */\n  getContextType() {\n    return this._contextType;\n  }\n\n  /**\n   * Instantiates and returns the audio context.\n   * @return {AudioContext|webkitAudioContext}\n   */\n  getContext() {\n    return new this._contextType();\n  }\n\n  /**\n   * Returns the supported audio formats.\n   * @return {Object}\n   */\n  supportedFormats() {\n    return this._formats;\n  }\n\n  /**\n   * Returns true if the passed format is supported.\n   * @param {string} format The audio format ex. \"mp3\"\n   * @return {boolean}\n   */\n  isFormatSupported(format) {\n    return Boolean(this._formats[format]);\n  }\n\n  /**\n   * Returns the first supported format from the passed array.\n   * @param {string[]} formats Array of audio formats\n   * @return {string}\n   */\n  getSupportedFormat(formats) {\n    return formats.find(format => this.isFormatSupported(format));\n  }\n\n  /**\n   * Returns true if the audio source is supported.\n   * @param {string} source The audio source url or base64 string\n   * @return {boolean}\n   */\n  isSourceSupported(source) {\n    let ext = this.isBase64(source) ?\n      (/^data:audio\\/([^;,]+);/i).exec(source) :\n      (/^.+\\.([^.]+)$/).exec(source);\n\n    ext = (/^.+\\.([^.]+)$/).exec(source);\n    return ext ? this.isFormatSupported(ext[1].toLowerCase()) : false;\n  }\n\n  /**\n   * Returns the first supported audio source from the passed array.\n   * @param {string[]} sources Array of audio sources. The audio source could be either url or base64 string.\n   * @return {string}\n   */\n  getSupportedSource(sources) {\n    return sources.find(source => this.isSourceSupported(source));\n  }\n\n  /**\n   * Returns whether the passed string is a base64 string or not.\n   * @param {string} str Base64 audio string\n   * @return {boolean}\n   */\n  isBase64(str) {\n    return (/^data:[^;]+;base64,/).test(str);\n  }\n\n  /**\n   * Returns true if the platform is mobile.\n   * @return {boolean}\n   * @private\n   */\n  _isMobile() {\n    if (!this._navigator) {\n      return false;\n    }\n\n    return (/iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i).test(this._navigator.userAgent);\n  }\n\n  /**\n   * Returns true if the platform is touch supported.\n   * @return {boolean}\n   * @private\n   */\n  _isTouch() {\n    return typeof window !== 'undefined' && (Boolean(('ontouchend' in window) ||\n      (this._navigator && this._navigator.maxTouchPoints > 0) ||\n      (this._navigator && this._navigator.msMaxTouchPoints > 0)));\n  }\n}\n\nexport default new Utility();\n\n","import Loader from './Loader';\nimport emitter from './Emitter';\nimport Heap from './Heap';\nimport Queue from './Queue';\nimport utility from './Utility';\nimport Sound from './Sound';\n\n/**\n * Enum that represents the different type of errors thrown by Engine and Buzzes.\n * @enum {string}\n */\nconst ErrorType = {\n  NoAudio: 'no-audio',\n  LoadError: 'load',\n  PlayError: 'play',\n  EngineError: 'engine'\n};\n\n/**\n * Represents the different states of the audio engine.\n * @enum {string}\n */\nconst EngineState = {\n  NotReady: 'notready',\n  Ready: 'ready',\n  Suspending: 'suspending',\n  Suspended: 'suspended',\n  Resuming: 'resuming',\n  Destroying: 'destroying',\n  Done: 'done',\n  NoAudio: 'no-audio'\n};\n\n/**\n * Enum that represents the different events by engine.\n * @enum {string}\n */\nconst EngineEvents = {\n  Add: 'add',\n  Remove: 'remove',\n  Volume: 'volume',\n  Mute: 'mute',\n  Pause: 'pause',\n  Stop: 'stop',\n  Suspend: 'suspend',\n  Resume: 'resume',\n  Error: 'error',\n  Done: 'done'\n};\n\n/**\n * Array of event names.\n * @type {string[]}\n */\nconst userInputEventNames = [\n  'click',\n  'contextmenu',\n  'auxclick',\n  'dblclick',\n  'mousedown',\n  'mouseup',\n  'pointerup',\n  'touchend',\n  'keydown',\n  'keyup'\n];\n\n/**\n * The audio engine that orchestrates all the sounds.\n * @class\n */\nclass Engine {\n\n  /**\n   * Unique id of the engine.\n   * @type {number}\n   * @private\n   */\n  _id = utility.id();\n\n  /**\n   * Represents whether the audio engine is currently muted or not.\n   * @type {boolean}\n   * @private\n   */\n  _muted = false;\n\n  /**\n   * Represents the global volume.\n   * @type {number}\n   * @private\n   */\n  _volume = 1.0;\n\n  /**\n   * The heap clean-up period.\n   * @type {number}\n   * @private\n   */\n  _cleanUpInterval = 5;\n\n  /**\n   * Auto-enables audio in first user interaction.\n   * @type {boolean}\n   * @private\n   */\n  _autoEnable = true;\n\n  /**\n   * The clean-up interval id.\n   * @type {number|null}\n   * @private\n   */\n  _intervalId = null;\n\n  /**\n   * True if Web Audio API is available.\n   * @type {boolean}\n   * @private\n   */\n  _isAudioAvailable = false;\n\n  /**\n   * Represents the current state of the engine.\n   * @type {EngineState}\n   * @private\n   */\n  _state = EngineState.NotReady;\n\n  /**\n   * The Web Audio API's audio context.\n   * @type {AudioContext}\n   * @private\n   */\n  _context = null;\n\n  /**\n   * The master gain node.\n   * @type {GainNode}\n   * @private\n   */\n  _gainNode = null;\n\n  /**\n   * The action queue.\n   * @type {Queue}\n   * @private\n   */\n  _queue = null;\n\n  /**\n   * The sound heap.\n   * @type {Heap}\n   * @private\n   */\n  _heap = null;\n\n  /**\n   * Loader - the component that loads audio buffers with audio data.\n   * @type {Loader}\n   * @private\n   */\n  _loader = null;\n\n  /**\n   * Instantiates the heap and action queue.\n   * @constructor\n   */\n  constructor() {\n    this._heap = new Heap();\n    this._queue = new Queue();\n    this._resumeAndRemoveListeners = this._resumeAndRemoveListeners.bind(this);\n  }\n\n  /**\n   * Instantiate the audio context and other dependencies.\n   * @param {object} [args] Input parameters object.\n   * @param {number} [args.volume = 1.0] The global volume of the sound engine.\n   * @param {boolean} [args.muted = false] Stay muted initially or not.\n   * @param {number} [args.cleanUpInterval = 5] The heap clean-up interval period in minutes.\n   * @param {boolean} [args.autoEnable = true] Auto-enables audio in first user interaction.\n   * @param {function} [args.onadd] Event-handler for the \"add\" event.\n   * @param {function} [args.onremove] Event-handler for the \"remove\" event.\n   * @param {function} [args.onstop] Event-handler for the \"stop\" event.\n   * @param {function} [args.onpause] Event-handler for the \"pause\" event.\n   * @param {function} [args.onmute] Event-handler for the \"mute\" event.\n   * @param {function} [args.onvolume] Event-handler for the \"volume\" event.\n   * @param {function} [args.onsuspend] Event-handler for the \"suspend\" event.\n   * @param {function} [args.onresume] Event-handler for the \"resume\" event.\n   * @param {function} [args.onerror] Event-handler for the \"error\" event.\n   * @param {function} [args.ondone] Event-handler for the \"done\" event.\n   * @return {Engine}\n   */\n  setup(args) {\n    // If the setup is already done return.\n    if (this._state !== EngineState.NotReady) {\n      return this;\n    }\n\n    this._context = utility.getContext();\n\n    // Determine the audio stuff available in the current platform and set the flags accordingly.\n    this._isAudioAvailable = Boolean(this._context);\n\n    // If no Web Audio and HTML5 audio is available fire an error event.\n    if (!this._isAudioAvailable) {\n      this._state = EngineState.NoAudio;\n      this._fire(EngineEvents.Error, { type: ErrorType.NoAudio, error: 'Web Audio API is not available' });\n      return this;\n    }\n\n    // Read the input parameters from the options.\n    const {\n      volume,\n      muted,\n      cleanUpInterval,\n      autoEnable,\n      onadd,\n      onremove,\n      onstop,\n      onpause,\n      onmute,\n      onvolume,\n      onsuspend,\n      onresume,\n      onerror,\n      ondone\n    } = args || {};\n\n    // Set the properties from the read parameters.\n    typeof volume === 'number' && volume >= 0 && volume <= 1.0 && (this._volume = volume);\n    typeof muted === 'boolean' && (this._muted = muted);\n    typeof cleanUpInterval === 'number' && (this._cleanUpInterval = cleanUpInterval);\n    typeof autoEnable === 'boolean' && (this._autoEnable = autoEnable);\n    typeof onadd === 'function' && this.on(EngineEvents.Add, onadd);\n    typeof onremove === 'function' && this.on(EngineEvents.Remove, onremove);\n    typeof onstop === 'function' && this.on(EngineEvents.Stop, onstop);\n    typeof onpause === 'function' && this.on(EngineEvents.Pause, onpause);\n    typeof onmute === 'function' && this.on(EngineEvents.Mute, onmute);\n    typeof onvolume === 'function' && this.on(EngineEvents.Volume, onvolume);\n    typeof onsuspend === 'function' && this.on(EngineEvents.Suspend, onsuspend);\n    typeof onresume === 'function' && this.on(EngineEvents.Resume, onresume);\n    typeof onerror === 'function' && this.on(EngineEvents.Error, onerror);\n    typeof ondone === 'function' && this.on(EngineEvents.Done, ondone);\n\n    // Create the buffer loader.\n    this._loader = new Loader(this._context);\n\n    // Auto-enable audio in first user interaction.\n    // https://developers.google.com/web/updates/2018/11/web-audio-autoplay#moving-forward\n    if (this._autoEnable && this._context.state === 'suspended') {\n      userInputEventNames.forEach(eventName => document.addEventListener(eventName, this._resumeAndRemoveListeners));\n    }\n\n    // Create the audio graph.\n    this._gainNode = this._context.createGain();\n    this._gainNode.gain.setValueAtTime(this._muted ? 0 : this._volume, this._context.currentTime);\n    this._gainNode.connect(this._context.destination);\n\n    this._intervalId = window.setInterval(this._heap.free, this._cleanUpInterval * 60 * 1000);\n\n    this._state = this._context.state !== 'suspended' ? EngineState.Ready : EngineState.Suspended;\n\n    return this;\n  }\n\n  /**\n   * Loads single or multiple audio resources into audio buffers and returns them.\n   * @param {string|string[]} urls Single or array of audio urls.\n   * @return {Promise}\n   */\n  load(urls) {\n    return this._loader.load(urls);\n  }\n\n  /**\n   * Unloads single or multiple loaded audio buffers from cache.\n   * @param {string|string[]} [urls] Single or array of audio urls.\n   * @return {Engine}\n   */\n  unload(urls) {\n    this._loader.unload(urls);\n    return this;\n  }\n\n  /**\n   * Mutes the engine.\n   * @return {Engine}\n   */\n  mute() {\n    // If the engine is already muted return.\n    if (this._muted) {\n      return this;\n    }\n\n    // Set the value of gain node to 0.\n    this._gainNode.gain.setValueAtTime(0, this._context.currentTime);\n\n    // Set the muted property true.\n    this._muted = true;\n\n    // Fire the \"mute\" event.\n    this._fire(EngineEvents.Mute, this._muted);\n\n    return this;\n  }\n\n  /**\n   * Un-mutes the engine.\n   * @return {Engine}\n   */\n  unmute() {\n    // If the engine is not muted return.\n    if (!this._muted) {\n      return this;\n    }\n\n    // Reset the gain node's value back to volume.\n    this._gainNode.gain.setValueAtTime(this._volume, this._context.currentTime);\n\n    // Set the muted property to false.\n    this._muted = false;\n\n    // Fire the \"mute\" event.\n    this._fire(EngineEvents.Mute, this._muted);\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the volume for the audio engine that controls global volume for all sounds.\n   * @param {number} [vol] Should be within 0.0 to 1.0.\n   * @return {Engine|number}\n   */\n  volume(vol) {\n    // If no parameter is passed then return the current volume.\n    if (vol === undefined) {\n      return this._volume;\n    }\n\n    // If passed volume is not an acceptable value return.\n    if (typeof vol !== 'number' || vol < 0 || vol > 1.0) {\n      return this;\n    }\n\n    // Set the gain's value to the passed volume.\n    this._gainNode.gain.setValueAtTime(this._muted ? 0 : vol, this._context.currentTime);\n\n    // Set the volume to the property.\n    this._volume = vol;\n\n    // Fire the \"volume\" event.\n    this._fire(EngineEvents.Volume, this._volume);\n\n    return this;\n  }\n\n  /**\n   * Stops all the currently playing sounds.\n   * @return {Engine}\n   */\n  stop() {\n    // Stop all the sounds.\n    this._heap.sounds().forEach(sound => sound.stop());\n\n    // Fire the \"stop\" event.\n    this._fire(EngineEvents.Stop);\n\n    return this;\n  }\n\n  /**\n   * Stops all the playing sounds and suspends the audio context immediately.\n   * @return {Engine}\n   */\n  suspend() {\n    // If the context is resuming then suspend after resumed.\n    if (this._state === EngineState.Resuming) {\n      this._queue.add('after-resume', 'suspend', () => this.suspend());\n      return this;\n    }\n\n    // If the state is not ready return.\n    if (this._state !== EngineState.Ready) {\n      return this;\n    }\n\n    // Stop all the playing sounds.\n    this.stop();\n\n    // Set the state to suspending.\n    this._state = EngineState.Suspending;\n\n    // Suspend the Audio Context.\n    this._context.suspend().then(() => {\n      this._state = EngineState.Suspended;\n      this._queue.run('after-suspend');\n      this._fire(EngineEvents.Suspend);\n    });\n\n    return this;\n  }\n\n  /**\n   * Resumes the audio context from the suspended mode.\n   * @return {Engine}\n   */\n  resume() {\n    // If the context is suspending then resume after suspended.\n    if (this._state === EngineState.Suspending) {\n      this._queue.add('after-suspend', 'resume', () => this.resume());\n      return this;\n    }\n\n    if (this._state !== EngineState.Suspended) {\n      return this;\n    }\n\n    this._state = EngineState.Resuming;\n\n    this._context.resume().then(() => {\n      this._state = EngineState.Ready;\n      this._queue.run('after-resume');\n      this._fire(EngineEvents.Resume);\n    });\n\n    return this;\n  }\n\n  /**\n   * Shuts down the engine.\n   * @return {Engine}\n   */\n  terminate() {\n    if (this._state === EngineState.Done || this._state === EngineState.Destroying) {\n      return this;\n    }\n\n    const cleanUp = () => {\n      // Un-listen from user input events.\n      userInputEventNames.forEach(eventName => document.addEventListener(eventName, this._resumeAndRemoveListeners));\n\n      // Stop the timer.\n      this._intervalId && window.clearInterval(this._intervalId);\n      this._intervalId = null;\n\n      // Destroy the heap.\n      this._heap.destroy();\n      this._heap = null;\n\n      // Clear the cache and remove the loader.\n      if (this._loader) {\n        this._loader.dispose();\n        this._loader = null;\n      }\n\n      this._context = null;\n      this._queue.clear();\n      this._queue = null;\n      this._state = EngineState.Done;\n\n      // Fire the \"done\" event.\n      this._fire(EngineEvents.Done);\n\n      emitter.clear(this._id);\n    };\n\n    // Close the context.\n    if (this._context) {\n      if (this._state === EngineState.Suspending) {\n        this._queue.remove('after-suspend');\n        this._queue.add('after-suspend', 'destroy', () => this.terminate());\n        return this;\n      } else if (this._state === EngineState.Resuming) {\n        this._queue.remove('after-resume');\n        this._queue.add('after-resume', 'destroy', () => this.terminate());\n        return this;\n      }\n\n      this._state = EngineState.Destroying;\n      this._context && this._context.close().then(() => cleanUp());\n    } else {\n      this._state = EngineState.Destroying;\n      cleanUp();\n    }\n\n    return this;\n  }\n\n  /**\n   * Subscribes to an event.\n   * @param {string} eventName Name of the event.\n   * @param {function} handler The event-handler function.\n   * @param {boolean} [once = false] Is it one-time subscription or not.\n   * @return {Engine}\n   */\n  on(eventName, handler, once = false) {\n    emitter.on(this._id, eventName, handler, once);\n    return this;\n  }\n\n  /**\n   * Un-subscribes from an event.\n   * @param {string} eventName The event name.\n   * @param {function} [handler] The handler function.\n   * @return {Engine}\n   */\n  off(eventName, handler) {\n    emitter.off(this._id, eventName, handler);\n    return this;\n  }\n\n  /**\n   * Returns the existing sound in heap or create a new one and return.\n   * @param {number|string} idOrUrl The sound id or audio url/base64 string.\n   * @param {number} [groupId] The group id.\n   * @param {object} [args] The sound creation arguments.\n   * @return {Sound}\n   */\n  sound(idOrUrl, groupId, args) {\n    if (typeof idOrUrl === 'number') {\n      return this._heap.sound(idOrUrl);\n    }\n\n    const sound = new Sound(args);\n    this._heap.add(idOrUrl, groupId, sound);\n    sound._gain().connect(this._gainNode);\n\n    return sound;\n  }\n\n  /**\n   * Returns the sounds belongs to a group or all the sounds from the heap.\n   * @param {number} [groupId] The group id.\n   * @return {Array<Sound>}\n   */\n  sounds(groupId) {\n    return this._heap.sounds(groupId);\n  }\n\n  /**\n   * Destroys the sounds belong to the passed group.\n   * @param {boolean} idle True to destroy only the idle sounds.\n   * @param {number} groupId The group id.\n   * @return {Engine}\n   */\n  free(idle, groupId) {\n    this._heap.free(idle, groupId);\n    return this;\n  }\n\n  /**\n   * Returns whether the engine is currently muted or not.\n   * @return {boolean}\n   */\n  muted() {\n    return this._muted;\n  }\n\n  /**\n   * Returns the state of the engine.\n   * @return {EngineState}\n   */\n  state() {\n    return this._state;\n  }\n\n  /**\n   * Returns the created audio context.\n   * @return {AudioContext}\n   */\n  context() {\n    return this._context;\n  }\n\n  /**\n   * Returns the master gain node.\n   * @return {GainNode}\n   */\n  masterGain() {\n    return this._gainNode;\n  }\n\n  /**\n   * Returns true if Web Audio API is available.\n   * @return {boolean}\n   */\n  isAudioAvailable() {\n    return this._isAudioAvailable;\n  }\n\n  /**\n   * Fires an event of engine.\n   * @param {string} eventName The event name.\n   * @param {...*} args The arguments that to be passed to handler.\n   * @return {Engine}\n   * @private\n   */\n  _fire(eventName, ...args) {\n    emitter.fire(this._id, eventName, ...args, this);\n    return this;\n  }\n\n  /**\n   * Resume the context and un-listen from user input events.\n   * @private\n   */\n  _resumeAndRemoveListeners() {\n    this.resume();\n    userInputEventNames.forEach(eventName => document.addEventListener(eventName, this._resumeAndRemoveListeners));\n  }\n}\n\nconst engine = new Engine();\nexport { engine as default, EngineState, EngineEvents, ErrorType };\n","import utility from './Utility';\n\n/**\n * Enum to represent the download status of audio resource.\n * @enum {string}\n */\nconst DownloadStatus = {\n  Success: 'success',\n  Failure: 'error'\n};\n\n/**\n * Represents the download result of an audio.\n * @class\n */\nclass DownloadResult {\n\n  /**\n   * The url of the audio resource\n   * @type {string|null}\n   */\n  url = null;\n\n  /**\n   * AudioBuffer or Html5Audio element\n   * @type {AudioBuffer|Audio}\n   */\n  value = null;\n\n  /**\n   * Download error\n   * @type {any}\n   */\n  error = null;\n\n  /**\n   * Success or failure status of download.\n   * @type {DownloadStatus}\n   */\n  status = null;\n\n  /**\n   * @param {string|null} url The url of the audio resource\n   * @param {AudioBuffer|Audio} [value] AudioBuffer or Html5Audio element\n   * @param {*} [error] Download error\n   */\n  constructor(url, value, error) {\n    this.url = url;\n    this.value = value;\n    this.error = error || null;\n    this.status = error ? DownloadStatus.Failure : DownloadStatus.Success;\n  }\n}\n\n/**\n * Loads the audio sources into audio buffers and returns them.\n * The loaded buffers are cached.\n * @class\n */\nclass Loader {\n\n  /**\n   * AudioContext.\n   * @type {AudioContext}\n   * @private\n   */\n  _context = null;\n\n  /**\n   * In-memory audio buffer cache store.\n   * @type {object}\n   * @private\n   */\n  _bufferCache = {};\n\n  /**\n   * Dictionary to store the current progress calls and their callbacks.\n   * @type {object}\n   * @private\n   */\n  _progressCallsAndCallbacks = {};\n\n  /**\n   * True if the loader is disposed.\n   * @type {boolean}\n   * @private\n   */\n  _disposed = false;\n\n  /**\n   * Create the cache.\n   * @param {AudioContext} context The Audio Context\n   */\n  constructor(context) {\n    this._context = context;\n  }\n\n  /**\n   * Loads single or multiple audio resources into audio buffers.\n   * @param {string|string[]} urls Single or array of audio urls\n   * @return {Promise<DownloadResult|Array<DownloadResult>>}\n   */\n  load(urls) {\n    if (typeof urls === 'string') {\n      return this._load(urls);\n    }\n\n    return Promise.all(urls.map(url => this._load(url)));\n  }\n\n  /**\n   * Removes the cached audio buffers.\n   * @param {string|string[]} [urls] Single or array of audio urls\n   */\n  unload(urls) {\n    if (typeof urls === 'string') {\n      this._unload(urls);\n      return;\n    }\n\n    if (Array.isArray(urls)) {\n      urls.forEach(url => this._unload(url), this);\n      return;\n    }\n\n    this._bufferCache = {};\n  }\n\n  /**\n   * Dispose the loader.\n   */\n  dispose() {\n    if (this._disposed) {\n      return;\n    }\n\n    this.unload();\n    this._bufferCache = {};\n    this._progressCallsAndCallbacks = null;\n    this._context = null;\n    this._disposed = true;\n  }\n\n  /**\n   * Loads a single audio resource into audio buffer and cache result if the download is succeeded.\n   * @param {string} url The Audio url\n   * @return {Promise<DownloadResult>}\n   * @private\n   */\n  _load(url) {\n    return new Promise(resolve => {\n      if (this._bufferCache.hasOwnProperty(url)) {\n        resolve(new DownloadResult(url, this._bufferCache[url]));\n        return;\n      }\n\n      if (this._progressCallsAndCallbacks.hasOwnProperty(url)) {\n        this._progressCallsAndCallbacks[url].push(resolve);\n        return;\n      }\n\n      this._progressCallsAndCallbacks[url] = [];\n      this._progressCallsAndCallbacks[url].push(resolve);\n\n      const reject = err => {\n        if (this._disposed) {\n          return;\n        }\n\n        this._progressCallsAndCallbacks[url].forEach(r => r(new DownloadResult(url, null, err)));\n        delete this._progressCallsAndCallbacks[url];\n      };\n\n      const decodeAudioData = arrayBuffer => {\n        if (this._disposed) {\n          return;\n        }\n\n        this._context.decodeAudioData(arrayBuffer, buffer => {\n          this._bufferCache[url] = buffer;\n          this._progressCallsAndCallbacks[url].forEach(r => r(new DownloadResult(url, buffer)));\n          delete this._progressCallsAndCallbacks[url];\n        }, reject);\n      };\n\n      if (utility.isBase64(url)) {\n        const data = atob(url.split(',')[1]);\n        const dataView = new Uint8Array(data.length); // eslint-disable-line no-undef\n\n        for (let i = 0; i < data.length; i++) {\n          dataView[i] = data.charCodeAt(i);\n        }\n\n        decodeAudioData(dataView.buffer);\n        return;\n      }\n\n      const req = new XMLHttpRequest();\n      req.open('GET', url, true);\n      req.responseType = 'arraybuffer';\n\n      req.addEventListener('load', () => decodeAudioData(req.response), false);\n      req.addEventListener('error', reject, false);\n      req.send();\n    });\n  }\n\n  /**\n   * Removes the single cached audio buffer.\n   * @param {string} url Audio url\n   * @private\n   */\n  _unload(url) {\n    delete this._bufferCache[url];\n  }\n}\n\nexport { Loader as default, DownloadResult, DownloadStatus };\n","/**\n * Singleton global event emitter.\n * @class\n */\nclass Emitter {\n\n  /**\n   * Dictionary that maps the objects with their events and handlers.\n   * @type {object}\n   * @private\n   */\n  _objectsEventsHandlersMap = {};\n\n  /**\n   * Subscribes to an event of the passed object.\n   * @param {number} id The unique id of the object.\n   * @param {string} eventName Name of the event\n   * @param {function} handler The event-handler function\n   * @param {boolean} [once = false] Is it one-time subscription or not?\n   * @return {Emitter}\n   */\n  on(id, eventName, handler, once = false) {\n    if (!this._hasObject(id)) {\n      this._objectsEventsHandlersMap[id] = {};\n    }\n\n    const objEvents = this._objectsEventsHandlersMap[id];\n\n    if (!objEvents.hasOwnProperty(eventName)) {\n      objEvents[eventName] = [];\n    }\n\n    objEvents[eventName].push({\n      handler: handler,\n      once: once\n    });\n\n    return this;\n  }\n\n  /**\n   * Un-subscribes from an event of the passed object.\n   * @param {number} id The unique id of the object.\n   * @param {string} eventName The event name.\n   * @param {function} [handler] The handler function.\n   * @return {Emitter}\n   */\n  off(id, eventName, handler) {\n    if (!this._hasEvent(id, eventName)) {\n      return this;\n    }\n\n    const objEvents = this._objectsEventsHandlersMap[id];\n\n    if (!handler) {\n      objEvents[eventName] = [];\n    } else {\n      objEvents[eventName] = objEvents[eventName].filter(eventSubscriber => {\n        return eventSubscriber.handler !== handler;\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Fires an event of the object passing the source and other optional arguments.\n   * @param {number} id The unique id of the object.\n   * @param {string} eventName The event name\n   * @param {...*} args The arguments that to be passed to handler\n   * @return {Emitter}\n   */\n  fire(id, eventName, ...args) {\n    if (!this._hasEvent(id, eventName)) {\n      return this;\n    }\n\n    let eventSubscribers = this._objectsEventsHandlersMap[id][eventName];\n\n    for (let i = 0; i < eventSubscribers.length; i++) {\n      let eventSubscriber = eventSubscribers[i];\n\n      setTimeout(function (subscriber) {\n        const { handler, once } = subscriber;\n\n        handler(...args);\n\n        if (once) {\n          this.off(id, eventName, handler);\n        }\n      }.bind(this, eventSubscriber), 0);\n    }\n\n    return this;\n  }\n\n  /**\n   * Clears the event handlers of the passed object.\n   * @param {number} [id] The unique id of the object.\n   * @return {Emitter}\n   */\n  clear(id) {\n    if (!id) {\n      this._objectsEventsHandlersMap = {};\n      return this;\n    }\n\n    if (this._hasObject(id)) {\n      delete this._objectsEventsHandlersMap[id];\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns true if the object is already registered.\n   * @param {number} id The object id.\n   * @return {boolean}\n   * @private\n   */\n  _hasObject(id) {\n    return this._objectsEventsHandlersMap.hasOwnProperty(id);\n  }\n\n  /**\n   * Returns true if the passed object has an entry of the passed event.\n   * @param {number} id The object id.\n   * @param {string} eventName The event name.\n   * @return {boolean}\n   * @private\n   */\n  _hasEvent(id, eventName) {\n    return this._hasObject(id) && this._objectsEventsHandlersMap[id].hasOwnProperty(eventName);\n  }\n}\n\nexport default new Emitter();\n","/**\n * Stores queue of actions that has to be run before or after specific events.\n */\nclass Queue {\n\n  _eventActions = {};\n\n  /**\n   * Queues the passed action to the event.\n   * @param {string} eventName The event name.\n   * @param {string} actionIdentifier The action identifier.\n   * @param {function} action The action function.\n   * @param {boolean} [removeAfterRun = true] Remove the action once it's run.\n   */\n  add(eventName, actionIdentifier, action, removeAfterRun = true) {\n    if (!this.hasEvent(eventName)) {\n      this._eventActions[eventName] = {};\n    }\n\n    this._eventActions[eventName][actionIdentifier] = { fn: action, removeAfterRun: removeAfterRun };\n  }\n\n  /**\n   * Returns true if there is a event exists for the passed name.\n   * @param {string} eventName The event name.\n   * @return {boolean}\n   */\n  hasEvent(eventName) {\n    return this._eventActions.hasOwnProperty(eventName);\n  }\n\n  /**\n   * Returns true if the passed action is already queued-up.\n   * @param {string} eventName The event name.\n   * @param {string} actionIdentifier The action identifier.\n   * @return {boolean}\n   */\n  hasAction(eventName, actionIdentifier) {\n    if (!this.hasEvent(eventName)) {\n      return false;\n    }\n\n    return this._eventActions[eventName].hasOwnProperty(actionIdentifier);\n  }\n\n  /**\n   * Runs all the actions queued up for the passed event.\n   * @param {string} eventName The event name.\n   * @param {string} [actionIdentifier] The action identifier.\n   */\n  run(eventName, actionIdentifier) {\n    if (!this.hasEvent(eventName)) {\n      return;\n    }\n\n    if (typeof actionIdentifier !== 'undefined') {\n      if (!this.hasAction(eventName, actionIdentifier)) {\n        return;\n      }\n\n      this._run(eventName, actionIdentifier);\n\n      return;\n    }\n\n    Object.keys(this._eventActions[eventName]).forEach(action => this._run(eventName, action));\n  }\n\n  /**\n   * Removes the event or a queued action for the event.\n   * @param {string} eventName The event name.\n   * @param {string} [actionIdentifier] The action identifier.\n   */\n  remove(eventName, actionIdentifier) {\n    if (!this._eventActions.hasOwnProperty(eventName)) {\n      return;\n    }\n\n    if (!actionIdentifier) {\n      delete this._eventActions[eventName];\n      return;\n    }\n\n    delete this._eventActions[eventName][actionIdentifier];\n  }\n\n  /**\n   * Clears all the stored events and the queued-up actions.\n   */\n  clear() {\n    this._eventActions = {};\n  }\n\n  /**\n   * Runs a single action.\n   * @param {string} eventName The event name.\n   * @param {string} actionIdentifier The action identifier.\n   * @private\n   */\n  _run(eventName, actionIdentifier) {\n    const queued = this._eventActions[eventName][actionIdentifier];\n    queued.fn();\n    queued.removeAfterRun && this.remove(eventName, actionIdentifier);\n  }\n}\n\nexport default Queue;\n","import engine, { EngineEvents, EngineState, ErrorType } from './Engine';\nimport Queue                                            from './Queue';\nimport utility                                          from './Utility';\nimport emitter                                          from './Emitter';\nimport { DownloadStatus }                               from './Loader';\n\n/**\n * Enum that represents the different states of a sound group (buzz).\n * @enum {string}\n */\nconst BuzzState = {\n  Ready: 'ready',\n  Destroyed: 'destroyed'\n};\n\n/**\n * Enum that represents the different events fired by a buzz.\n * @enum {string}\n */\nconst BuzzEvents = {\n  Load: 'load',\n  UnLoad: 'unload',\n  PlayStart: 'playstart',\n  PlayEnd: 'playend',\n  Pause: 'pause',\n  Stop: 'stop',\n  Volume: 'volume',\n  Mute: 'mute',\n  Seek: 'seek',\n  Rate: 'rate',\n  FadeStart: 'fadestart',\n  FadeEnd: 'fadeend',\n  FadeStop: 'fadestop',\n  Error: 'error',\n  Destroy: 'destroy'\n};\n\n/**\n * Enum that represents the different states occurs while loading a sound.\n * @enum {string}\n */\nconst LoadState = {\n  NotLoaded: 'notloaded',\n  Loading: 'loading',\n  Loaded: 'loaded'\n};\n\n/**\n * A wrapper class that simplifies dealing with group of sounds.\n */\nclass Buzz {\n\n  /**\n   * Unique id.\n   * @type {number}\n   * @private\n   */\n  _id = -1;\n\n  /**\n   * Represents the source of the sound. The source can be an url or base64 string.\n   * @type {*}\n   * @private\n   */\n  _src = null;\n\n  /**\n   * The formats of the passed audio sources.\n   * @type {Array<string>}\n   * @private\n   */\n  _format = [];\n\n  /**\n   * The sprite definition.\n   * @type {object}\n   * @private\n   */\n  _sprite = null;\n\n  /**\n   * The current volume of the sound. Should be from 0.0 to 1.0.\n   * @type {number}\n   * @private\n   */\n  _volume = 1.0;\n\n  /**\n   * The current rate of the playback. Should be from 0.5 to 5.\n   * @type {number}\n   * @private\n   */\n  _rate = 1;\n\n  /**\n   * True if the sound is currently muted.\n   * @type {boolean}\n   * @private\n   */\n  _muted = false;\n\n  /**\n   * True if the sound should play repeatedly.\n   * @type {boolean}\n   * @private\n   */\n  _loop = false;\n\n  /**\n   * True to pre-loaded the sound on construction.\n   * @type {boolean}\n   * @private\n   */\n  _preload = false;\n\n  /**\n   * True to auto-play the sound on construction.\n   * @type {boolean}\n   * @private\n   */\n  _autoplay = false;\n\n  /**\n   * The audio buffer.\n   * @type {AudioBuffer}\n   * @private\n   */\n  _buffer = null;\n\n  /**\n   * Duration of the playback in seconds.\n   * @type {number}\n   * @private\n   */\n  _duration = 0;\n\n  /**\n   * The best compatible source in the audio sources passed.\n   * @type {string|null}\n   * @private\n   */\n  _compatibleSrc = null;\n\n  /**\n   * Represents the different states that occurs while loading the sound.\n   * @type {LoadState}\n   * @private\n   */\n  _loadState = LoadState.NotLoaded;\n\n  /**\n   * Represents the state of this group.\n   * @type {BuzzState}\n   * @private\n   */\n  _state = BuzzState.Ready;\n\n  /**\n   * The action queue.\n   * @type {Queue}\n   * @private\n   */\n  _queue = null;\n\n  /**\n   * The audio engine.\n   * @type {Engine}\n   * @private\n   */\n  _engine = null;\n\n  /**\n   * True if the group is currently fading.\n   * @type {boolean}\n   * @private\n   */\n  _fading = false;\n\n  /**\n   * The timer that runs function after the fading is complete.\n   * @type {number|null}\n   * @private\n   */\n  _fadeTimer = null;\n\n  /**\n   * Initializes the internal properties.\n   * @param {string|Array<string>|object} args The input parameters of this sound group.\n   * @param {string} [args.id] The unique id of the sound.\n   * @param {string|string[]} args.src Single or array of audio urls/base64 strings.\n   * @param {number} [args.volume = 1.0] The initial volume of the sound. Should be from 0.0 to 1.0.\n   * @param {number} [args.rate = 1] The initial playback rate of the sound. Should be from 0.5 to 5.0.\n   * @param {boolean} [args.loop = false] True to play the sound repeatedly.\n   * @param {boolean} [args.muted = false] True to be muted initially.\n   * @param {boolean} [args.preload = false] True to pre-load the sound after construction.\n   * @param {boolean} [args.autoplay = false] True to play automatically after construction.\n   * @param {string|string[]} [args.format] The file format(s) of the passed audio source(s).\n   * @param {object} [args.sprite] The sprite definition.\n   * @param {function} [args.onload] Event-handler for the \"load\" event.\n   * @param {function} [args.onunload] Event-handler for the \"unload\" event.\n   * @param {function} [args.onplaystart] Event-handler for the \"playstart\" event.\n   * @param {function} [args.onplayend] Event-handler for the \"playend\" event.\n   * @param {function} [args.onstop] Event-handler for the \"stop\" event.\n   * @param {function} [args.onpause] Event-handler for the \"pause\" event.\n   * @param {function} [args.onmute] Event-handler for the \"mute\" event.\n   * @param {function} [args.onvolume] Event-handler for the \"volume\" event.\n   * @param {function} [args.onrate] Event-handler for the \"rate\" event.\n   * @param {function} [args.onseek] Event-handler for the \"seek\" event.\n   * @param {function} [args.onerror] Event-handler for the \"error\" event.\n   * @param {function} [args.ondestroy] Event-handler for the \"destroy\" event.\n   * @constructor\n   */\n  constructor(args) {\n    // Setup the audio engine.\n    this._engine = engine;\n    this._engine.setup();\n    this._engine.on(EngineEvents.Resume, this._onEngineResume = this._onEngineResume.bind(this));\n\n    // If no audio is available throw error.\n    if (!this._engine.isAudioAvailable()) {\n      this._fire(BuzzEvents.Error, null, { type: ErrorType.NoAudio, error: 'Web Audio is un-available' });\n      return this;\n    }\n\n    if (typeof args === 'string') {\n      this._src = [args];\n    } else if (Array.isArray(args) && args.length) {\n      this._src = args;\n    } else if (typeof args === 'object') {\n      const {\n        id,\n        src,\n        format,\n        sprite,\n        volume,\n        rate,\n        muted,\n        loop,\n        autoplay,\n        preload,\n        onload,\n        onunload,\n        onplaystart,\n        onplayend,\n        onstop,\n        onpause,\n        onmute,\n        onvolume,\n        onrate,\n        onseek,\n        onerror,\n        ondestroy\n      } = args;\n\n      // Set the passed id or the random one.\n      this._id = typeof id === 'number' ? id : utility.id();\n\n      // Set the source.\n      if (typeof src === 'string') {\n        this._src = [src];\n      } else if (Array.isArray(src) && src.length) {\n        this._src = src;\n      }\n\n      // Set the format.\n      if (Array.isArray(format)) {\n        this._format = format;\n      } else if (typeof format === 'string' && format) {\n        this._format = [format];\n      }\n\n      // Set other properties.\n      typeof sprite === 'object' && (this._sprite = sprite);\n      typeof volume === 'number' && volume >= 0 && volume <= 1.0 && (this._volume = volume);\n      typeof rate === 'number' && rate >= 0.5 && rate <= 5 && (this._rate = rate);\n      typeof muted === 'boolean' && (this._muted = muted);\n      typeof loop === 'boolean' && (this._loop = loop);\n      typeof autoplay === 'boolean' && (this._autoplay = autoplay);\n      typeof preload === 'boolean' && (this._preload = preload);\n      typeof onload === 'function' && this.on(BuzzEvents.Load, onload);\n      typeof onunload === 'function' && this.on(BuzzEvents.UnLoad, onunload);\n\n      // Bind the passed event handlers to events.\n      typeof onplaystart === 'function' && this.on(BuzzEvents.PlayStart, onplaystart);\n      typeof onplayend === 'function' && this.on(BuzzEvents.PlayEnd, onplayend);\n      typeof onstop === 'function' && this.on(BuzzEvents.Stop, onstop);\n      typeof onpause === 'function' && this.on(BuzzEvents.Pause, onpause);\n      typeof onmute === 'function' && this.on(BuzzEvents.Mute, onmute);\n      typeof onvolume === 'function' && this.on(BuzzEvents.Volume, onvolume);\n      typeof onrate === 'function' && this.on(BuzzEvents.Rate, onrate);\n      typeof onseek === 'function' && this.on(BuzzEvents.Seek, onseek);\n      typeof onerror === 'function' && this.on(BuzzEvents.Error, onerror);\n      typeof ondestroy === 'function' && this.on(BuzzEvents.Destroy, ondestroy);\n    }\n\n    // Throw error if source is not passed.\n    if (!this._src) {\n      throw new Error('You should pass the source for the audio.');\n    }\n\n    // Instantiate the dependencies.\n    this._queue = new Queue();\n\n    if (this._autoplay) {\n      this.play();\n    } else if (this._preload) {\n      this.load();\n    }\n  }\n\n  /**\n   * Loads the sound to the underlying audio object.\n   * @return {Buzz}\n   */\n  load() {\n    // If the sound is already loaded return without reloading again.\n    if (this.isLoaded() || this._loadState === LoadState.Loading) {\n      return this;\n    }\n\n    // Set the state to \"Loading\" to avoid loading multiple times.\n    this._loadState = LoadState.Loading;\n\n    // Get the compatible source.\n    const src = this._compatibleSrc || (this._compatibleSrc = this.getCompatibleSource());\n\n    // If no compatible source found call failure method and return.\n    if (!src) {\n      this._onLoadFailure('The audio formats you passed are not supported');\n      return this;\n    }\n\n    // Load the audio source.\n    this._engine.load(src).then(downloadResult => {\n      // During the time of loading... if the buzz is unloaded or destroyed then return.\n      if (this._loadState === LoadState.NotLoaded || this._state === BuzzState.Destroyed) {\n        return;\n      }\n\n      // If loading succeeded,\n      // i. Save the result.\n      // ii. Set the load state as loaded.\n      // iii. Fire the load event.\n      // iv. Run the methods that are queued to run after successful load.\n      if (downloadResult.status === DownloadStatus.Success) {\n        this._buffer = downloadResult.value;\n        this._duration = this._buffer.duration;\n        this._loadState = LoadState.Loaded;\n        this._fire(BuzzEvents.Load, null, downloadResult);\n        this._queue.run('after-load');\n        return;\n      }\n\n      this._onLoadFailure(downloadResult.error);\n    });\n\n    return this;\n  }\n\n  /**\n   * Called on failure of loading audio source.\n   * @param {*} error The audio source load error.\n   * @private\n   */\n  _onLoadFailure(error) {\n    // Remove the queued actions from this class that are supposed to run after load.\n    this._queue.remove('after-load');\n\n    // Set the load state back to not loaded.\n    this._loadState = LoadState.NotLoaded;\n\n    // Fire the error event.\n    this._fire(BuzzEvents.Error, null, { type: ErrorType.LoadError, error: error });\n  }\n\n  /**\n   * Returns the first compatible source based on the passed sources and the format.\n   * @return {string}\n   */\n  getCompatibleSource() {\n    // If the user has passed \"format\", check if it is supported or else retrieve the first supported source from the array.\n    return this._format.length ?\n      this._src[this._format.indexOf(utility.getSupportedFormat(this._format))] :\n      utility.getSupportedSource(this._src);\n  }\n\n  /**\n   * Plays the passed sound defined in the sprite or the sound that belongs to the passed id.\n   * @param {string|number} [soundOrId] The sound name defined in sprite or the sound id.\n   * @return {Buzz|number}\n   */\n  play(soundOrId) {\n    const isIdPassed = typeof soundOrId === 'number';\n\n    // If id is passed then get the sound from the engine and play it.\n    if (isIdPassed) {\n      const sound = this._engine.sound(soundOrId);\n      sound && this._play(sound);\n      return this;\n    }\n\n    const newSoundId = utility.id(),\n      playSound = () => {\n        const soundArgs = {\n          id: newSoundId,\n          buffer: this._buffer,\n          volume: this._volume,\n          rate: this._rate,\n          muted: this._muted,\n          loop: this._loop,\n          playEndCallback: sound => this._fire(BuzzEvents.PlayEnd, sound.id()),\n          destroyCallback: sound => {\n            this._fire(BuzzEvents.Destroy, sound.id());\n            emitter.clear(sound.id());\n          },\n          fadeEndCallback: sound => this._fire(BuzzEvents.FadeEnd, sound.id())\n        };\n\n        if (typeof soundOrId === 'string' && this._sprite && this._sprite.hasOwnProperty(soundOrId)) {\n          const positions = this._sprite[soundOrId];\n          soundArgs.startPos = positions[0];\n          soundArgs.endPos = positions[1];\n        }\n\n        const newSound = this._engine.sound(this._compatibleSrc, this._id, soundArgs);\n        this._play(newSound);\n      };\n\n    // If the sound is not yet loaded push an action to the queue to play the sound once it's loaded.\n    if (!this.isLoaded()) {\n      this._queue.add('after-load', `play-${newSoundId}`, () => playSound());\n      this.load();\n    } else {\n      playSound();\n    }\n\n    return newSoundId;\n  }\n\n  /**\n   * Pauses the sound belongs to the passed id or all the sounds belongs to this group.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  pause(id) {\n    this._removePlayActions(id);\n    typeof id !== 'number' && this.fadeStop();\n    this._sounds(id).forEach(sound => sound.pause());\n    this._fire(BuzzEvents.Pause, id);\n\n    return this;\n  }\n\n  /**\n   * Stops the sound belongs to the passed id or all the sounds belongs to this group.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  stop(id) {\n    this._removePlayActions(id);\n    typeof id !== 'number' && this.fadeStop();\n    this._sounds(id).forEach(sound => sound.stop());\n    this._fire(BuzzEvents.Stop, id);\n\n    return this;\n  }\n\n  /**\n   * Mutes the sound belongs to the passed id or all the sounds belongs to this group.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  mute(id) {\n    const isGroup = typeof id !== 'number';\n    isGroup && this.fadeStop();\n    this._sounds(id).forEach(sound => sound.mute());\n    isGroup && (this._muted = true);\n\n    this._fire(BuzzEvents.Mute, id, this._muted);\n\n    return this;\n  }\n\n  /**\n   * Un-mutes the sound belongs to the passed id or all the sounds belongs to this group.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  unmute(id) {\n    const isGroup = typeof id !== 'number';\n    isGroup && this.fadeStop();\n    this._sounds(id).forEach(sound => sound.unmute());\n    isGroup && (this._muted = false);\n\n    this._fire(BuzzEvents.Mute, id, this._muted);\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the volume of the passed sound or the group.\n   * @param {number} [volume] Should be from 0.0 to 1.0.\n   * @param {number} [id] The sound id.\n   * @return {Buzz|number}\n   */\n  volume(volume, id) {\n    const isGroup = typeof id !== 'number';\n\n    if (typeof volume === 'number' && volume >= 0 && volume <= 1.0) {\n      isGroup && this.fadeStop();\n      this._sounds(id).forEach(sound => sound.volume(volume));\n      typeof id !== 'number' && (this._volume = volume);\n      this._fire(BuzzEvents.Volume, id, this._volume);\n      return this;\n    }\n\n    if (!isGroup) {\n      const sound = this._engine.sound(id);\n      return sound ? sound.volume() : null;\n    }\n\n    return this._volume;\n  }\n\n  /**\n   * Fades the group's or passed sound's volume to the passed value in the passed duration.\n   * @param {number} to The destination volume.\n   * @param {number} duration The period of fade in seconds.\n   * @param {string} [type = linear] The fade type (linear or exponential).\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  fade(to, duration, type = 'linear', id) {\n    const isGroup = typeof id !== 'number';\n\n    if (isGroup && this._fading) {\n      return this;\n    }\n\n    this._fire(BuzzEvents.FadeStart, id);\n\n    this._sounds(id).forEach(sound => sound.fade(to, duration, type));\n\n    if (isGroup) {\n      this._fading = true;\n\n      this._fadeTimer = setTimeout(() => {\n        this.volume(to);\n\n        clearTimeout(this._fadeTimer);\n\n        this._fadeTimer = null;\n        this._fading = false;\n        this._fire(BuzzEvents.FadeEnd);\n      }, duration * 1000);\n    }\n\n    return this;\n  }\n\n  /**\n   * Stops the group's or passed sound's current running fade.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  fadeStop(id) {\n    const isGroup = typeof id !== 'number';\n\n    if (isGroup && !this._fading) {\n      return this;\n    }\n\n    this._sounds(id).forEach(sound => sound.fadeStop());\n\n    if (isGroup) {\n      if (this._fadeTimer) {\n        clearTimeout(this._fadeTimer);\n        this._fadeTimer = null;\n      }\n\n      this._fading = false;\n    }\n\n    this._fire(BuzzEvents.FadeStop, id);\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the rate of the passed sound or the group.\n   * @param {number} [rate] Should be from 0.5 to 5.0.\n   * @param {number} [id] The sound id.\n   * @return {Buzz|number}\n   */\n  rate(rate, id) {\n    if (typeof rate === 'number' && rate >= 0.5 && rate <= 5) {\n      this._sounds(id).forEach(sound => sound.rate(rate));\n      typeof id !== 'number' && (this._rate = rate);\n      this._fire(BuzzEvents.Rate, id, this._rate);\n      return this;\n    }\n\n    if (typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? sound.rate() : null;\n    }\n\n    return this._rate;\n  }\n\n  /**\n   * Gets/sets the current playback position of the sound.\n   * @param {number} id The sound id\n   * @param {number} [seek] The seek position.\n   * @return {Buzz|number}\n   */\n  seek(id, seek) {\n    const sound = this._engine.sound(id);\n\n    if (!sound) {\n      return this;\n    }\n\n    if (typeof seek === 'number') {\n      // If the audio source is not yet loaded push an item to the queue to seek after the sound is loaded\n      // and load the sound.\n      if (!this.isLoaded()) {\n        this._queue.add('after-load', `seek-${id}`, () => this.seek(id, seek));\n        this.load();\n        return this;\n      }\n\n      sound.seek(seek);\n      this._fire(BuzzEvents.Seek, id, seek);\n      return this;\n    }\n\n    return sound.seek();\n  }\n\n  /**\n   * Gets/sets the looping behavior of a sound or the group.\n   * @param {boolean} [loop] True to loop the sound.\n   * @param {number} [id] The sound id.\n   * @return {Buzz|boolean}\n   */\n  loop(loop, id) {\n    if (typeof loop === 'boolean') {\n      this._sounds(id).forEach(sound => sound.loop(loop));\n      typeof id !== 'number' && (this._loop = loop);\n      return this;\n    }\n\n    if (typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? sound.loop() : null;\n    }\n\n    return this._loop;\n  }\n\n  /**\n   * Returns true if the passed sound is playing.\n   * @param {number} id The sound id.\n   * @return {boolean}\n   */\n  playing(id) {\n    const sound = this._engine.sound(id);\n    return sound ? sound.isPlaying() : null;\n  }\n\n  /**\n   * Returns true if the passed sound is muted or the group is muted.\n   * @param {number} [id] The sound id.\n   * @return {boolean}\n   */\n  muted(id) {\n    if (typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? sound.muted() : null;\n    }\n\n    return this._muted;\n  }\n\n  /**\n   * Returns the state of the passed sound or the group.\n   * @return {BuzzState|SoundState}\n   */\n  state(id) {\n    if (typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? sound.state() : null;\n    }\n\n    return this._state;\n  }\n\n  /**\n   * Returns the duration of the passed sound or the total duration of the sound.\n   * @param {number} [id] The sound id.\n   * @return {number}\n   */\n  duration(id) {\n    if (typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? sound.duration() : null;\n    }\n\n    return this._duration;\n  }\n\n  /**\n   * Unloads the loaded audio buffer.\n   * @return {Buzz}\n   */\n  unload() {\n    this._queue.remove('after-load');\n    this._engine.unload(this._compatibleSrc);\n    this._buffer = null;\n    this._duration = 0;\n    this._loadState = LoadState.NotLoaded;\n    return this;\n  }\n\n  /**\n   * Stops and destroys all the sounds belong to this group and release other dependencies.\n   */\n  destroy() {\n    if (this._state === BuzzState.Destroyed) {\n      return;\n    }\n\n    this.stop();\n    this._queue.clear();\n    this._engine.off(EngineEvents.Resume, this._onEngineResume);\n    this._engine.free(false, this._id);\n\n    this._buffer = null;\n    this._queue = null;\n    this._engine = null;\n    this._state = BuzzState.Destroyed;\n\n    this._fire(BuzzEvents.Destroy);\n\n    emitter.clear(this._id);\n  }\n\n  /**\n   * Subscribes to an event for the sound or the group.\n   * @param {string} eventName The event name.\n   * @param {function} handler The event handler.\n   * @param {boolean} [once = false] True for one-time event handling.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  on(eventName, handler, once = false, id) {\n    emitter.on(id || this._id, eventName, handler, once);\n    return this;\n  }\n\n  /**\n   * Un-subscribes from an event for the sound or the group.\n   * @param {string} eventName The event name.\n   * @param {function} handler The event handler.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  off(eventName, handler, id) {\n    emitter.off(id || this._id, eventName, handler);\n    return this;\n  }\n\n  /**\n   * Returns the unique id of the sound.\n   * @return {number}\n   */\n  id() {\n    return this._id;\n  }\n\n  /**\n   * Returns the audio resource loading status.\n   * @return {LoadState}\n   */\n  loadState() {\n    return this._loadState;\n  }\n\n  /**\n   * Returns true if the audio source is loaded.\n   * @return {boolean}\n   */\n  isLoaded() {\n    return this._loadState === LoadState.Loaded;\n  }\n\n  /**\n   * Returns the sound for the passed id.\n   * @param {number} id The sound id.\n   * @return {Sound}\n   */\n  sound(id) {\n    return this._engine.sound(id);\n  }\n\n  /**\n   * Returns true if the passed sound exists.\n   * @param {number} id The sound id.\n   * @return {boolean}\n   */\n  alive(id) {\n    return Boolean(this.sound(id));\n  }\n\n  /**\n   * Whenever the engine resume run the actions queued for it.\n   * @private\n   */\n  _onEngineResume() {\n    this._queue.run('after-engine-resume');\n  }\n\n  /**\n   * Checks the engine state and plays the passed sound.\n   * @param {Sound} sound The sound.\n   * @private\n   */\n  _play(sound) {\n    if (this._engine.state() === EngineState.Destroying || this._engine.state() === EngineState.Done) {\n      this._fire(BuzzEvents.Error, null, { type: ErrorType.PlayError, error: 'The engine is stopping/stopped' });\n      return;\n    }\n\n    if (this._engine.state() === EngineState.NoAudio) {\n      this._fire(BuzzEvents.Error, null, { type: ErrorType.NoAudio, error: 'Web Audio is un-available' });\n      return;\n    }\n\n    const playAndFire = () => {\n      sound.play();\n      this._fire(BuzzEvents.PlayStart, sound.id());\n    };\n\n    if ([EngineState.Suspending, EngineState.Suspended, EngineState.Resuming].indexOf(this._engine.state()) > -1) {\n      this._queue.add('after-engine-resume', `sound-${sound.id()}`, () => playAndFire());\n      this._engine.state() !== EngineState.Resuming && this._engine.resume();\n      return;\n    }\n\n    playAndFire();\n  }\n\n  /**\n   * Remove the play actions queued from the queue.\n   * @param {number} [id] The sound id.\n   * @private\n   */\n  _removePlayActions(id) {\n    this._queue.remove('after-load', id ? `play-${id}` : null);\n    this._queue.remove('after-engine-resume', id ? `sound-${id}` : null);\n  }\n\n  /**\n   * Returns the sound for the passed id or all the sounds belong to this group.\n   * @param {number} [id] The sound id.\n   * @return {Array<Sound>}\n   * @private\n   */\n  _sounds(id) {\n    if (typeof id === 'number') {\n      const sound = this._engine.sound(id);\n      return sound ? [sound] : [];\n    }\n\n    return this._engine.sounds(this._id);\n  }\n\n  /**\n   * Fires an event of group or sound.\n   * @param {string} eventName The event name.\n   * @param {number} [id] The sound id.\n   * @param {...*} args The arguments that to be passed to handler.\n   * @return {Buzz}\n   * @private\n   */\n  _fire(eventName, id, ...args) {\n    if (id) {\n      emitter.fire(id, eventName, ...args, this.sound(id), this);\n      emitter.fire(this._id, eventName, ...args, this.sound(id), this);\n    } else {\n      emitter.fire(this._id, eventName, ...args, this);\n    }\n\n    return this;\n  }\n}\n\nconst $buzz = args => new Buzz(args);\n[\n  'setup',\n  'load',\n  'unload',\n  'mute',\n  'unmute',\n  'volume',\n  'stop',\n  'suspend',\n  'resume',\n  'terminate',\n  'muted',\n  'state',\n  'context',\n  'masterGain',\n  'isAudioAvailable',\n  'on',\n  'off'\n].forEach(method => {\n  $buzz[method] = function () {\n    const result = engine[method](...arguments);\n    return result === engine ? $buzz : result;\n  };\n});\n\nmodule.exports = $buzz;\n","/**\n * Represents a heap item.\n */\nclass HeapItem {\n\n  /**\n   * The sound object.\n   * @type {Sound}\n   */\n  sound = null;\n\n  /**\n   * The group id.\n   * @type {number|null}\n   */\n  groupId = null;\n\n  /**\n   * Set the group id and sound.\n   * @param {number} groupId The group id.\n   * @param {Sound} sound The sound instance.\n   */\n  constructor(groupId, sound) {\n    this.groupId = groupId;\n    this.sound = sound;\n  }\n}\n\n/**\n * Represents a collection of sounds belong to an audio resource.\n */\nclass HeapItemCollection {\n\n  /**\n   * The audio source url.\n   * @type {string|null}\n   */\n  url = null;\n\n  /**\n   * The collection of sound objects.\n   * @type {object}\n   */\n  items = {};\n\n  /**\n   * Adds a new sound item to the collection.\n   * @param {number} groupId The group id.\n   * @param {Sound} sound The sound instance.\n   */\n  add(groupId, sound) {\n    const soundId = sound.id().toString();\n\n    if (this.items.hasOwnProperty(soundId)) {\n      return;\n    }\n\n    this.items[soundId] = new HeapItem(groupId, sound);\n  }\n\n  /**\n   * Removes the sounds.\n   * @param {boolean} [idle = true] True to destroy only the idle sounds.\n   * @param {number} [groupId] The group id.\n   */\n  free(idle = true, groupId) {\n    Object.values(this.items).forEach(item => {\n      const { sound, soundGroupId } = item;\n\n      if(idle && (sound.isPlaying() || sound.isPaused())) {\n        return;\n      }\n\n      if (!Boolean(groupId) || soundGroupId === groupId) {\n        sound.destroy();\n        delete this.items[sound.id()];\n      }\n    });\n  }\n\n  /**\n   * Returns the sounds belong to the group or all the sounds in the collection.\n   * @param {number} [groupId] The group id.\n   * @return {Array<HeapItem>}\n   */\n  sounds(groupId) {\n    const itemsArray = Object.values(this.items);\n    const items = groupId ? itemsArray.filter(item => item.groupId === groupId) : itemsArray;\n    return items.map(item => item.sound);\n  }\n\n  /**\n   * Destroys all the sounds.\n   */\n  destroy() {\n    Object.values(this.items).forEach(item => item.sound.destroy());\n    this.items = {};\n  }\n}\n\n/**\n * Stores all the created sounds.\n */\nclass Heap {\n\n  /**\n   * The sound collections.\n   * @type {object}\n   * @private\n   */\n  _collections = {};\n\n  /**\n   * Initialize stuff.\n   */\n  constructor() {\n    this.free = this.free.bind(this);\n  }\n\n  /**\n   * Adds a new sound to the respective collection.\n   * @param {string} url The audio source url or base64 string.\n   * @param {number} groupId The group id.\n   * @param {Sound} sound The sound instance.\n   */\n  add(url, groupId, sound) {\n    if (!this._collections.hasOwnProperty(url)) {\n      this._collections[url] = new HeapItemCollection();\n    }\n\n    this._collections[url].add(groupId, sound);\n  }\n\n  /**\n   * Returns the sound based on the id.\n   * @param {number} id The sound id.\n   */\n  sound(id) {\n    return this.sounds().find(sound => sound.id() === id);\n  }\n\n  /**\n   * Returns the sounds belongs to a particular group or all of them.\n   * @param {number} [groupId] The group id.\n   * @return {Array}\n   */\n  sounds(groupId) {\n    const sounds = [];\n    Object.values(this._collections).forEach(col => sounds.push(...col.sounds(groupId)));\n    return sounds;\n  }\n\n  /**\n   * Removes sounds from the collections.\n   * @param {boolean} [idle = true] True to destroy only the idle sounds.\n   * @param {number} [groupId] The group id.\n   */\n  free(idle = true, groupId) {\n    Object.values(this._collections).forEach(col => col.free(idle, groupId));\n  }\n\n  /**\n   * Destroys all the sounds.\n   */\n  destroy() {\n    Object.values(this._collections).forEach(col => col.destroy());\n    this._collections = {};\n  }\n}\n\nexport default Heap;\n","import engine from './Engine';\nimport utility from './Utility';\n\n/**\n * Enum that represents the different states of a sound.\n * @enum {string}\n */\nconst SoundState = {\n  Ready: 'ready',\n  Playing: 'playing',\n  Paused: 'paused',\n  Destroyed: 'destroyed'\n};\n\n/**\n * Represents a sound created using Web Audio API.\n * @class\n */\nclass Sound {\n\n  /**\n   * Unique id.\n   * @type {number}\n   * @private\n   */\n  _id = -1;\n\n  /**\n   * The current volume of the sound. Should be from 0.0 to 1.0.\n   * @type {number}\n   * @private\n   */\n  _volume = 1.0;\n\n  /**\n   * The current playback speed. Should be from 0.5 to 5.\n   * @type {number}\n   * @private\n   */\n  _rate = 1;\n\n  /**\n   * True if the sound is currently muted.\n   * @type {boolean}\n   * @private\n   */\n  _muted = false;\n\n  /**\n   * True if the sound should play repeatedly.\n   * @type {boolean}\n   * @private\n   */\n  _loop = false;\n\n  /**\n   * The current state (playing, paused etc.) of the sound.\n   * @type {SoundState}\n   * @private\n   */\n  _state = SoundState.Ready;\n\n  /**\n   * Web API's audio context.\n   * @type {AudioContext}\n   * @private\n   */\n  _context = null;\n\n  /**\n   * The gain node to control the volume of the sound.\n   * @type {GainNode}\n   * @private\n   */\n  _gainNode = null;\n\n  /**\n   * The audio buffer.\n   * @type {AudioBuffer}\n   * @private\n   */\n  _buffer = null;\n\n  /**\n   * The AudioBufferSourceNode that plays the audio buffer assigned to it.\n   * @type {AudioBufferSourceNode}\n   * @private\n   */\n  _bufferSourceNode = null;\n\n  /**\n   * Duration of the playback in seconds.\n   * @type {number}\n   * @private\n   */\n  _duration = 0;\n\n  /**\n   * The playback start position.\n   * @type {number}\n   * @private\n   */\n  _startPos = 0;\n\n  /**\n   * The playback end position.\n   * @type {number}\n   * @private\n   */\n  _endPos = 0;\n\n  /**\n   * The current position of the playback.\n   * @type {number}\n   * @private\n   */\n  _currentPos = 0;\n\n  /**\n   * The position of the playback during rate change.\n   * @type {number}\n   * @private\n   */\n  _rateSeek = 0;\n\n  /**\n   * The time at which the playback started.\n   * This property is required for getting the seek position of the playback.\n   * @type {number}\n   * @private\n   */\n  _startTime = 0;\n\n  /**\n   * The callback that will be invoked after the play ends.\n   * @type {function}\n   * @private\n   */\n  _playEndCallback = null;\n\n  /**\n   * The callback that will be invoked after the sound destroyed.\n   * @type {function}\n   * @private\n   */\n  _destroyCallback = null;\n\n  /**\n   * True if the sound is currently fading.\n   * @type {boolean}\n   * @private\n   */\n  _fading = false;\n\n  /**\n   * The timer that runs function after the fading is complete.\n   * @type {number|null}\n   * @private\n   */\n  _fadeTimer = null;\n\n  /**\n   * The callback that will be invoked after the fade is completed.\n   * @type {function}\n   * @private\n   */\n  _fadeEndCallback = null;\n\n  /**\n   * Initializes the internal properties of the sound.\n   * @param {object} args The input parameters of the sound.\n   * @param {string} [args.id] The unique id of the sound.\n   * @param {AudioBuffer} [args.buffer] Audio source buffer.\n   * @param {number} [args.volume = 1.0] The initial volume of the sound. Should be from 0.0 to 1.0.\n   * @param {number} [args.rate = 1] The initial playback rate of the sound. Should be from 0.5 to 5.0.\n   * @param {boolean} [args.loop = false] True to play the sound repeatedly.\n   * @param {boolean} [args.muted = false] True to be muted initially.\n   * @param {number} [args.startPos] The playback start position.\n   * @param {number} [args.endPos] The playback end position.\n   * @param {function} [args.playEndCallback] The callback that will be invoked after the play ends.\n   * @param {function} [args.destroyCallback] The callback that will be invoked after destroyed.\n   * @param {function} [args.fadeEndCallback] The callback that will be invoked the fade is completed.\n   * @constructor\n   */\n  constructor(args) {\n    const {\n      id,\n      buffer,\n      volume,\n      rate,\n      loop,\n      muted,\n      startPos,\n      endPos,\n      playEndCallback,\n      destroyCallback,\n      fadeEndCallback\n    } = args;\n\n    // Set the passed id or the random one.\n    this._id = typeof id === 'number' ? id : utility.id();\n\n    // Set the passed audio buffer and duration.\n    this._buffer = buffer;\n    this._endPos = this._buffer.duration;\n\n    // Set other properties.\n    volume && (this._volume = volume);\n    rate && (this._rate = rate);\n    muted && (this._muted = muted);\n    loop && (this._loop = loop);\n    startPos && (this._startPos = startPos);\n    endPos && (this._endPos = endPos);\n    this._playEndCallback = playEndCallback;\n    this._destroyCallback = destroyCallback;\n    this._fadeEndCallback = fadeEndCallback;\n\n    // Calculate the duration.\n    this._duration = this._endPos - this._startPos;\n\n    // Create gain node and set the volume.\n    this._context = engine.context();\n    this._gainNode = this._context.createGain();\n    this._gainNode.gain.setValueAtTime(this._muted ? 0 : this._volume, this._context.currentTime);\n  }\n\n  /**\n   * Plays the sound or the sound defined in the sprite.\n   * @return {Sound}\n   */\n  play() {\n    // If the sound is already playing then return.\n    if (this.isPlaying()) {\n      return this;\n    }\n\n    // Get the playback starting position.\n    let seek = Math.max(0, this._currentPos > 0 ? this._currentPos : this._startPos);\n\n    // Create a new buffersourcenode to play the sound.\n    this._bufferSourceNode = this._context.createBufferSource();\n\n    // Set the buffer, playback rate and loop parameters\n    this._bufferSourceNode.buffer = this._buffer;\n    this._bufferSourceNode.playbackRate.setValueAtTime(this._rate, this._context.currentTime);\n    this._setLoop(this._loop);\n\n    // Connect the node to the audio graph.\n    this._bufferSourceNode.connect(this._gainNode);\n\n    // Listen to the \"ended\" event to reset/clean things.\n    this._bufferSourceNode.addEventListener('ended', () => {\n      // Reset the seek positions\n      this._currentPos = 0;\n      this._rateSeek = 0;\n\n      // Destroy the node (AudioBufferSourceNodes are one-time use and throw objects).\n      this._destroyBufferNode();\n\n      // Reset the state to allow future actions.\n      this._state = SoundState.Ready;\n\n      // Invoke the callback if there is one.\n      this._playEndCallback && this._playEndCallback(this);\n    });\n\n    const startTime = this._context.currentTime;\n\n    // Call the supported method to play the sound.\n    if (typeof this._bufferSourceNode.start !== 'undefined') {\n      this._bufferSourceNode.start(startTime, seek, this._loop ? undefined : this._duration);\n    } else {\n      this._bufferSourceNode.noteGrainOn(startTime, seek, this._loop ? undefined : this._duration);\n    }\n\n    // Record the starting time and set the state.\n    this._startTime = startTime;\n    this._state = SoundState.Playing;\n\n    return this;\n  }\n\n  /**\n   * Pauses the playing sound.\n   * @return {Sound}\n   */\n  pause() {\n    // If the sound is already playing return.\n    if (!this.isPlaying()) {\n      return this;\n    }\n\n    // Stop the current running fade.\n    this.fadeStop();\n\n    // Save the current position and reset rateSeek.\n    this._currentPos = this.seek();\n    this._rateSeek = 0;\n\n    this._destroyBufferNode();\n\n    this._state = SoundState.Paused;\n\n    return this;\n  }\n\n  /**\n   * Stops the sound that is playing or in paused state.\n   * @return {Sound}\n   */\n  stop() {\n    // If the sound is not playing or paused return.\n    if (!this.isPlaying() && !this.isPaused()) {\n      return this;\n    }\n\n    // Stop the current running fade.\n    this.fadeStop();\n\n    // Reset the variables\n    this._currentPos = 0;\n    this._rateSeek = 0;\n\n    this._destroyBufferNode();\n\n    this._state = SoundState.Ready;\n\n    return this;\n  }\n\n  /**\n   * Mutes the sound.\n   * @return {Sound}\n   */\n  mute() {\n    // Stop the current running fade.\n    this.fadeStop();\n\n    // Set the value of gain node to 0.\n    this._gainNode.gain.setValueAtTime(0, this._context.currentTime);\n\n    // Set the muted property true.\n    this._muted = true;\n\n    return this;\n  }\n\n  /**\n   * Un-mutes the sound.\n   * @return {Sound}\n   */\n  unmute() {\n    // Stop the current running fade.\n    this.fadeStop();\n\n    // Reset the gain node's value back to volume.\n    this._gainNode.gain.setValueAtTime(this._volume, this._context.currentTime);\n\n    // Set the muted property to false.\n    this._muted = false;\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the volume.\n   * @param {number} [vol] Should be from 0.0 to 1.0.\n   * @return {Sound|number}\n   */\n  volume(vol) {\n    // If no input parameter is passed then return the volume.\n    if (typeof vol === 'undefined') {\n      return this._volume;\n    }\n\n    // Stop the current running fade.\n    this.fadeStop();\n\n    // Set the gain's value to the passed volume.\n    this._gainNode.gain.setValueAtTime(this._muted ? 0 : vol, this._context.currentTime);\n\n    // Set the volume to the property.\n    this._volume = vol;\n\n    return this;\n  }\n\n  /**\n   * Fades the sound volume to the passed value in the passed duration.\n   * @param {number} to The destination volume.\n   * @param {number} duration The period of fade.\n   * @param {string} [type = linear] The fade type (linear or exponential).\n   * @return {Sound}\n   */\n  fade(to, duration, type = 'linear') {\n    // If a fade is already running stop it.\n    if (this._fading) {\n      this.fadeStop();\n    }\n\n    this._fading = true;\n\n    if (type === 'linear') {\n      this._gainNode.gain.linearRampToValueAtTime(to, this._context.currentTime + duration);\n    } else {\n      this._gainNode.gain.exponentialRampToValueAtTime(to, this._context.currentTime + duration);\n    }\n\n    this._fadeTimer = setTimeout(() => {\n      this.volume(to);\n\n      clearTimeout(this._fadeTimer);\n\n      this._fadeTimer = null;\n      this._fading = false;\n\n      this._fadeEndCallback && this._fadeEndCallback(this);\n    }, duration * 1000);\n\n    return this;\n  }\n\n  /**\n   * Stops the current running fade.\n   * @return {Sound}\n   */\n  fadeStop() {\n    if (!this._fading) {\n      return this;\n    }\n\n    this._gainNode.gain.cancelScheduledValues(this._context.currentTime);\n\n    if (this._fadeTimer) {\n      clearTimeout(this._fadeTimer);\n      this._fadeTimer = null;\n    }\n\n    this._fading = false;\n    this.volume(this._gainNode.gain.value);\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the playback rate.\n   * @param {number} [rate] The playback rate. Should be from 0.5 to 5.\n   * @return {Sound|number}\n   */\n  rate(rate) {\n    // If no input parameter is passed return the current rate.\n    if (typeof rate === 'undefined') {\n      return this._rate;\n    }\n\n    this._rate = rate;\n    this._rateSeek = this.seek();\n\n    if (this.isPlaying()) {\n      this._startTime = this._context.currentTime;\n      this._bufferSourceNode && (this._bufferSourceNode.playbackRate.setValueAtTime(rate, this._context.currentTime));\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the seek position.\n   * @param {number} [seek] The seek position.\n   * @return {Sound|number}\n   */\n  seek(seek) {\n    // If no parameter is passed return the current position.\n    if (typeof seek === 'undefined') {\n      const realTime = this.isPlaying() ? this._context.currentTime - this._startTime : 0;\n      const rateElapsed = this._rateSeek ? this._rateSeek - this._currentPos : 0;\n\n      return this._currentPos + (rateElapsed + realTime * this._rate);\n    }\n\n    // If seeking outside the borders then return.\n    if (seek < this._startPos || seek > this._endPos) {\n      return this;\n    }\n\n    // If the sound is currently playing... pause it, set the seek position and then continue playing.\n    const isPlaying = this.isPlaying();\n\n    if (isPlaying) {\n      this.pause();\n    }\n\n    this._currentPos = seek;\n\n    if (isPlaying) {\n      this.play();\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the loop parameter of the sound.\n   * @param {boolean} [loop] True to loop the sound.\n   * @return {Sound/boolean}\n   */\n  loop(loop) {\n    if (typeof loop !== 'boolean') {\n      return this._loop;\n    }\n\n    this._loop = loop;\n    this._setLoop(loop);\n\n    return this;\n  }\n\n  /**\n   * Destroys the dependencies and release the memory.\n   * @return {Sound}\n   */\n  destroy() {\n    // If the sound is already destroyed return.\n    if (this._state === SoundState.Destroyed) {\n      return this;\n    }\n\n    // Stop the sound.\n    this.stop();\n\n    this._gainNode.disconnect();\n\n    this._buffer = null;\n    this._context = null;\n    this._gainNode = null;\n\n    // Set the state to \"destroyed\".\n    this._state = SoundState.Destroyed;\n\n    this._destroyCallback && this._destroyCallback(this);\n\n    return this;\n  }\n\n  /**\n   * Returns the unique id of the sound.\n   * @return {number}\n   */\n  id() {\n    return this._id;\n  }\n\n  /**\n   * Returns whether the sound is muted or not.\n   * @return {boolean}\n   */\n  muted() {\n    return this._muted;\n  }\n\n  /**\n   * Returns the state of the sound.\n   * @return {SoundState}\n   */\n  state() {\n    return this._state;\n  }\n\n  /**\n   * Returns the total duration of the playback.\n   * @return {number}\n   */\n  duration() {\n    return this._duration;\n  }\n\n  /**\n   * Returns true if the buzz is playing.\n   * @return {boolean}\n   */\n  isPlaying() {\n    return this._state === SoundState.Playing;\n  }\n\n  /**\n   * Returns true if buzz is paused.\n   * @return {boolean}\n   */\n  isPaused() {\n    return this._state === SoundState.Paused;\n  }\n\n  /**\n   * Returns the gain node.\n   * @return {GainNode}\n   */\n  _gain() {\n    return this._gainNode;\n  }\n\n  /**\n   * Stops the playing buffer source node and destroys it.\n   * @private\n   */\n  _destroyBufferNode() {\n    if (!this._bufferSourceNode) {\n      return;\n    }\n\n    if (typeof this._bufferSourceNode.stop !== 'undefined') {\n      this._bufferSourceNode.stop();\n    }\n    else {\n      this._bufferSourceNode.noteGrainOff();\n    }\n\n    this._bufferSourceNode.disconnect();\n    this._bufferSourceNode.removeEventListener('ended', this._onEnded);\n    this._bufferSourceNode = null;\n  }\n\n  /**\n   * Sets the sound to play repeatedly or not.\n   * @param {boolean} loop True to play the sound repeatedly.\n   * @private\n   */\n  _setLoop(loop) {\n    if (!this._bufferSourceNode) {\n      return;\n    }\n\n    this._bufferSourceNode.loop = loop;\n\n    if (loop) {\n      this._bufferSourceNode.loopStart = this._startPos;\n      this._bufferSourceNode.loopEnd = this._endPos;\n    }\n  }\n}\n\nexport {Sound as default, SoundState};\n"],"sourceRoot":""}