{"version":3,"sources":["webpack://$buzz/webpack/universalModuleDefinition","webpack://$buzz/webpack/bootstrap","webpack://$buzz/./src/Utility.js","webpack://$buzz/./src/Engine.js","webpack://$buzz/./src/DownloadResult.js","webpack://$buzz/./src/DownloadStatus.js","webpack://$buzz/./src/Emitter.js","webpack://$buzz/./src/Queue.js","webpack://$buzz/./src/Buzz.js","webpack://$buzz/./src/BufferLoader.js","webpack://$buzz/./src/MediaLoader.js","webpack://$buzz/./src/Html5AudioPool.js","webpack://$buzz/./src/Sound.js","webpack://$buzz/./src/WorkerTimer.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Utility","_navigator","_contextType","_formats","_userAgent","navigator","this","userAgent","AudioContext","webkitAudioContext","audio","Audio","mp3","Boolean","canPlayType","replace","mpeg","opus","ogg","oga","wav","aac","caf","m4a","mp4","weba","webm","dolby","flac","Math","round","Date","now","random","format","formats","find","isFormatSupported","source","ext","isBase64","exec","toLowerCase","sources","isSourceSupported","str","test","maxTouchPoints","msMaxTouchPoints","ErrorType","NoAudio","LoadError","PlayError","EngineError","EngineState","NotReady","Ready","Suspending","Suspended","Resuming","Destroying","Done","EngineEvents","Volume","Mute","Stop","Suspend","Resume","Error","userInputEventNames","engine","_id","utility","id","_muted","_volume","_maxNodesPerSource","_cleanUpInterval","_inactiveTime","_autoEnable","_intervalId","_isAudioAvailable","_state","_context","_gainNode","_queue","_buzzesArray","_bufferLoader","_mediaLoader","Queue","_resumeAndRemoveListeners","free","args","getContext","_fire","type","error","volume","muted","maxNodesPerSource","cleanUpInterval","autoEnable","onstop","onmute","onvolume","onsuspend","onresume","onerror","ondone","on","BufferLoader","MediaLoader","src","forEach","buzz","getCompatibleSource","state","eventName","document","addEventListener","createGain","gain","setValueAtTime","currentTime","connect","destination","setInterval","urls","progressCallback","load","indexOf","push","splice","url","groupId","allocateForGroup","soundId","allocateForSound","unload","releaseForGroup","hasFreeNodes","vol","undefined","buzzes","stop","add","suspend","then","run","resume","cleanUp","clearInterval","destroy","dispose","clear","emitter","remove","terminate","close","handler","once","off","x","fire","default","status","DownloadStatus","Failure","Success","Emitter","_objectsEventsHandlersMap","_hasObject","objEvents","_hasEvent","filter","eventSubscriber","eventSubscribers","length","setTimeout","subscriber","_eventActions","actionIdentifier","action","removeAfterRun","hasEvent","fn","keys","_run","hasAction","queued","BuzzState","Destroyed","BuzzEvents","Load","LoadProgress","UnLoad","PlayStart","PlayEnd","Pause","Seek","Rate","FadeStart","FadeEnd","FadeStop","Destroy","LoadState","NotLoaded","Loading","Loaded","Buzz","_src","_format","_sprite","_rate","_loop","_preload","_autoplay","_stream","_duration","_compatibleSrc","_loadState","_engine","_fading","_fadeTimer","_noOfLoadCalls","_soundsArray","_onLoadProgress","setup","isAudioAvailable","context","masterGain","_onEngineResume","Array","isArray","sprite","rate","loop","autoplay","stream","preload","onload","onloadprogress","onunload","onplaystart","onplayend","onpause","onrate","onseek","ondestroy","play","sound","isLoaded","downloadResult","duration","_buffer","_onLoadFailure","getSupportedFormat","getSupportedSource","soundOrId","_play","newSoundId","playSound","soundArgs","buffer","playEndCallback","destroyCallback","_removeSound","fadeEndCallback","audioErrorCallback","err","loadCallback","positions","startPos","endPos","newSound","Sound","_gain","isGroup","_removePlayActions","fadeStop","_sounds","pause","mute","unmute","to","linearRampToValueAtTime","exponentialRampToValueAtTime","clearTimeout","fade","cancelScheduledValues","seek","isPlaying","disconnect","persist","abandon","inactiveDurationInSeconds","lastPlayed","isPersistent","isPaused","inactiveTime","evt","percentageDownloaded","playAndFire","$buzz","method","result","arguments","_bufferCache","_progressCallsAndCallbacks","_disposed","_load","Promise","all","map","_unload","resolve","DownloadResult","reject","decodeAudioData","arrayBuffer","data","atob","split","dataView","Uint8Array","charCodeAt","req","XMLHttpRequest","open","responseType","response","lengthComputable","loaded","total","send","soundCleanUpCallback","_audioPool","_bufferingAudios","Html5AudioPool","console","log","removeAudioObjOfUrl","audioObj","a","_cleanUp","releaseForSource","release","allocateForSource","onCanPlayThrough","obj","onError","releaseAudio","canplaythrough","readyState","removeEventListener","_soundCleanUpCallback","_resourceNodesMap","_cleanUpCalled","_createSrc","_checkMaxNodesForSrc","unallocated","_createGroup","nodes","allocated","shift","groupSounds","_destroyNode","audioNodes","slice","totalAllocatedLength","isIE","onend","SoundState","Playing","Paused","_audio","_bufferSourceNode","_startPos","_endPos","_currentPos","_rateSeek","_startTime","_loadCallback","_playEndCallback","_destroyCallback","_fadeEndCallback","_audioErrorCallback","_mediaElementAudioSourceNode","_endTimer","_isSprite","_lastPlayed","_persist","_onBufferEnded","_onHtml5Ended","_onCanPlayThrough","_onAudioError","playbackRate","_setLoop","createMediaElementSource","_playHtml5","_playBuffer","_clearEndTimer","_destroyBufferNode","workerTimer","_getTimeVars","abs","realTime","rateElapsed","_destroyAudio","_destroyMediaSourceNode","max","createBufferSource","startTime","start","noteGrainOn","timeout","noteGrainOff","loopStart","loopEnd","WorkerTimer","_worker","_isWorkerThreadAvailable","_timerCallbacks","_timerId","_handleMessage","Worker","blob","_getBlob","WORKER_SCRIPT","workerUrl","_createObjectURL","script","Blob","e","blobBuilderType","BlobBuilder","WebKitBlobBuilder","append","getBlob","file","URL","createObjectURL","webkitURL","callback","timerId","cb","repeat","postMessage","command","timeoutId","intervalId"],"mappings":"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","file":"musquito-2.1.0.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"$buzz\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"$buzz\"] = factory();\n\telse\n\t\troot[\"$buzz\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","/**\n * Contains helper methods.\n */\nclass Utility {\n\n  /**\n   * The navigator object.\n   * @type {Navigator}\n   * @private\n   */\n  _navigator = null;\n\n  /**\n   * The AudioContext type.\n   * @type {Function}\n   * @private\n   */\n  _contextType = null;\n\n  /**\n   * Dictionary of audio formats and their support status.\n   * @type {object}\n   * @private\n   */\n  _formats = {};\n\n  /**\n   * User agent.\n   * @private\n   */\n  _userAgent = null;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    if (typeof navigator !== 'undefined') {\n      this._navigator = navigator;\n      this._userAgent = navigator.userAgent;\n    }\n\n    // Set the available Web Audio Context type available in browser.\n    if (typeof AudioContext !== 'undefined') {\n      this._contextType = AudioContext;\n    } else if (typeof webkitAudioContext !== 'undefined') {\n      this._contextType = webkitAudioContext;\n    }\n\n    // Determine the supported audio formats.\n    let audio = new Audio();\n\n    this._formats = {\n      mp3: Boolean(audio.canPlayType('audio/mp3;').replace(/^no$/, '')),\n      mpeg: Boolean(audio.canPlayType('audio/mpeg;').replace(/^no$/, '')),\n      opus: Boolean(audio.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, '')),\n      ogg: Boolean(audio.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, '')),\n      oga: Boolean(audio.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, '')),\n      wav: Boolean(audio.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, '')),\n      aac: Boolean(audio.canPlayType('audio/aac;').replace(/^no$/, '')),\n      caf: Boolean(audio.canPlayType('audio/x-caf;').replace(/^no$/, '')),\n      m4a: Boolean((audio.canPlayType('audio/x-m4a;') ||\n        audio.canPlayType('audio/m4a;') ||\n        audio.canPlayType('audio/aac;')).replace(/^no$/, '')),\n      mp4: Boolean((audio.canPlayType('audio/x-mp4;') ||\n        audio.canPlayType('audio/mp4;') ||\n        audio.canPlayType('audio/aac;')).replace(/^no$/, '')),\n      weba: Boolean(audio.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n      webm: Boolean(audio.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n      dolby: Boolean(audio.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, '')),\n      flac: Boolean((audio.canPlayType('audio/x-flac;') || audio.canPlayType('audio/flac;')).replace(/^no$/, ''))\n    };\n\n    audio = null;\n  }\n\n  /**\n   * Returns an unique id (credit: https://howlerjs.com).\n   * @return {number}\n   */\n  id() {\n    return Math.round(Date.now() * Math.random());\n  }\n\n  /**\n   * Returns the available context type.\n   * @return {Function}\n   */\n  getContextType() {\n    return this._contextType;\n  }\n\n  /**\n   * Instantiates and returns the audio context.\n   * @return {AudioContext|webkitAudioContext}\n   */\n  getContext() {\n    return new this._contextType();\n  }\n\n  /**\n   * Returns the supported audio formats.\n   * @return {Object}\n   */\n  supportedFormats() {\n    return this._formats;\n  }\n\n  /**\n   * Returns true if the passed format is supported.\n   * @param {string} format The audio format ex. \"mp3\"\n   * @return {boolean}\n   */\n  isFormatSupported(format) {\n    return Boolean(this._formats[format]);\n  }\n\n  /**\n   * Returns the first supported format from the passed array.\n   * @param {string[]} formats Array of audio formats\n   * @return {string}\n   */\n  getSupportedFormat(formats) {\n    return formats.find(format => this.isFormatSupported(format));\n  }\n\n  /**\n   * Returns true if the audio source is supported.\n   * @param {string} source The audio source url or base64 string\n   * @return {boolean}\n   */\n  isSourceSupported(source) {\n    let ext = this.isBase64(source) ?\n      (/^data:audio\\/([^;,]+);/i).exec(source) :\n      (/^.+\\.([^.]+)$/).exec(source);\n\n    ext = (/^.+\\.([^.]+)$/).exec(source);\n    return ext ? this.isFormatSupported(ext[1].toLowerCase()) : false;\n  }\n\n  /**\n   * Returns the first supported audio source from the passed array.\n   * @param {string[]} sources Array of audio sources. The audio source could be either url or base64 string.\n   * @return {string}\n   */\n  getSupportedSource(sources) {\n    return sources.find(source => this.isSourceSupported(source));\n  }\n\n  /**\n   * Returns whether the passed string is a base64 string or not.\n   * @param {string} str Base64 audio string\n   * @return {boolean}\n   */\n  isBase64(str) {\n    return (/^data:[^;]+;base64,/).test(str);\n  }\n\n  /**\n   * Returns true if the platform is mobile.\n   * @return {boolean}\n   * @private\n   */\n  _isMobile() {\n    if (!this._navigator) {\n      return false;\n    }\n\n    return (/iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i).test(this._userAgent);\n  }\n\n  /**\n   * Returns true if the platform is touch supported.\n   * @return {boolean}\n   * @private\n   */\n  _isTouch() {\n    return typeof window !== 'undefined' && (Boolean(('ontouchend' in window) ||\n      (this._navigator && this._navigator.maxTouchPoints > 0) ||\n      (this._navigator && this._navigator.msMaxTouchPoints > 0)));\n  }\n\n  /**\n   * Returns true if the user agent is IE.\n   * @return {boolean}\n   */\n  isIE() {\n    return Boolean(this._userAgent && (/MSIE |Trident\\//).test(this._userAgent));\n  }\n}\n\nexport default new Utility();\n\n","import BufferLoader from './BufferLoader';\nimport MediaLoader  from './MediaLoader';\nimport emitter      from './Emitter';\nimport Queue        from './Queue';\nimport utility      from './Utility';\n\n/**\n * Enum that represents the different type of errors thrown by Engine and Buzzes.\n * @enum {string}\n */\nconst ErrorType = {\n  NoAudio: 'no-audio',\n  LoadError: 'load',\n  PlayError: 'play',\n  EngineError: 'engine'\n};\n\n/**\n * Represents the different states of the audio engine.\n * @enum {string}\n */\nconst EngineState = {\n  NotReady: 'notready',\n  Ready: 'ready',\n  Suspending: 'suspending',\n  Suspended: 'suspended',\n  Resuming: 'resuming',\n  Destroying: 'destroying',\n  Done: 'done',\n  NoAudio: 'no-audio'\n};\n\n/**\n * Enum that represents the different events by engine.\n * @enum {string}\n */\nconst EngineEvents = {\n  Volume: 'volume',\n  Mute: 'mute',\n  Stop: 'stop',\n  Suspend: 'suspend',\n  Resume: 'resume',\n  Error: 'error',\n  Done: 'done'\n};\n\n/**\n * Array of event names.\n * @type {string[]}\n */\nconst userInputEventNames = [\n  'click',\n  'contextmenu',\n  'auxclick',\n  'dblclick',\n  'mousedown',\n  'mouseup',\n  'pointerup',\n  'touchend',\n  'keydown',\n  'keyup'\n];\n\n/**\n * The audio engine that orchestrates all the sounds.\n * @class\n */\nclass Engine {\n\n  /**\n   * Unique id of the engine.\n   * @type {number}\n   * @private\n   */\n  _id = utility.id();\n\n  /**\n   * Represents whether the audio engine is currently muted or not.\n   * @type {boolean}\n   * @private\n   */\n  _muted = false;\n\n  /**\n   * Represents the global volume.\n   * @type {number}\n   * @private\n   */\n  _volume = 1.0;\n\n  /**\n   * Maximum number of HTML5 audio objects allowed for a url.\n   * @type {number}\n   * @private\n   */\n  _maxNodesPerSource = 10;\n\n  /**\n   * The inactive sounds clean-up period.\n   * @type {number}\n   * @private\n   */\n  _cleanUpInterval = 5;\n\n  /**\n   * Inactive time of sound.\n   * @type {number}\n   * @private\n   */\n  _inactiveTime = 2;\n\n  /**\n   * Auto-enables audio in first user interaction.\n   * @type {boolean}\n   * @private\n   */\n  _autoEnable = true;\n\n  /**\n   * The clean-up interval id.\n   * @type {number|null}\n   * @private\n   */\n  _intervalId = null;\n\n  /**\n   * True if Web Audio API is available.\n   * @type {boolean}\n   * @private\n   */\n  _isAudioAvailable = false;\n\n  /**\n   * Represents the current state of the engine.\n   * @type {EngineState}\n   * @private\n   */\n  _state = EngineState.NotReady;\n\n  /**\n   * The Web Audio API's audio context.\n   * @type {AudioContext}\n   * @private\n   */\n  _context = null;\n\n  /**\n   * The master gain node.\n   * @type {GainNode}\n   * @private\n   */\n  _gainNode = null;\n\n  /**\n   * The action queue.\n   * @type {Queue}\n   * @private\n   */\n  _queue = null;\n\n  /**\n   * Array of buzzes.\n   * @type {Array<Buzz>}\n   * @private\n   */\n  _buzzesArray = [];\n\n  /**\n   * Loader - the component that loads audio buffers with audio data.\n   * @type {BufferLoader}\n   * @private\n   */\n  _bufferLoader = null;\n\n  /**\n   * MediaLoader - the component that loads HTML5 audio nodes with audio.\n   * @type {MediaLoader}\n   * @private\n   */\n  _mediaLoader = null;\n\n  /**\n   * Instantiates the action queue.\n   * @constructor\n   */\n  constructor() {\n    this._queue = new Queue();\n    this._resumeAndRemoveListeners = this._resumeAndRemoveListeners.bind(this);\n    this.free = this.free.bind(this);\n  }\n\n  /**\n   * Instantiate the audio context and other dependencies.\n   * @param {object} [args] Input parameters object.\n   * @param {number} [args.volume = 1.0] The global volume of the sound engine.\n   * @param {boolean} [args.muted = false] Stay muted initially or not.\n   * @param {number} [args.maxNodesPerSource = 10] Maximum number of HTML5 audio objects allowed for a url.\n   * @param {number} [args.cleanUpInterval = 5] The sounds garbage collection interval period in minutes.\n   * @param {boolean} [args.autoEnable = true] Auto-enables audio in first user interaction.\n   * @param {function} [args.onstop] Event-handler for the \"stop\" event.\n   * @param {function} [args.onmute] Event-handler for the \"mute\" event.\n   * @param {function} [args.onvolume] Event-handler for the \"volume\" event.\n   * @param {function} [args.onsuspend] Event-handler for the \"suspend\" event.\n   * @param {function} [args.onresume] Event-handler for the \"resume\" event.\n   * @param {function} [args.onerror] Event-handler for the \"error\" event.\n   * @param {function} [args.ondone] Event-handler for the \"done\" event.\n   * @return {Engine}\n   */\n  setup(args) {\n    // If the setup is already done return.\n    if (this._state !== EngineState.NotReady) {\n      return this;\n    }\n\n    this._context = utility.getContext();\n\n    // Determine the audio stuff available in the current platform and set the flags accordingly.\n    this._isAudioAvailable = Boolean(this._context);\n\n    // If no Web Audio and HTML5 audio is available fire an error event.\n    if (!this._isAudioAvailable) {\n      this._state = EngineState.NoAudio;\n      this._fire(EngineEvents.Error, { type: ErrorType.NoAudio, error: 'Web Audio API is not available' });\n      return this;\n    }\n\n    // Read the input parameters from the options.\n    const {\n      volume,\n      muted,\n      maxNodesPerSource,\n      cleanUpInterval,\n      autoEnable,\n      onstop,\n      onmute,\n      onvolume,\n      onsuspend,\n      onresume,\n      onerror,\n      ondone\n    } = args || {};\n\n    // Set the properties from the read parameters.\n    typeof volume === 'number' && volume >= 0 && volume <= 1.0 && (this._volume = volume);\n    typeof muted === 'boolean' && (this._muted = muted);\n    typeof maxNodesPerSource === 'number' && (this._maxNodesPerSource = maxNodesPerSource);\n    typeof cleanUpInterval === 'number' && (this._cleanUpInterval = cleanUpInterval);\n    typeof autoEnable === 'boolean' && (this._autoEnable = autoEnable);\n    typeof onstop === 'function' && this.on(EngineEvents.Stop, onstop);\n    typeof onmute === 'function' && this.on(EngineEvents.Mute, onmute);\n    typeof onvolume === 'function' && this.on(EngineEvents.Volume, onvolume);\n    typeof onsuspend === 'function' && this.on(EngineEvents.Suspend, onsuspend);\n    typeof onresume === 'function' && this.on(EngineEvents.Resume, onresume);\n    typeof onerror === 'function' && this.on(EngineEvents.Error, onerror);\n    typeof ondone === 'function' && this.on(EngineEvents.Done, ondone);\n\n    // Create the buffer loader.\n    this._bufferLoader = new BufferLoader(this._context);\n\n    // Create the media loader.\n    this._mediaLoader = new MediaLoader(this._maxNodesPerSource, (src) => {\n      this._buzzesArray.forEach(buzz => buzz.getCompatibleSource() === src && buzz.free());\n    });\n\n    // Auto-enable audio in first user interaction.\n    // https://developers.google.com/web/updates/2018/11/web-audio-autoplay#moving-forward\n    if (this._autoEnable && this._context.state === 'suspended') {\n      userInputEventNames.forEach(eventName => document.addEventListener(eventName, this._resumeAndRemoveListeners));\n    }\n\n    // Create the audio graph.\n    this._gainNode = this._context.createGain();\n    this._gainNode.gain.setValueAtTime(this._muted ? 0 : this._volume, this._context.currentTime);\n    this._gainNode.connect(this._context.destination);\n\n    this._intervalId = window.setInterval(this.free, this._cleanUpInterval * 60 * 1000);\n\n    this._state = this._context.state !== 'suspended' ? EngineState.Ready : EngineState.Suspended;\n\n    return this;\n  }\n\n  /**\n   * Loads single or multiple audio resources into audio buffers and returns them.\n   * @param {string|string[]} urls Single or array of audio urls.\n   * @param {function} [progressCallback] The callback that is called to intimate the percentage downloaded.\n   * @return {Promise}\n   */\n  load(urls, progressCallback) {\n    return this._bufferLoader.load(urls, progressCallback);\n  }\n\n  /**\n   * Loads HTML5 audio nodes for the passed urls.\n   * @param {string|string[]} urls Single or array of audio urls.\n   * @return {Promise<DownloadResult|Array<DownloadResult>>}\n   */\n  loadMedia(urls) {\n    return this._mediaLoader.load(urls);\n  }\n\n  /**\n   * Stores the buzz in the internal collection.\n   * @param {Buzz} buzz The newly created buzz.\n   * @return {Engine}\n   */\n  add(buzz) {\n    if (this._buzzesArray.indexOf(buzz) > -1) {\n      return this;\n    }\n\n    this._buzzesArray.push(buzz);\n\n    return this;\n  }\n\n  /**\n   * Removes the stored buzz from the internal collection.\n   * @param {Buzz} buzz The buzz.\n   * @return {Engine}\n   */\n  remove(buzz) {\n    this._buzzesArray.splice(this._buzzesArray.indexOf(buzz), 1);\n    return this;\n  }\n\n  /**\n   * Loads audio node for group.\n   * @param {string} url The audio file url.\n   * @param {number} groupId The group id.\n   * @return {Promise<DownloadResult>}\n   */\n  allocateForGroup(url, groupId) {\n    return this._mediaLoader.allocateForGroup(url, groupId);\n  }\n\n  /**\n   * Allocates an audio node for sound and returns it.\n   * @param {string} src The audio file url.\n   * @param {number} groupId The buzz id.\n   * @param {number} soundId The sound id.\n   * @return {Audio}\n   */\n  allocateForSound(src, groupId, soundId) {\n    return this._mediaLoader.allocateForSound(src, groupId, soundId);\n  }\n\n  /**\n   * Unloads single or multiple loaded audio buffers from cache.\n   * @param {string|string[]} [urls] Single or array of audio urls.\n   * @return {Engine}\n   */\n  unload(urls) {\n    if (urls) {\n      this._bufferLoader.unload(urls);\n      return this;\n    }\n\n    this._bufferLoader.unload();\n\n    return this;\n  }\n\n  /**\n   * Releases audio nodes allocated for the passed urls.\n   * @param {string|string[]} [urls] Single or array of audio urls.\n   * @return {Engine}\n   */\n  unloadMedia(urls) {\n    if (urls) {\n      this._mediaLoader.unload(urls);\n      return this;\n    }\n\n    this._mediaLoader.unload();\n\n    return this;\n  }\n\n  /**\n   * Releases the allocated audio nodes for the group.\n   * @param {string} url The audio file url.\n   * @param {number} groupId The group id.\n   * @return {Engine}\n   */\n  releaseForGroup(url, groupId) {\n    this._mediaLoader.releaseForGroup(url, groupId);\n    return this;\n  }\n\n  /**\n   * Returns if there are free audio nodes available for a group.\n   * @param {string} src The audio file url.\n   * @param {number} groupId The group id.\n   * @return {boolean}\n   */\n  hasFreeNodes(src, groupId) {\n    return this._mediaLoader.hasFreeNodes(src, groupId);\n  }\n\n  /**\n   * Mutes the engine.\n   * @return {Engine}\n   */\n  mute() {\n    // If the engine is already muted return.\n    if (this._muted) {\n      return this;\n    }\n\n    // Set the value of gain node to 0.\n    this._gainNode.gain.setValueAtTime(0, this._context.currentTime);\n\n    // Set the muted property true.\n    this._muted = true;\n\n    // Fire the \"mute\" event.\n    this._fire(EngineEvents.Mute, this._muted);\n\n    return this;\n  }\n\n  /**\n   * Un-mutes the engine.\n   * @return {Engine}\n   */\n  unmute() {\n    // If the engine is not muted return.\n    if (!this._muted) {\n      return this;\n    }\n\n    // Reset the gain node's value back to volume.\n    this._gainNode.gain.setValueAtTime(this._volume, this._context.currentTime);\n\n    // Set the muted property to false.\n    this._muted = false;\n\n    // Fire the \"mute\" event.\n    this._fire(EngineEvents.Mute, this._muted);\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the volume for the audio engine that controls global volume for all sounds.\n   * @param {number} [vol] Should be within 0.0 to 1.0.\n   * @return {Engine|number}\n   */\n  volume(vol) {\n    // If no parameter is passed then return the current volume.\n    if (vol === undefined) {\n      return this._volume;\n    }\n\n    // If passed volume is not an acceptable value return.\n    if (typeof vol !== 'number' || vol < 0 || vol > 1.0) {\n      return this;\n    }\n\n    // Set the gain's value to the passed volume.\n    this._gainNode.gain.setValueAtTime(this._muted ? 0 : vol, this._context.currentTime);\n\n    // Set the volume to the property.\n    this._volume = vol;\n\n    // Fire the \"volume\" event.\n    this._fire(EngineEvents.Volume, this._volume);\n\n    return this;\n  }\n\n  /**\n   * Stops all the currently playing sounds.\n   * @return {Engine}\n   */\n  stop() {\n    // Stop all the sounds.\n    this.buzzes().forEach(buzz => buzz.stop());\n\n    // Fire the \"stop\" event.\n    this._fire(EngineEvents.Stop);\n\n    return this;\n  }\n\n  /**\n   * Stops all the playing sounds and suspends the audio context immediately.\n   * @return {Engine}\n   */\n  suspend() {\n    // If the context is resuming then suspend after resumed.\n    if (this._state === EngineState.Resuming) {\n      this._queue.add('after-resume', 'suspend', () => this.suspend());\n      return this;\n    }\n\n    // If the state is not ready return.\n    if (this._state !== EngineState.Ready) {\n      return this;\n    }\n\n    // Stop all the playing sounds.\n    this.stop();\n\n    // Set the state to suspending.\n    this._state = EngineState.Suspending;\n\n    // Suspend the Audio Context.\n    this._context.suspend().then(() => {\n      this._state = EngineState.Suspended;\n      this._queue.run('after-suspend');\n      this._fire(EngineEvents.Suspend);\n    });\n\n    return this;\n  }\n\n  /**\n   * Resumes the audio context from the suspended mode.\n   * @return {Engine}\n   */\n  resume() {\n    // If the context is suspending then resume after suspended.\n    if (this._state === EngineState.Suspending) {\n      this._queue.add('after-suspend', 'resume', () => this.resume());\n      return this;\n    }\n\n    if (this._state !== EngineState.Suspended) {\n      return this;\n    }\n\n    this._state = EngineState.Resuming;\n\n    this._context.resume().then(() => {\n      this._state = EngineState.Ready;\n      this._queue.run('after-resume');\n      this._fire(EngineEvents.Resume);\n    });\n\n    return this;\n  }\n\n  /**\n   * Shuts down the engine.\n   * @return {Engine}\n   */\n  terminate() {\n    if (this._state === EngineState.Done || this._state === EngineState.Destroying) {\n      return this;\n    }\n\n    const cleanUp = () => {\n      // Un-listen from user input events.\n      userInputEventNames.forEach(eventName => document.addEventListener(eventName, this._resumeAndRemoveListeners));\n\n      // Stop the timer.\n      this._intervalId && window.clearInterval(this._intervalId);\n      this._intervalId = null;\n\n      // Destroy all the buzzes.\n      this._buzzesArray.forEach(buzz => buzz.destroy());\n\n      // Clear the cache and remove the loader.\n      if (this._bufferLoader) {\n        this._bufferLoader.dispose();\n        this._bufferLoader = null;\n      }\n\n      // Dispose the MediaLoader.\n      if (this._mediaLoader) {\n        this._mediaLoader.dispose();\n        this._mediaLoader = null;\n      }\n\n      this._buzzesArray = [];\n      this._context = null;\n      this._queue.clear();\n      this._queue = null;\n      this._state = EngineState.Done;\n\n      // Fire the \"done\" event.\n      this._fire(EngineEvents.Done);\n\n      emitter.clear(this._id);\n    };\n\n    // Close the context.\n    if (this._context) {\n      if (this._state === EngineState.Suspending) {\n        this._queue.remove('after-suspend');\n        this._queue.add('after-suspend', 'destroy', () => this.terminate());\n        return this;\n      } else if (this._state === EngineState.Resuming) {\n        this._queue.remove('after-resume');\n        this._queue.add('after-resume', 'destroy', () => this.terminate());\n        return this;\n      }\n\n      this._state = EngineState.Destroying;\n      this._context && this._context.close().then(() => cleanUp());\n    } else {\n      this._state = EngineState.Destroying;\n      cleanUp();\n    }\n\n    return this;\n  }\n\n  /**\n   * Subscribes to an event.\n   * @param {string} eventName Name of the event.\n   * @param {function} handler The event-handler function.\n   * @param {boolean} [once = false] Is it one-time subscription or not.\n   * @return {Engine}\n   */\n  on(eventName, handler, once = false) {\n    emitter.on(this._id, eventName, handler, once);\n    return this;\n  }\n\n  /**\n   * Un-subscribes from an event.\n   * @param {string} eventName The event name.\n   * @param {function} [handler] The handler function.\n   * @return {Engine}\n   */\n  off(eventName, handler) {\n    emitter.off(this._id, eventName, handler);\n    return this;\n  }\n\n  /**\n   * Removes the inactive sounds.\n   * @return {Engine}\n   */\n  free() {\n    this._buzzesArray.forEach(buzz => buzz.free());\n    this._mediaLoader.cleanUp();\n    return this;\n  }\n\n  /**\n   * Returns whether the engine is currently muted or not.\n   * @return {boolean}\n   */\n  muted() {\n    return this._muted;\n  }\n\n  /**\n   * Returns the state of the engine.\n   * @return {EngineState}\n   */\n  state() {\n    return this._state;\n  }\n\n  /**\n   * Returns the created audio context.\n   * @return {AudioContext}\n   */\n  context() {\n    return this._context;\n  }\n\n  /**\n   * Returns the master gain node.\n   * @return {GainNode}\n   */\n  masterGain() {\n    return this._gainNode;\n  }\n\n  /**\n   * Returns true if Web Audio API is available.\n   * @return {boolean}\n   */\n  isAudioAvailable() {\n    return this._isAudioAvailable;\n  }\n\n  /**\n   * Returns the buffer loader.\n   * @return {BufferLoader}\n   */\n  bufferLoader() {\n    return this._bufferLoader;\n  }\n\n  /**\n   * Returns the HTML5 media loader.\n   * @return {MediaLoader}\n   */\n  mediaLoader() {\n    return this._mediaLoader;\n  }\n\n  /**\n   * Returns the buzz for the passed id.\n   * @param {number} [id] The buzz id.\n   * @return {Buzz}\n   */\n  buzz(id) {\n    return this._buzzesArray.find(x => x.id() === id);\n  }\n\n  /**\n   * Returns all the buzzes.\n   * @return {Array<Buzz>}\n   */\n  buzzes() {\n    return this._buzzesArray;\n  }\n\n  /**\n   * Returns in active time.\n   * @return {number}\n   */\n  inactiveTime() {\n    return this._inactiveTime;\n  }\n\n  /**\n   * Fires an event of engine.\n   * @param {string} eventName The event name.\n   * @param {...*} args The arguments that to be passed to handler.\n   * @return {Engine}\n   * @private\n   */\n  _fire(eventName, ...args) {\n    emitter.fire(this._id, eventName, ...args, this);\n    return this;\n  }\n\n  /**\n   * Resume the context and un-listen from user input events.\n   * @private\n   */\n  _resumeAndRemoveListeners() {\n    this.resume();\n    userInputEventNames.forEach(eventName => document.addEventListener(eventName, this._resumeAndRemoveListeners));\n  }\n}\n\nconst engine = new Engine();\nexport { engine as default, EngineState, EngineEvents, ErrorType };\n","import DownloadStatus from './DownloadStatus';\n\n/**\n * Represents the download result of an audio.\n * @class\n */\nclass DownloadResult {\n\n  /**\n   * The url of the audio resource\n   * @type {string|null}\n   */\n  url = null;\n\n  /**\n   * AudioBuffer or Html5Audio element\n   * @type {AudioBuffer|Audio}\n   */\n  value = null;\n\n  /**\n   * Download error\n   * @type {any}\n   */\n  error = null;\n\n  /**\n   * Success or failure status of download.\n   * @type {DownloadStatus}\n   */\n  status = null;\n\n  /**\n   * @param {string|null} url The url of the audio resource\n   * @param {AudioBuffer|Audio} [value] AudioBuffer or Html5Audio element\n   * @param {*} [error] Download error\n   */\n  constructor(url, value, error) {\n    this.url = url;\n    this.value = value;\n    this.error = error || null;\n    this.status = error ? DownloadStatus.Failure : DownloadStatus.Success;\n  }\n}\n\nexport default DownloadResult;\n","/**\n * Enum to represent the download status of audio resource.\n * @enum {string}\n */\nconst DownloadStatus = {\n  Success: 'success',\n  Failure: 'error'\n};\n\nexport default DownloadStatus;\n","/**\n * Singleton global event emitter.\n * @class\n */\nclass Emitter {\n\n  /**\n   * Dictionary that maps the objects with their events and handlers.\n   * @type {object}\n   * @private\n   */\n  _objectsEventsHandlersMap = {};\n\n  /**\n   * Subscribes to an event of the passed object.\n   * @param {number} id The unique id of the object.\n   * @param {string} eventName Name of the event\n   * @param {function} handler The event-handler function\n   * @param {boolean} [once = false] Is it one-time subscription or not?\n   * @return {Emitter}\n   */\n  on(id, eventName, handler, once = false) {\n    if (!this._hasObject(id)) {\n      this._objectsEventsHandlersMap[id] = {};\n    }\n\n    const objEvents = this._objectsEventsHandlersMap[id];\n\n    if (!objEvents.hasOwnProperty(eventName)) {\n      objEvents[eventName] = [];\n    }\n\n    objEvents[eventName].push({\n      handler: handler,\n      once: once\n    });\n\n    return this;\n  }\n\n  /**\n   * Un-subscribes from an event of the passed object.\n   * @param {number} id The unique id of the object.\n   * @param {string} eventName The event name.\n   * @param {function} [handler] The handler function.\n   * @return {Emitter}\n   */\n  off(id, eventName, handler) {\n    if (!this._hasEvent(id, eventName)) {\n      return this;\n    }\n\n    const objEvents = this._objectsEventsHandlersMap[id];\n\n    if (!handler) {\n      objEvents[eventName] = [];\n    } else {\n      objEvents[eventName] = objEvents[eventName].filter(eventSubscriber => {\n        return eventSubscriber.handler !== handler;\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Fires an event of the object passing the source and other optional arguments.\n   * @param {number} id The unique id of the object.\n   * @param {string} eventName The event name\n   * @param {...*} args The arguments that to be passed to handler\n   * @return {Emitter}\n   */\n  fire(id, eventName, ...args) {\n    if (!this._hasEvent(id, eventName)) {\n      return this;\n    }\n\n    let eventSubscribers = this._objectsEventsHandlersMap[id][eventName];\n\n    for (let i = 0; i < eventSubscribers.length; i++) {\n      let eventSubscriber = eventSubscribers[i];\n\n      setTimeout(function (subscriber) {\n        const { handler, once } = subscriber;\n\n        handler(...args);\n\n        if (once) {\n          this.off(id, eventName, handler);\n        }\n      }.bind(this, eventSubscriber), 0);\n    }\n\n    return this;\n  }\n\n  /**\n   * Clears the event handlers of the passed object.\n   * @param {number} [id] The unique id of the object.\n   * @return {Emitter}\n   */\n  clear(id) {\n    if (!id) {\n      this._objectsEventsHandlersMap = {};\n      return this;\n    }\n\n    if (this._hasObject(id)) {\n      delete this._objectsEventsHandlersMap[id];\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns true if the object is already registered.\n   * @param {number} id The object id.\n   * @return {boolean}\n   * @private\n   */\n  _hasObject(id) {\n    return this._objectsEventsHandlersMap.hasOwnProperty(id);\n  }\n\n  /**\n   * Returns true if the passed object has an entry of the passed event.\n   * @param {number} id The object id.\n   * @param {string} eventName The event name.\n   * @return {boolean}\n   * @private\n   */\n  _hasEvent(id, eventName) {\n    return this._hasObject(id) && this._objectsEventsHandlersMap[id].hasOwnProperty(eventName);\n  }\n}\n\nexport default new Emitter();\n","/**\n * Stores queue of actions that has to be run before or after specific events.\n */\nclass Queue {\n\n  _eventActions = {};\n\n  /**\n   * Queues the passed action to the event.\n   * @param {string} eventName The event name.\n   * @param {string} actionIdentifier The action identifier.\n   * @param {function} action The action function.\n   * @param {boolean} [removeAfterRun = true] Remove the action once it's run.\n   */\n  add(eventName, actionIdentifier, action, removeAfterRun = true) {\n    if (!this.hasEvent(eventName)) {\n      this._eventActions[eventName] = {};\n    }\n\n    this._eventActions[eventName][actionIdentifier] = { fn: action, removeAfterRun: removeAfterRun };\n  }\n\n  /**\n   * Returns true if there is a event exists for the passed name.\n   * @param {string} eventName The event name.\n   * @return {boolean}\n   */\n  hasEvent(eventName) {\n    return this._eventActions.hasOwnProperty(eventName);\n  }\n\n  /**\n   * Returns true if the passed action is already queued-up.\n   * @param {string} eventName The event name.\n   * @param {string} actionIdentifier The action identifier.\n   * @return {boolean}\n   */\n  hasAction(eventName, actionIdentifier) {\n    if (!this.hasEvent(eventName)) {\n      return false;\n    }\n\n    return this._eventActions[eventName].hasOwnProperty(actionIdentifier);\n  }\n\n  /**\n   * Runs all the actions queued up for the passed event.\n   * @param {string} eventName The event name.\n   * @param {string} [actionIdentifier] The action identifier.\n   */\n  run(eventName, actionIdentifier) {\n    if (!this.hasEvent(eventName)) {\n      return;\n    }\n\n    if (typeof actionIdentifier !== 'undefined') {\n      if (!this.hasAction(eventName, actionIdentifier)) {\n        return;\n      }\n\n      this._run(eventName, actionIdentifier);\n\n      return;\n    }\n\n    Object.keys(this._eventActions[eventName]).forEach(action => this._run(eventName, action));\n  }\n\n  /**\n   * Removes the event or a queued action for the event.\n   * @param {string} eventName The event name.\n   * @param {string} [actionIdentifier] The action identifier.\n   */\n  remove(eventName, actionIdentifier) {\n    if (!this._eventActions.hasOwnProperty(eventName)) {\n      return;\n    }\n\n    if (!actionIdentifier) {\n      delete this._eventActions[eventName];\n      return;\n    }\n\n    delete this._eventActions[eventName][actionIdentifier];\n  }\n\n  /**\n   * Clears all the stored events and the queued-up actions.\n   */\n  clear() {\n    this._eventActions = {};\n  }\n\n  /**\n   * Runs a single action.\n   * @param {string} eventName The event name.\n   * @param {string} actionIdentifier The action identifier.\n   * @private\n   */\n  _run(eventName, actionIdentifier) {\n    const queued = this._eventActions[eventName][actionIdentifier];\n    queued.fn();\n    queued.removeAfterRun && this.remove(eventName, actionIdentifier);\n  }\n}\n\nexport default Queue;\n","import engine, { EngineEvents, EngineState, ErrorType } from './Engine';\nimport Queue                                            from './Queue';\nimport utility                                          from './Utility';\nimport emitter                                          from './Emitter';\nimport Sound                                            from './Sound';\nimport DownloadStatus                                   from './DownloadStatus';\n\n/**\n * Enum that represents the different states of a buzz (sound group).\n * @enum {string}\n */\nconst BuzzState = {\n  Ready: 'ready',\n  Destroyed: 'destroyed'\n};\n\n/**\n * Enum that represents the different events fired by a buzz.\n * @enum {string}\n */\nconst BuzzEvents = {\n  Load: 'load',\n  LoadProgress: 'loadprogress',\n  UnLoad: 'unload',\n  PlayStart: 'playstart',\n  PlayEnd: 'playend',\n  Pause: 'pause',\n  Stop: 'stop',\n  Volume: 'volume',\n  Mute: 'mute',\n  Seek: 'seek',\n  Rate: 'rate',\n  FadeStart: 'fadestart',\n  FadeEnd: 'fadeend',\n  FadeStop: 'fadestop',\n  Error: 'error',\n  Destroy: 'destroy'\n};\n\n/**\n * Enum that represents the different states occurs while loading a sound.\n * @enum {string}\n */\nconst LoadState = {\n  NotLoaded: 'notloaded',\n  Loading: 'loading',\n  Loaded: 'loaded'\n};\n\n/**\n * A wrapper class that simplifies dealing with group of sounds.\n */\nclass Buzz {\n\n  /**\n   * Unique id.\n   * @type {number}\n   * @private\n   */\n  _id = -1;\n\n  /**\n   * Represents the source of the sound. The source can be an url or base64 string.\n   * @type {*}\n   * @private\n   */\n  _src = null;\n\n  /**\n   * The formats of the passed audio sources.\n   * @type {Array<string>}\n   * @private\n   */\n  _format = [];\n\n  /**\n   * The sprite definition.\n   * @type {object}\n   * @private\n   */\n  _sprite = null;\n\n  /**\n   * The current volume of the sound. Should be from 0.0 to 1.0.\n   * @type {number}\n   * @private\n   */\n  _volume = 1.0;\n\n  /**\n   * The current rate of the playback. Should be from 0.5 to 5.\n   * @type {number}\n   * @private\n   */\n  _rate = 1;\n\n  /**\n   * True if the sound is currently muted.\n   * @type {boolean}\n   * @private\n   */\n  _muted = false;\n\n  /**\n   * True if the sound should play repeatedly.\n   * @type {boolean}\n   * @private\n   */\n  _loop = false;\n\n  /**\n   * True to pre-loaded the sound on construction.\n   * @type {boolean}\n   * @private\n   */\n  _preload = false;\n\n  /**\n   * True to auto-play the sound on construction.\n   * @type {boolean}\n   * @private\n   */\n  _autoplay = false;\n\n  /**\n   * True to use HTML5 audio node.\n   * @type {boolean}\n   * @private\n   */\n  _stream = false;\n\n  /**\n   * Duration of the playback in seconds.\n   * @type {number}\n   * @private\n   */\n  _duration = 0;\n\n  /**\n   * The best compatible source in the audio sources passed.\n   * @type {string|null}\n   * @private\n   */\n  _compatibleSrc = null;\n\n  /**\n   * Represents the different states that occurs while loading the sound.\n   * @type {LoadState}\n   * @private\n   */\n  _loadState = LoadState.NotLoaded;\n\n  /**\n   * Represents the state of this group.\n   * @type {BuzzState}\n   * @private\n   */\n  _state = BuzzState.Ready;\n\n  /**\n   * The action queue.\n   * @type {Queue}\n   * @private\n   */\n  _queue = null;\n\n  /**\n   * The audio engine.\n   * @type {Engine}\n   * @private\n   */\n  _engine = null;\n\n  /**\n   * Web API's audio context.\n   * @type {AudioContext}\n   * @private\n   */\n  _context = null;\n\n  /**\n   * The group's gain node.\n   * @type {GainNode}\n   * @private\n   */\n  _gainNode = null;\n\n  /**\n   * True if the group is currently fading.\n   * @type {boolean}\n   * @private\n   */\n  _fading = false;\n\n  /**\n   * The timer that runs function after the fading is complete.\n   * @type {number|null}\n   * @private\n   */\n  _fadeTimer = null;\n\n  /**\n   * Number of audio resource loading calls in progress.\n   * @type {number}\n   * @private\n   */\n  _noOfLoadCalls = 0;\n\n  /**\n   * Array of sounds belongs to this group.\n   * @type {Array}\n   * @private\n   */\n  _soundsArray = [];\n\n  /**\n   * Initializes the internal properties.\n   * @param {string|Array<string>|object} args The input parameters of this sound group.\n   * @param {string} [args.id] The unique id of the sound.\n   * @param {string|string[]} args.src Single or array of audio urls/base64 strings.\n   * @param {number} [args.volume = 1.0] The initial volume of the sound. Should be from 0.0 to 1.0.\n   * @param {number} [args.rate = 1] The initial playback rate of the sound. Should be from 0.5 to 5.0.\n   * @param {boolean} [args.loop = false] True to play the sound repeatedly.\n   * @param {boolean} [args.muted = false] True to be muted initially.\n   * @param {boolean} [args.preload = false] True to pre-load the sound after construction.\n   * @param {boolean} [args.autoplay = false] True to play automatically after construction.\n   * @param {boolean} [args.stream = false] True to use HTML5 audio node.\n   * @param {string|string[]} [args.format] The file format(s) of the passed audio source(s).\n   * @param {object} [args.sprite] The sprite definition.\n   * @param {function} [args.onload] Event-handler for the \"load\" event.\n   * @param {function} [args.onloadprogress] Event-handler for the \"loadprogress\" event (only for non-stream types).\n   * @param {function} [args.onunload] Event-handler for the \"unload\" event.\n   * @param {function} [args.onplaystart] Event-handler for the \"playstart\" event.\n   * @param {function} [args.onplayend] Event-handler for the \"playend\" event.\n   * @param {function} [args.onstop] Event-handler for the \"stop\" event.\n   * @param {function} [args.onpause] Event-handler for the \"pause\" event.\n   * @param {function} [args.onmute] Event-handler for the \"mute\" event.\n   * @param {function} [args.onvolume] Event-handler for the \"volume\" event.\n   * @param {function} [args.onrate] Event-handler for the \"rate\" event.\n   * @param {function} [args.onseek] Event-handler for the \"seek\" event.\n   * @param {function} [args.onerror] Event-handler for the \"error\" event.\n   * @param {function} [args.ondestroy] Event-handler for the \"destroy\" event.\n   * @constructor\n   */\n  constructor(args) {\n    this._onLoadProgress = this._onLoadProgress.bind(this);\n\n    // Setup the audio engine.\n    this._engine = engine;\n    this._engine.setup();\n\n    // If no audio is available throw error.\n    if (!this._engine.isAudioAvailable()) {\n      this._fire(BuzzEvents.Error, null, { type: ErrorType.NoAudio, error: 'Web Audio is un-available' });\n      return this;\n    }\n\n    // Store the audio context.\n    this._context = this._engine.context();\n\n    // Add the created buzz to the engine and connect the gain nodes.\n    this._engine.add(this);\n    this._gainNode = this._engine.context().createGain();\n    this._gainNode.gain.setValueAtTime(this._muted ? 0 : this._volume, this._context.currentTime);\n    this._gainNode.connect(this._engine.masterGain());\n\n    // Subscribe to engine's resume event.\n    this._engine.on(EngineEvents.Resume, this._onEngineResume = this._onEngineResume.bind(this));\n\n    if (typeof args === 'string') {\n      this._src = [args];\n    } else if (Array.isArray(args) && args.length) {\n      this._src = args;\n    } else if (typeof args === 'object') {\n      const {\n        id,\n        src,\n        format,\n        sprite,\n        volume,\n        rate,\n        muted,\n        loop,\n        autoplay,\n        stream,\n        preload,\n        onload,\n        onloadprogress,\n        onunload,\n        onplaystart,\n        onplayend,\n        onstop,\n        onpause,\n        onmute,\n        onvolume,\n        onrate,\n        onseek,\n        onerror,\n        ondestroy\n      } = args;\n\n      // Set the passed id or the random one.\n      this._id = typeof id === 'number' ? id : utility.id();\n\n      // Set the source.\n      if (typeof src === 'string') {\n        this._src = [src];\n      } else if (Array.isArray(src) && src.length) {\n        this._src = src;\n      }\n\n      // Set the format.\n      if (Array.isArray(format)) {\n        this._format = format;\n      } else if (typeof format === 'string' && format) {\n        this._format = [format];\n      }\n\n      // Set other properties.\n      typeof sprite === 'object' && (this._sprite = sprite);\n      typeof volume === 'number' && volume >= 0 && volume <= 1.0 && (this._volume = volume);\n      typeof rate === 'number' && rate >= 0.5 && rate <= 5 && (this._rate = rate);\n      typeof muted === 'boolean' && (this._muted = muted);\n      typeof loop === 'boolean' && (this._loop = loop);\n      typeof autoplay === 'boolean' && (this._autoplay = autoplay);\n      typeof stream === 'boolean' && (this._stream = stream);\n      typeof preload === 'boolean' && (this._preload = preload);\n\n      // Bind the passed event handlers to events.\n      typeof onload === 'function' && this.on(BuzzEvents.Load, onload);\n      typeof onloadprogress === 'function' && this.on(BuzzEvents.LoadProgress, onloadprogress);\n      typeof onunload === 'function' && this.on(BuzzEvents.UnLoad, onunload);\n      typeof onplaystart === 'function' && this.on(BuzzEvents.PlayStart, onplaystart);\n      typeof onplayend === 'function' && this.on(BuzzEvents.PlayEnd, onplayend);\n      typeof onstop === 'function' && this.on(BuzzEvents.Stop, onstop);\n      typeof onpause === 'function' && this.on(BuzzEvents.Pause, onpause);\n      typeof onmute === 'function' && this.on(BuzzEvents.Mute, onmute);\n      typeof onvolume === 'function' && this.on(BuzzEvents.Volume, onvolume);\n      typeof onrate === 'function' && this.on(BuzzEvents.Rate, onrate);\n      typeof onseek === 'function' && this.on(BuzzEvents.Seek, onseek);\n      typeof onerror === 'function' && this.on(BuzzEvents.Error, onerror);\n      typeof ondestroy === 'function' && this.on(BuzzEvents.Destroy, ondestroy);\n    }\n\n    // Throw error if source is not passed.\n    if (!this._src) {\n      throw new Error('You should pass the source for the audio.');\n    }\n\n    // Instantiate the dependencies.\n    this._queue = new Queue();\n\n    if (this._autoplay) {\n      this.play();\n    } else if (this._preload) {\n      this.load();\n    }\n  }\n\n  /**\n   * Loads the sound to the underlying audio object.\n   * @param {number} [soundId] The id of the sound to be loaded (for stream types).\n   * @return {Buzz}\n   */\n  load(soundId) {\n    if (soundId) {\n      const sound = this.sound(soundId);\n      sound && sound.load();\n      return this;\n    }\n\n    // If the sound is not of stream and the source is loaded or currently loading then return.\n    if (!this._stream && (this.isLoaded() || this._loadState === LoadState.Loading)) {\n      return this;\n    }\n\n    // Set the state to loading.\n    this._loadState = LoadState.Loading;\n\n    // Increment the calls which is needed for stream types.\n    this._noOfLoadCalls = this._noOfLoadCalls + 1;\n\n    const src = this._compatibleSrc || (this._compatibleSrc = this.getCompatibleSource());\n\n    // Load the audio source.\n    const load$ = this._stream ? this._engine.allocateForGroup(src, this._id) : this._engine.load(src, this._onLoadProgress);\n    load$.then(downloadResult => {\n      this._noOfLoadCalls > 0 && (this._noOfLoadCalls = this._noOfLoadCalls - 1);\n\n      if (this._stream && this._state === BuzzState.Destroyed) {\n        this._engine.releaseForGroup(this._compatibleSrc, this._id);\n        return;\n      }\n\n      if (this._state === BuzzState.Destroyed || this._loadState === LoadState.NotLoaded) {\n        return;\n      }\n\n      // If loading succeeded,\n      // i. Save the result.\n      // ii. Set the load state as loaded.\n      // iii. Fire the load event.\n      // iv. Run the methods that are queued to run after successful load.\n      if (downloadResult.status === DownloadStatus.Success) {\n        if (this._stream) {\n          this._duration = downloadResult.value.duration;\n        } else {\n          this._buffer = downloadResult.value;\n          this._duration = this._buffer.duration;\n        }\n\n        this._loadState = LoadState.Loaded;\n        this._fire(BuzzEvents.Load, null, downloadResult);\n\n        if (this._engine.state() !== EngineState.Ready) {\n          this._queue.remove('after-load');\n          return;\n        }\n\n        this._queue.run('after-load');\n\n        return;\n      }\n\n      this._onLoadFailure(downloadResult.error);\n    });\n\n    return this;\n  }\n\n  /**\n   * Returns the first compatible source based on the passed sources and the format.\n   * @return {string}\n   */\n  getCompatibleSource() {\n    // If the user has passed \"format\", check if it is supported or else retrieve the first supported source from the array.\n    return this._format.length ?\n      this._src[this._format.indexOf(utility.getSupportedFormat(this._format))] :\n      utility.getSupportedSource(this._src);\n  }\n\n  /**\n   * Plays the passed sound defined in the sprite or the sound that belongs to the passed id.\n   * @param {string|number} [soundOrId] The sound name defined in sprite or the sound id.\n   * @return {Buzz|number}\n   */\n  play(soundOrId) {\n    const isIdPassed = typeof soundOrId === 'number';\n\n    // If id is passed then get the sound from the engine and play it.\n    if (isIdPassed) {\n      const sound = this.sound(soundOrId);\n      sound && this._play(sound);\n      return this;\n    }\n\n    const newSoundId = utility.id(),\n      playSound = () => {\n        const soundArgs = {\n          id: newSoundId,\n          buffer: this._buffer,\n          stream: this._stream,\n          audio: this._stream ? this._engine.allocateForSound(this._compatibleSrc, this._id, newSoundId) : null,\n          volume: this._volume,\n          rate: this._rate,\n          muted: this._muted,\n          loop: this._loop,\n          playEndCallback: () => this._fire(BuzzEvents.PlayEnd, newSoundId),\n          destroyCallback: () => {\n            this._removeSound(newSoundId);\n            this._fire(BuzzEvents.Destroy, newSoundId);\n            emitter.clear(newSoundId);\n          },\n          fadeEndCallback: () => this._fire(BuzzEvents.FadeEnd, newSoundId),\n          audioErrorCallback: (sound, err) => {\n            this._fire(BuzzEvents.Error, newSoundId, { type: ErrorType.LoadError, error: err });\n            sound.destroy();\n          },\n          loadCallback: () => {\n            this._fire(BuzzEvents.Load, newSoundId);\n          }\n        };\n\n        if (typeof soundOrId === 'string' && this._sprite && this._sprite.hasOwnProperty(soundOrId)) {\n          const positions = this._sprite[soundOrId];\n          soundArgs.startPos = positions[0];\n          soundArgs.endPos = positions[1];\n        }\n\n        const newSound = new Sound(soundArgs);\n        newSound._gain().connect(this._gainNode);\n        this._soundsArray.push(newSound);\n        this._play(newSound);\n      };\n\n    // If the sound is not yet loaded push an action to the queue to play the sound once it's loaded.\n    if (!this.isLoaded()) {\n      this._queue.add('after-load', `play-${newSoundId}`, () => playSound());\n      this.load();\n    } else {\n      playSound();\n    }\n\n    return newSoundId;\n  }\n\n  /**\n   * Pauses the sound belongs to the passed id or all the sounds belongs to this group.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  pause(id) {\n    const isGroup = typeof id === 'undefined';\n    this._removePlayActions(id);\n    isGroup && this.fadeStop();\n    this._sounds(id).forEach(sound => sound.pause());\n    this._fire(BuzzEvents.Pause, id);\n\n    return this;\n  }\n\n  /**\n   * Stops the sound belongs to the passed id or all the sounds belongs to this group.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  stop(id) {\n    const isGroup = typeof id === 'undefined';\n    this._removePlayActions(id);\n    isGroup && this.fadeStop();\n    this._sounds(id).forEach(sound => sound.stop());\n    this._fire(BuzzEvents.Stop, id);\n\n    return this;\n  }\n\n  /**\n   * Mutes the sound belongs to the passed id or all the sounds belongs to this group.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  mute(id) {\n    const isGroup = typeof id === 'undefined';\n\n    if (isGroup) {\n      this.fadeStop();\n      this._gainNode.gain.setValueAtTime(0, this._context.currentTime);\n      this._muted = true;\n    } else {\n      const sound = this.sound(id);\n      sound && sound.mute();\n    }\n\n    this._fire(BuzzEvents.Mute, id, this._muted);\n\n    return this;\n  }\n\n  /**\n   * Un-mutes the sound belongs to the passed id or all the sounds belongs to this group.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  unmute(id) {\n    const isGroup = typeof id === 'undefined';\n\n    if (isGroup) {\n      this.fadeStop();\n      this._gainNode.gain.setValueAtTime(this._volume, this._context.currentTime);\n      this._muted = false;\n    } else {\n      const sound = this.sound(id);\n      sound && sound.unmute();\n    }\n\n    this._fire(BuzzEvents.Mute, id, this._muted);\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the volume of the passed sound or the group.\n   * @param {number} [volume] Should be from 0.0 to 1.0.\n   * @param {number} [id] The sound id.\n   * @return {Buzz|number}\n   */\n  volume(volume, id) {\n    const isGroup = typeof id === 'undefined';\n\n    if (typeof volume === 'number' && volume >= 0 && volume <= 1.0) {\n      if (isGroup) {\n        this.fadeStop();\n        this._gainNode.gain.setValueAtTime(this._muted ? 0 : volume, this._context.currentTime);\n        this._volume = volume;\n      } else {\n        const sound = this.sound(id);\n        sound && sound.volume(volume);\n      }\n\n      this._fire(BuzzEvents.Volume, id, this._volume);\n      return this;\n    }\n\n    if (!isGroup) {\n      const sound = this.sound(id);\n      return sound ? sound.volume() : null;\n    }\n\n    return this._volume;\n  }\n\n  /**\n   * Fades the group's or passed sound's volume to the passed value in the passed duration.\n   * @param {number} to The destination volume.\n   * @param {number} duration The period of fade in seconds.\n   * @param {string} [type = linear] The fade type (linear or exponential).\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  fade(to, duration, type = 'linear', id) {\n    const isGroup = typeof id === 'undefined';\n\n    if (isGroup && this._fading) {\n      return this;\n    }\n\n    this._fire(BuzzEvents.FadeStart, id);\n\n    if (isGroup) {\n      this._fading = true;\n\n      if (type === 'linear') {\n        this._gainNode.gain.linearRampToValueAtTime(to, this._context.currentTime + duration);\n      } else {\n        this._gainNode.gain.exponentialRampToValueAtTime(to, this._context.currentTime + duration);\n      }\n\n      this._fadeTimer = setTimeout(() => {\n        this.volume(to);\n\n        clearTimeout(this._fadeTimer);\n\n        this._fadeTimer = null;\n        this._fading = false;\n        this._fire(BuzzEvents.FadeEnd);\n      }, duration * 1000);\n    } else {\n      const sound = this.sound(id);\n      sound && sound.fade(to, duration, type);\n    }\n\n    return this;\n  }\n\n  /**\n   * Stops the group's or passed sound's current running fade.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  fadeStop(id) {\n    const isGroup = typeof id === 'undefined';\n\n    if (isGroup) {\n      if (!this._fading) {\n        return this;\n      }\n\n      this._gainNode.gain.cancelScheduledValues(this._context.currentTime);\n\n      if (this._fadeTimer) {\n        clearTimeout(this._fadeTimer);\n        this._fadeTimer = null;\n      }\n\n      this._fading = false;\n    } else {\n      const sound = this.sound(id);\n      sound && sound.fadeStop();\n    }\n\n    this._fire(BuzzEvents.FadeStop, id);\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the rate of the passed sound or the group.\n   * @param {number} [rate] Should be from 0.5 to 5.0.\n   * @param {number} [id] The sound id.\n   * @return {Buzz|number}\n   */\n  rate(rate, id) {\n    const isGroup = typeof id === 'undefined';\n\n    if (typeof rate === 'number' && rate >= 0.5 && rate <= 5) {\n      this._sounds(id).forEach(sound => sound.rate(rate));\n      isGroup && (this._rate = rate);\n      this._fire(BuzzEvents.Rate, id, this._rate);\n      return this;\n    }\n\n    if (!isGroup) {\n      const sound = this.sound(id);\n      return sound ? sound.rate() : null;\n    }\n\n    return this._rate;\n  }\n\n  /**\n   * Gets/sets the current playback position of the sound.\n   * @param {number} id The sound id\n   * @param {number} [seek] The seek position.\n   * @return {Buzz|number}\n   */\n  seek(id, seek) {\n    if (!id) {\n      return this;\n    }\n\n    const sound = this.sound(id);\n\n    if (!sound) {\n      return this;\n    }\n\n    if (typeof seek === 'number') {\n      // If the audio source is not yet loaded push an item to the queue to seek after the sound is loaded\n      // and load the sound.\n      if (!this.isLoaded()) {\n        this._queue.add('after-load', `seek-${id}`, () => this.seek(id, seek));\n        this.load();\n        return this;\n      }\n\n      sound.seek(seek);\n      this._fire(BuzzEvents.Seek, id, seek);\n      return this;\n    }\n\n    return sound.seek();\n  }\n\n  /**\n   * Gets/sets the looping behavior of a sound or the group.\n   * @param {boolean} [loop] True to loop the sound.\n   * @param {number} [id] The sound id.\n   * @return {Buzz|boolean}\n   */\n  loop(loop, id) {\n    const isGroup = typeof id === 'undefined';\n\n    if (typeof loop === 'boolean') {\n      this._sounds(id).forEach(sound => sound.loop(loop));\n      isGroup && (this._loop = loop);\n      return this;\n    }\n\n    if (!isGroup) {\n      const sound = this.sound(id);\n      return sound ? sound.loop() : null;\n    }\n\n    return this._loop;\n  }\n\n  /**\n   * Returns true if the passed sound is playing.\n   * @param {number} id The sound id.\n   * @return {boolean}\n   */\n  playing(id) {\n    const sound = this.sound(id);\n    return sound ? sound.isPlaying() : null;\n  }\n\n  /**\n   * Returns true if the passed sound is muted or the group is muted.\n   * @param {number} [id] The sound id.\n   * @return {boolean}\n   */\n  muted(id) {\n    if (typeof id === 'undefined') {\n      return this._muted;\n    }\n\n    const sound = this.sound(id);\n    return sound ? sound.muted() : null;\n  }\n\n  /**\n   * Returns the state of the passed sound or the group.\n   * @param {number} [id] The sound id.\n   * @return {BuzzState|SoundState}\n   */\n  state(id) {\n    if (typeof id === 'undefined') {\n      return this._state;\n    }\n\n    const sound = this.sound(id);\n    return sound ? sound.state() : null;\n  }\n\n  /**\n   * Returns the duration of the passed sound or the total duration of the sound.\n   * @param {number} [id] The sound id.\n   * @return {number}\n   */\n  duration(id) {\n    if (typeof id === 'undefined') {\n      return this._duration;\n    }\n\n    const sound = this.sound(id);\n    return sound ? sound.duration() : null;\n  }\n\n  /**\n   * Unloads the loaded audio buffer or free audio nodes.\n   * @return {Buzz}\n   */\n  unload() {\n    this._queue.remove('after-load');\n    this._stream && this._engine.releaseForGroup(this._compatibleSrc, this._id);\n    this._buffer = null;\n    this._stream && (this._duration = 0);\n    this._loadState = LoadState.NotLoaded;\n    this._noOfLoadCalls = 0;\n    this._fire(BuzzEvents.UnLoad);\n    return this;\n  }\n\n  /**\n   * Stops and destroys all the sounds belongs to this group and release other dependencies.\n   * @param {number} [soundId] The sound id.\n   */\n  destroy(soundId) {\n    if (soundId) {\n      const sound = this.sound(soundId);\n      sound && sound.destroy();\n      return;\n    }\n\n    if (this._state === BuzzState.Destroyed) {\n      return;\n    }\n\n    this.stop();\n    this._soundsArray.forEach(sound => sound.destroy());\n    this._queue.clear();\n    this._engine.off(EngineEvents.Resume, this._onEngineResume);\n    this._stream && this._engine.releaseForGroup(this._compatibleSrc, this._id);\n    this._gainNode.disconnect();\n    this._engine.remove(this);\n\n    this._soundsArray = [];\n    this._buffer = null;\n    this._queue = null;\n    this._context = null;\n    this._engine = null;\n    this._gainNode = null;\n    this._state = BuzzState.Destroyed;\n\n    this._fire(BuzzEvents.Destroy);\n\n    emitter.clear(this._id);\n  }\n\n  /**\n   * Makes the passed sound persistent that means it can't be auto-destroyed.\n   * @param {number} soundId The sound id.\n   */\n  persist(soundId) {\n    const sound = this.sound(soundId);\n    sound && sound.persist();\n  }\n\n  /**\n   * Makes the passed sound un-persistent that means it can be auto-destroyed.\n   * @param {number} soundId The sound id.\n   */\n  abandon(soundId) {\n    const sound = this.sound(soundId);\n    sound && sound.abandon();\n  }\n\n  /**\n   * Removes the inactive sounds.\n   */\n  free() {\n    const now = new Date();\n\n    this._soundsArray = this._soundsArray.filter(sound => {\n      const inactiveDurationInSeconds = (now - sound.lastPlayed()) / 1000;\n\n      if (sound.isPersistent() ||\n        sound.isPlaying() ||\n        sound.isPaused() ||\n        inactiveDurationInSeconds < this._engine.inactiveTime() * 60) {\n        return true;\n      }\n\n      sound.destroy();\n      return false;\n    });\n  }\n\n  /**\n   * Subscribes to an event for the sound or the group.\n   * @param {string} eventName The event name.\n   * @param {function} handler The event handler.\n   * @param {boolean} [once = false] True for one-time event handling.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  on(eventName, handler, once = false, id) {\n    emitter.on(id || this._id, eventName, handler, once);\n    return this;\n  }\n\n  /**\n   * Un-subscribes from an event for the sound or the group.\n   * @param {string} eventName The event name.\n   * @param {function} handler The event handler.\n   * @param {number} [id] The sound id.\n   * @return {Buzz}\n   */\n  off(eventName, handler, id) {\n    emitter.off(id || this._id, eventName, handler);\n    return this;\n  }\n\n  /**\n   * Returns the unique id of the sound.\n   * @return {number}\n   */\n  id() {\n    return this._id;\n  }\n\n  /**\n   * Returns the gain node.\n   * @return {GainNode}\n   */\n  gain() {\n    return this._gainNode;\n  }\n\n  /**\n   * Returns the audio resource loading status.\n   * @return {LoadState}\n   */\n  loadState() {\n    return this._loadState;\n  }\n\n  /**\n   * Returns true if the audio source is loaded.\n   * @return {boolean}\n   */\n  isLoaded() {\n    return this._stream ? this._engine.hasFreeNodes(this._compatibleSrc, this._id) : this._loadState === LoadState.Loaded;\n  }\n\n  /**\n   * Returns the sound for the passed id.\n   * @param {number} id The sound id.\n   * @return {Sound}\n   */\n  sound(id) {\n    return this._soundsArray.find(x => x.id() === id);\n  }\n\n  /**\n   * Returns all the sounds.\n   * @return {Array<Sound>}\n   */\n  sounds() {\n    return this._soundsArray;\n  }\n\n  /**\n   * Returns true if the passed sound exists.\n   * @param {number} id The sound id.\n   * @return {boolean}\n   */\n  alive(id) {\n    return Boolean(this.sound(id));\n  }\n\n  /**\n   * Called on failure of loading audio source.\n   * @param {*} error The audio source load error.\n   * @private\n   */\n  _onLoadFailure(error) {\n    // Remove the queued actions from this class that are supposed to run after load.\n    this._noOfLoadCalls === 0 && this._queue.remove('after-load');\n\n    // Set the load state back to not loaded.\n    this._loadState = LoadState.NotLoaded;\n\n    // Fire the error event.\n    this._fire(BuzzEvents.Error, null, { type: ErrorType.LoadError, error: error });\n  }\n\n  /**\n   * The resource load progress handler.\n   * @param {object} evt The progress data.\n   * @private\n   */\n  _onLoadProgress(evt) {\n    this._fire(BuzzEvents.LoadProgress, null, evt.percentageDownloaded);\n  }\n\n  /**\n   * Whenever the engine resume run the actions queued for it.\n   * @private\n   */\n  _onEngineResume() {\n    this._queue.run('after-engine-resume');\n  }\n\n  /**\n   * Checks the engine state and plays the passed sound.\n   * @param {Sound} sound The sound.\n   * @private\n   */\n  _play(sound) {\n    if (this._engine.state() === EngineState.Destroying || this._engine.state() === EngineState.Done) {\n      this._fire(BuzzEvents.Error, null, { type: ErrorType.PlayError, error: 'The engine is stopping/stopped' });\n      return;\n    }\n\n    if (this._engine.state() === EngineState.NoAudio) {\n      this._fire(BuzzEvents.Error, null, { type: ErrorType.NoAudio, error: 'Web Audio is un-available' });\n      return;\n    }\n\n    const playAndFire = () => {\n      sound.play();\n      this._fire(BuzzEvents.PlayStart, sound.id());\n    };\n\n    if ([EngineState.Suspending, EngineState.Suspended, EngineState.Resuming].indexOf(this._engine.state()) > -1) {\n      this._queue.add('after-engine-resume', `sound-${sound.id()}`, () => playAndFire());\n      this._engine.state() !== EngineState.Resuming && this._engine.resume();\n      return;\n    }\n\n    playAndFire();\n  }\n\n  /**\n   * Remove the play actions queued from the queue.\n   * @param {number} [id] The sound id.\n   * @private\n   */\n  _removePlayActions(id) {\n    this._queue.remove('after-load', id ? `play-${id}` : null);\n    this._queue.remove('after-engine-resume', id ? `sound-${id}` : null);\n  }\n\n  /**\n   * Returns the sound for the passed id or all the sounds belong to this group.\n   * @param {number} [id] The sound id.\n   * @return {Array<Sound>}\n   * @private\n   */\n  _sounds(id) {\n    if (typeof id === 'number') {\n      const sound = this._soundsArray.find(x => x.id() === id);\n      return sound ? [sound] : [];\n    }\n\n    return this._soundsArray;\n  }\n\n  /**\n   * Removes the passed sound from the array.\n   * @param {number|Sound} sound The sound.\n   * @private\n   */\n  _removeSound(sound) {\n    if (typeof sound === 'number') {\n      this._soundsArray = this._soundsArray.filter(x => x.id() !== sound);\n      return;\n    }\n\n    this._soundsArray.splice(this._soundsArray.indexOf(sound), 1);\n  }\n\n  /**\n   * Fires an event of group or sound.\n   * @param {string} eventName The event name.\n   * @param {number} [id] The sound id.\n   * @param {...*} args The arguments that to be passed to handler.\n   * @return {Buzz}\n   * @private\n   */\n  _fire(eventName, id, ...args) {\n    if (id) {\n      emitter.fire(id, eventName, ...args, this.sound(id), this);\n      emitter.fire(this._id, eventName, ...args, this.sound(id), this);\n    } else {\n      emitter.fire(this._id, eventName, ...args, this);\n    }\n\n    return this;\n  }\n}\n\nconst $buzz = args => new Buzz(args);\n[\n  'setup',\n  'load',\n  'loadMedia',\n  'unload',\n  'unloadMedia',\n  'mute',\n  'unmute',\n  'volume',\n  'stop',\n  'suspend',\n  'resume',\n  'terminate',\n  'muted',\n  'state',\n  'context',\n  'masterGain',\n  'isAudioAvailable',\n  'bufferLoader',\n  'mediaLoader',\n  'on',\n  'off'\n].forEach(method => {\n  $buzz[method] = function () {\n    const result = engine[method](...arguments);\n    return result === engine ? $buzz : result;\n  };\n});\n\nmodule.exports = $buzz;\n","import utility from './Utility';\nimport DownloadResult from './DownloadResult';\n\n/**\n * Loads the audio sources into audio buffers and returns them.\n * The loaded buffers are cached.\n * @class\n */\nclass BufferLoader {\n\n  /**\n   * AudioContext.\n   * @type {AudioContext}\n   * @private\n   */\n  _context = null;\n\n  /**\n   * In-memory audio buffer cache store.\n   * @type {object}\n   * @private\n   */\n  _bufferCache = {};\n\n  /**\n   * Dictionary to store the current progress calls and their callbacks.\n   * @type {object}\n   * @private\n   */\n  _progressCallsAndCallbacks = {};\n\n  /**\n   * True if the loader is disposed.\n   * @type {boolean}\n   * @private\n   */\n  _disposed = false;\n\n  /**\n   * Create the cache.\n   * @param {AudioContext} context The Audio Context\n   */\n  constructor(context) {\n    this._context = context;\n  }\n\n  /**\n   * Loads single or multiple audio resources into audio buffers.\n   * @param {string|string[]} urls Single or array of audio urls.\n   * @param {function} [progressCallback] The callback that is called to intimate the percentage downloaded.\n   * @return {Promise<DownloadResult|Array<DownloadResult>>}\n   */\n  load(urls, progressCallback) {\n    if (typeof urls === 'string') {\n      return this._load(urls, progressCallback);\n    }\n\n    return Promise.all(urls.map(url => this._load(url, progressCallback)));\n  }\n\n  /**\n   * Removes the cached audio buffers.\n   * @param {string|string[]} [urls] Single or array of audio urls\n   */\n  unload(urls) {\n    if (typeof urls === 'string') {\n      this._unload(urls);\n      return;\n    }\n\n    if (Array.isArray(urls)) {\n      urls.forEach(url => this._unload(url), this);\n      return;\n    }\n\n    this._bufferCache = {};\n  }\n\n  /**\n   * Dispose the loader.\n   */\n  dispose() {\n    if (this._disposed) {\n      return;\n    }\n\n    this.unload();\n    this._bufferCache = null;\n    this._progressCallsAndCallbacks = null;\n    this._context = null;\n    this._disposed = true;\n  }\n\n  /**\n   * Loads a single audio resource into audio buffer and cache result if the download is succeeded.\n   * @param {string} url The Audio url.\n   * @param {function} [progressCallback] The callback that is called to intimate the percentage downloaded.\n   * @return {Promise<DownloadResult>}\n   * @private\n   */\n  _load(url, progressCallback) {\n    return new Promise(resolve => {\n      if (this._bufferCache.hasOwnProperty(url)) {\n        resolve(new DownloadResult(url, this._bufferCache[url]));\n        return;\n      }\n\n      if (this._progressCallsAndCallbacks.hasOwnProperty(url)) {\n        this._progressCallsAndCallbacks[url].push(resolve);\n        return;\n      }\n\n      this._progressCallsAndCallbacks[url] = [];\n      this._progressCallsAndCallbacks[url].push(resolve);\n\n      const reject = err => {\n        if (this._disposed) {\n          return;\n        }\n\n        this._progressCallsAndCallbacks[url].forEach(r => r(new DownloadResult(url, null, err)));\n        delete this._progressCallsAndCallbacks[url];\n      };\n\n      const decodeAudioData = arrayBuffer => {\n        if (this._disposed) {\n          return;\n        }\n\n        this._context.decodeAudioData(arrayBuffer, buffer => {\n          this._bufferCache[url] = buffer;\n          this._progressCallsAndCallbacks[url].forEach(r => r(new DownloadResult(url, buffer)));\n          delete this._progressCallsAndCallbacks[url];\n        }, reject);\n      };\n\n      if (utility.isBase64(url)) {\n        const data = atob(url.split(',')[1]);\n        const dataView = new Uint8Array(data.length); // eslint-disable-line no-undef\n\n        for (let i = 0; i < data.length; i++) {\n          dataView[i] = data.charCodeAt(i);\n        }\n\n        decodeAudioData(dataView.buffer);\n        return;\n      }\n\n      const req = new XMLHttpRequest();\n      req.open('GET', url, true);\n      req.responseType = 'arraybuffer';\n\n      req.addEventListener('load', () => decodeAudioData(req.response), false);\n\n      if (progressCallback) {\n        req.addEventListener('progress', (evt) => {\n          if (!evt.lengthComputable) {\n            progressCallback({ url: url, percentageDownloaded: 0 });\n          }\n\n          const percentageDownloaded = Math.round((evt.loaded / evt.total) * 100);\n          progressCallback({ url: url, percentageDownloaded: percentageDownloaded });\n        });\n      }\n\n      req.addEventListener('error', reject, false);\n      req.send();\n    });\n  }\n\n  /**\n   * Removes the single cached audio buffer.\n   * @param {string} url Audio url\n   * @private\n   */\n  _unload(url) {\n    delete this._bufferCache[url];\n  }\n}\n\nexport default BufferLoader;\n","import Html5AudioPool from './Html5AudioPool';\nimport DownloadResult from './DownloadResult';\n\n/**\n * Loads the HTML5 audio nodes and returns them.\n * @class\n */\nclass MediaLoader {\n\n  /**\n   * HTML5 audio pool.\n   * @type {Html5AudioPool}\n   * @private\n   */\n  _audioPool = null;\n\n  /**\n   * Store the array of audio elements that are currently in buffering state.\n   * @type {Array}\n   * @private\n   */\n  _bufferingAudios = [];\n\n  /**\n   * True if the loader is disposed.\n   * @type {boolean}\n   * @private\n   */\n  _disposed = false;\n\n  /**\n   * Creates the audio pool.\n   * @param {number} maxNodesPerSource Maximum number of audio nodes allowed for a url.\n   * @param {function} soundCleanUpCallback The inactive sounds cleanup callback.\n   */\n  constructor(maxNodesPerSource, soundCleanUpCallback) {\n    this._audioPool = new Html5AudioPool(maxNodesPerSource, soundCleanUpCallback);\n  }\n\n  /**\n   * Preloads the HTML5 audio nodes with audio and return them.\n   * @param {string|string[]} urls Single or array of audio file urls.\n   * @return {Promise<DownloadResult|Array<DownloadResult>>}\n   */\n  load(urls) {\n    console.log(typeof urls);\n    if (typeof urls === 'string') {\n      return this._load(urls);\n    }\n\n    return Promise.all(urls.map(url => this._load(url)));\n  }\n\n  /**\n   * Allocates audio node for a group.\n   * @param {string} url The audio file url.\n   * @param {number} groupId The group id.\n   * @return {Promise<DownloadResult>}\n   */\n  allocateForGroup(url, groupId) {\n    return this._load(url, groupId);\n  }\n\n  /**\n   * Allocates an audio node for sound and returns it.\n   * @param {string} src The audio file url.\n   * @param {number} groupId The buzz id.\n   * @param {number} soundId The sound id.\n   * @return {Audio}\n   */\n  allocateForSound(src, groupId, soundId) {\n    return this._audioPool.allocateForSound(src, groupId, soundId);\n  }\n\n  /**\n   * Releases the allocated audio node(s) for the passed urls.\n   * @param {string|string[]} [urls] Single or array of audio file urls.\n   */\n  unload(urls) {\n    const removeAudioObjOfUrl = url => {\n      const audioObj = this._bufferingAudios.find(a => a.url === url);\n      audioObj && this._cleanUp(audioObj);\n    };\n\n    if (!urls) {\n      this._bufferingAudios.forEach(audioObj => this._cleanUp(audioObj));\n      this._audioPool.release();\n    } else if (typeof urls === 'string') {\n      removeAudioObjOfUrl(urls);\n      this._audioPool.releaseForSource(urls);\n    } else if (Array.isArray(urls) && urls.length) {\n      urls.forEach(url => {\n        removeAudioObjOfUrl(url);\n        this._audioPool.releaseForSource(url);\n      });\n    }\n  }\n\n  /**\n   * Releases the allocated audio node for the passed group.\n   * @param {string} url The audio file url.\n   * @param {number} groupId The group id.\n   */\n  releaseForGroup(url, groupId) {\n    this._bufferingAudios\n      .filter(a => a.groupId === groupId)\n      .forEach(a => this._cleanUp(a));\n\n    this._audioPool.releaseForGroup(url, groupId);\n  }\n\n  /**\n   * Returns if there are free audio nodes available for a group.\n   * @param {string} src The audio file url.\n   * @param {number} groupId The group id.\n   * @return {boolean}\n   */\n  hasFreeNodes(src, groupId) {\n    return this._audioPool.hasFreeNodes(src, groupId);\n  }\n\n  /**\n   * Acquires the unallocated audio nodes and removes the excess ones.\n   */\n  cleanUp() {\n    this._audioPool.cleanUp();\n  }\n\n  /**\n   * Clear the event handlers of buffering audio elements and dispose the pool.\n   */\n  dispose() {\n    if (this._disposed) {\n      return;\n    }\n\n    [...this._bufferingAudios].forEach(audioObj => this._cleanUp(audioObj));\n    this._bufferingAudios = null;\n    this._audioPool.dispose();\n    this._audioPool = null;\n    this._disposed = true;\n  }\n\n  /**\n   * Preload the HTML5 audio element with the passed audio file and allocate it to the passed sound (if any).\n   * @param {string} url The audio file url.\n   * @param {number} [groupId] The buzz id.\n   * @return {Promise}\n   * @private\n   */\n  _load(url, groupId) {\n    return new Promise(resolve => {\n      const audio = groupId ? this._audioPool.allocateForGroup(url, groupId) : this._audioPool.allocateForSource(url);\n\n      const onCanPlayThrough = () => {\n        if (this._disposed) {\n          return;\n        }\n\n        const audioObj = this._bufferingAudios.find(obj => obj.audio === audio);\n        audioObj && this._cleanUp(audioObj);\n        resolve(new DownloadResult(url, audio));\n      };\n\n      const onError = (err) => {\n        if (this._disposed) {\n          return;\n        }\n\n        const audioObj = this._bufferingAudios.find(obj => obj.audio === audio);\n        audioObj && this._cleanUp(audioObj);\n        this._audioPool.releaseAudio(url, audio, groupId);\n        resolve(new DownloadResult(url, null, err));\n      };\n\n      audio.addEventListener('canplaythrough', onCanPlayThrough);\n      audio.addEventListener('error', onError);\n\n      this._bufferingAudios.push({\n        url: url,\n        groupId: groupId,\n        audio: audio,\n        canplaythrough: onCanPlayThrough,\n        error: onError\n      });\n\n      if (!audio.src) { // new audio element?\n        audio.src = url;\n        audio.load();\n        return;\n      }\n\n      audio.currentTime = 0;\n\n      if (audio.readyState >= 3) {\n        onCanPlayThrough();\n      }\n    });\n  }\n\n  /**\n   * Removes the event-handlers from the audio element.\n   * @param {object} audioObj The buffering audio object.\n   * @private\n   */\n  _cleanUp(audioObj) {\n    ['canplaythrough', 'error'].forEach(evt => audioObj.audio.removeEventListener(evt, audioObj[audioObj]));\n    this._bufferingAudios.splice(this._bufferingAudios.indexOf(audioObj), 1);\n  }\n}\n\nexport default MediaLoader;\n","import utility from './Utility';\n\n/**\n * Manages the pool of HTML5 audio nodes.\n * @class\n */\nclass Html5AudioPool {\n\n  /**\n   * Maximum number of HTML5 audio nodes that can be allocated for a resource.\n   * @type {number}\n   * @private\n   */\n  _maxNodesPerSource = 100;\n\n  /**\n   * The sounds store.\n   * @type {function}\n   * @private\n   */\n  _soundCleanUpCallback = null;\n\n  /**\n   * Created audio nodes for each resource.\n   * @type {object}\n   * @private\n   */\n  _resourceNodesMap = {};\n\n  /**\n   * True if the `soundCleanUpCallback` called.\n   * @type {boolean}\n   * @private\n   */\n  _cleanUpCalled = false;\n\n  /**\n   * Constructor\n   * @param {number} maxNodesPerSource Maximum number of audio nodes allowed for a resource.\n   * @param {function} soundCleanUpCallback The inactive sounds cleanup callback.\n   */\n  constructor(maxNodesPerSource, soundCleanUpCallback) {\n    this._maxNodesPerSource = maxNodesPerSource;\n    this._soundCleanUpCallback = soundCleanUpCallback;\n  }\n\n  /**\n   * Allocates an audio node for the passed source.\n   * @param {string} src The audio url.\n   * @return {Audio}\n   */\n  allocateForSource(src) {\n    this._createSrc(src);\n    this._checkMaxNodesForSrc(src);\n\n    const nodes = this._resourceNodesMap[src],\n      { unallocated } = nodes;\n\n    const audio = new Audio();\n    unallocated.push(audio);\n\n    return audio;\n  }\n\n  /**\n   * Allocates a HTML5 audio node to a particular group.\n   * @param {string} src The audio url.\n   * @param {number} [groupId] The buzz group id.\n   * @return {Audio}\n   */\n  allocateForGroup(src, groupId) {\n    this._createGroup(src, groupId);\n    this._checkMaxNodesForSrc(src);\n\n    const nodes = this._resourceNodesMap[src],\n      { unallocated, allocated } = nodes,\n      audio = unallocated.length ? unallocated.shift() : new Audio();\n\n    allocated[groupId].push(audio);\n\n    return audio;\n  }\n\n  /**\n   * Allocates the pre-loaded HTML5 audio node to a sound.\n   * @param {string} src The audio file url.\n   * @param {number} groupId The group id.\n   * @return {Audio}\n   */\n  allocateForSound(src, groupId) {\n    this._createGroup(src, groupId);\n\n    const nodes = this._resourceNodesMap[src],\n      { allocated } = nodes;\n\n    const groupSounds = allocated[groupId];\n\n    if (!groupSounds.length) {\n      throw new Error(`No free audio nodes available in the group ${groupId}`);\n    }\n\n    return groupSounds.shift();\n  }\n\n  /**\n   * Releases the audio nodes allocated for all resources.\n   */\n  release() {\n    Object.keys(this._resourceNodesMap).forEach(src => this.releaseForSource(src));\n  }\n\n  /**\n   * Releases the audio nodes allocated for a resource.\n   * @param {string} src The audio url.\n   */\n  releaseForSource(src) {\n    const nodes = this._resourceNodesMap[src],\n      { unallocated, allocated } = nodes;\n\n    unallocated.forEach(x => this._destroyNode(x));\n\n    Object.keys(allocated).forEach(groupId => this.releaseForGroup(src, groupId));\n\n    delete this._resourceNodesMap[src];\n  }\n\n  /**\n   * Releases the audio nodes allocated for a group.\n   * @param {string} src The audio file url.\n   * @param {number} groupId The group id.\n   */\n  releaseForGroup(src, groupId) {\n    const nodes = this._resourceNodesMap[src],\n      { allocated } = nodes;\n\n    allocated[groupId].forEach(audio => this._destroyNode(audio));\n    delete allocated[groupId];\n  }\n\n  /**\n   * Destroys the audio node reserved for sound.\n   * @param {string} src The audio file url.\n   * @param {Audio} audio The sound id.\n   * @param {number} groupId The buzz id.\n   */\n  releaseAudio(src, audio, groupId) {\n    const nodes = this._resourceNodesMap[src],\n      { allocated, unallocated } = nodes;\n\n    this._destroyNode(audio);\n\n    if (groupId) {\n      allocated[groupId] = allocated[groupId].filter(x => x !== audio);\n    } else {\n      nodes.unallocated = unallocated.filter(x => x !== audio);\n    }\n\n    groupId && !allocated[groupId].length && delete allocated[groupId];\n    !unallocated.length && !Object.keys(allocated).length && delete this._resourceNodesMap[src];\n  }\n\n  /**\n   * Acquires the unallocated audio nodes and removes the excess ones.\n   */\n  cleanUp() {\n    Object.keys(this._resourceNodesMap).forEach(src => {\n      const nodes = this._resourceNodesMap[src],\n        { unallocated, allocated } = nodes;\n\n      let audioNodes = [];\n\n      Object.keys(allocated).forEach(groupId => {\n        audioNodes = [...audioNodes, ...allocated[groupId]];\n        delete allocated[groupId];\n      });\n\n      nodes.unallocated = [...unallocated, ...audioNodes].slice(0, this._maxNodesPerSource);\n    });\n  }\n\n  /**\n   * Releases all the audio nodes.\n   */\n  dispose() {\n    Object.keys(this._resourceNodesMap).forEach(src => this.releaseForSource(src));\n  }\n\n  /**\n   * Returns true if there are free audio nodes available for a group.\n   * @param {string} src The audio file url.\n   * @param {number} groupId The group id.\n   * @return {boolean}\n   */\n  hasFreeNodes(src, groupId) {\n    if (!this._resourceNodesMap.hasOwnProperty(src)) {\n      return false;\n    }\n\n    const nodes = this._resourceNodesMap[src],\n      { allocated } = nodes;\n\n    return allocated[groupId].length > 0;\n  }\n\n  /**\n   * Creates an entry for the passed source in object if not exists.\n   * @param {string} src The audio file.\n   * @private\n   */\n  _createSrc(src) {\n    if (this._resourceNodesMap.hasOwnProperty(src)) {\n      return;\n    }\n\n    this._resourceNodesMap[src] = {\n      unallocated: [],\n      allocated: {}\n    };\n  }\n\n  /**\n   * Creates an entry for the passed source and group if not exists.\n   * @param {string} src The audio file.\n   * @param {number} groupId The group id.\n   * @private\n   */\n  _createGroup(src, groupId) {\n    this._createSrc(src);\n\n    const nodes = this._resourceNodesMap[src],\n      { allocated } = nodes;\n\n    if (allocated.hasOwnProperty(groupId)) {\n      return;\n    }\n\n    allocated[groupId] = [];\n  }\n\n  /**\n   * Chekcks and throws error if max audio nodes reached for the passed resource.\n   * @param {string} src The source url.\n   * @private\n   */\n  _checkMaxNodesForSrc(src) {\n    if (!this._resourceNodesMap.hasOwnProperty(src)) {\n      return;\n    }\n\n    const nodes = this._resourceNodesMap[src],\n      { unallocated, allocated } = nodes;\n\n    let totalAllocatedLength = 0;\n\n    Object.keys(allocated).forEach(groupId => {\n      totalAllocatedLength = totalAllocatedLength + allocated[groupId].length;\n    });\n\n    if (unallocated.length + totalAllocatedLength < this._maxNodesPerSource) {\n      return;\n    }\n\n    if (!this._cleanUpCalled) {\n      this._soundCleanUpCallback(src);\n      this._cleanUpCalled = true;\n      this._checkMaxNodesForSrc(src);\n    }\n\n    this._cleanUpCalled = false;\n\n    throw new Error(`Maximum nodes reached for resource ${src}`);\n  }\n\n  /**\n   * Destroys the passed audio node.\n   * @param {Audio} audio The HTML5 audio element.\n   * @private\n   */\n  _destroyNode(audio) {\n    audio.pause();\n    utility.isIE() && (audio.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA');\n    audio.onerror = null;\n    audio.onend = null;\n    audio.canplaythrough = null;\n  }\n}\n\nexport default Html5AudioPool;\n","import engine         from './Engine';\nimport utility        from './Utility';\nimport workerTimer    from './WorkerTimer';\n\n/**\n * Enum that represents the different states of a sound.\n * @enum {string}\n */\nconst SoundState = {\n  Ready: 'ready',\n  Playing: 'playing',\n  Paused: 'paused',\n  Destroyed: 'destroyed'\n};\n\n/**\n * Represents a sound created using Web Audio API.\n * @class\n */\nclass Sound {\n\n  /**\n   * Unique id.\n   * @type {number}\n   * @private\n   */\n  _id = -1;\n\n  /**\n   * The current volume of the sound. Should be from 0.0 to 1.0.\n   * @type {number}\n   * @private\n   */\n  _volume = 1.0;\n\n  /**\n   * The current playback speed. Should be from 0.5 to 5.\n   * @type {number}\n   * @private\n   */\n  _rate = 1;\n\n  /**\n   * True if the sound is currently muted.\n   * @type {boolean}\n   * @private\n   */\n  _muted = false;\n\n  /**\n   * True if the sound should play repeatedly.\n   * @type {boolean}\n   * @private\n   */\n  _loop = false;\n\n  /**\n   * The current state (playing, paused etc.) of the sound.\n   * @type {SoundState}\n   * @private\n   */\n  _state = SoundState.Ready;\n\n  /**\n   * Web API's audio context.\n   * @type {AudioContext}\n   * @private\n   */\n  _context = null;\n\n  /**\n   * The gain node to control the volume of the sound.\n   * @type {GainNode}\n   * @private\n   */\n  _gainNode = null;\n\n  /**\n   * True to use HTML5 audio node.\n   * @type {boolean}\n   * @private\n   */\n  _stream = false;\n\n  /**\n   * The audio buffer.\n   * @type {AudioBuffer}\n   * @private\n   */\n  _buffer = null;\n\n  /**\n   * The HTML5 Audio element.\n   * @type {Audio}\n   * @private\n   */\n  _audio = null;\n\n  /**\n   * The AudioBufferSourceNode that plays the audio buffer assigned to it.\n   * @type {AudioBufferSourceNode}\n   * @private\n   */\n  _bufferSourceNode = null;\n\n  /**\n   * Duration of the playback in seconds.\n   * @type {number}\n   * @private\n   */\n  _duration = 0;\n\n  /**\n   * The playback start position.\n   * @type {number}\n   * @private\n   */\n  _startPos = 0;\n\n  /**\n   * The playback end position.\n   * @type {number}\n   * @private\n   */\n  _endPos = 0;\n\n  /**\n   * The current position of the playback.\n   * @type {number}\n   * @private\n   */\n  _currentPos = 0;\n\n  /**\n   * The position of the playback during rate change.\n   * @type {number}\n   * @private\n   */\n  _rateSeek = 0;\n\n  /**\n   * The time at which the playback started.\n   * This property is required for getting the seek position of the playback.\n   * @type {number}\n   * @private\n   */\n  _startTime = 0;\n\n  /**\n   * The callback that will be called when the underlying HTML5 audio node is loaded.\n   * @type {function}\n   * @private\n   */\n  _loadCallback = null;\n\n  /**\n   * The callback that will be invoked after the play ends.\n   * @type {function}\n   * @private\n   */\n  _playEndCallback = null;\n\n  /**\n   * The callback that will be invoked after the sound destroyed.\n   * @type {function}\n   * @private\n   */\n  _destroyCallback = null;\n\n  /**\n   * True if the sound is currently fading.\n   * @type {boolean}\n   * @private\n   */\n  _fading = false;\n\n  /**\n   * The timer that runs function after the fading is complete.\n   * @type {number|null}\n   * @private\n   */\n  _fadeTimer = null;\n\n  /**\n   * The callback that will be invoked after the fade is completed.\n   * @type {function}\n   * @private\n   */\n  _fadeEndCallback = null;\n\n  /**\n   * The callback that will be invoked when there is error in HTML5 audio node.\n   * @type {function}\n   * @private\n   */\n  _audioErrorCallback = null;\n\n  /**\n   * Web Audio API's audio node to control media element.\n   * @type {MediaElementAudioSourceNode}\n   * @private\n   */\n  _mediaElementAudioSourceNode = null;\n\n  /**\n   * Represents the timer that is used to reset the variables once the sprite sound is played.\n   * @type {number|null}\n   * @private\n   */\n  _endTimer = null;\n\n  /**\n   * True for sprite.\n   * @type {boolean}\n   * @private\n   */\n  _isSprite = false;\n\n  /**\n   * Last played time.\n   * @type {Date}\n   * @private\n   */\n  _lastPlayed = new Date();\n\n  /**\n   * True to not auto-destroy.\n   * @type {boolean}\n   * @private\n   */\n  _persist = false;\n\n  /**\n   * Initializes the internal properties of the sound.\n   * @param {object} args The input parameters of the sound.\n   * @param {number} args.id The unique id of the sound.\n   * @param {boolean} [args.stream = false] True to use HTML5 audio node for playing sound.\n   * @param {Audio} [args.audio] The pre-loaded HTML5 audio object.\n   * @param {AudioBuffer} [args.buffer] Audio source buffer.\n   * @param {number} [args.volume = 1.0] The initial volume of the sound. Should be from 0.0 to 1.0.\n   * @param {number} [args.rate = 1] The initial playback rate of the sound. Should be from 0.5 to 5.0.\n   * @param {boolean} [args.loop = false] True to play the sound repeatedly.\n   * @param {boolean} [args.muted = false] True to be muted initially.\n   * @param {number} [args.startPos] The playback start position.\n   * @param {number} [args.endPos] The playback end position.\n   * @param {function} [args.loadCallback] The callback that will be called when the underlying HTML5 audio node is loaded.\n   * @param {function} [args.playEndCallback] The callback that will be invoked after the play ends.\n   * @param {function} [args.destroyCallback] The callback that will be invoked after destroyed.\n   * @param {function} [args.fadeEndCallback] The callback that will be invoked the fade is completed.\n   * @param {function} [args.audioErrorCallback] The callback that will be invoked when there is error in HTML5 audio node.\n   * @constructor\n   */\n  constructor(args) {\n    this._onBufferEnded = this._onBufferEnded.bind(this);\n    this._onHtml5Ended = this._onHtml5Ended.bind(this);\n    this._onCanPlayThrough = this._onCanPlayThrough.bind(this);\n    this._onAudioError = this._onAudioError.bind(this);\n\n    const {\n      id,\n      stream,\n      buffer,\n      audio,\n      volume,\n      rate,\n      loop,\n      muted,\n      startPos,\n      endPos,\n      loadCallback,\n      playEndCallback,\n      destroyCallback,\n      fadeEndCallback,\n      audioErrorCallback\n    } = args;\n\n    // Set the passed id or the random one.\n    this._id = typeof id === 'number' ? id : utility.id();\n\n    // Set the passed audio buffer and duration.\n    this._buffer = buffer;\n    this._audio = audio;\n\n    // Set other properties.\n    volume && (this._volume = volume);\n    rate && (this._rate = rate);\n    muted && (this._muted = muted);\n    loop && (this._loop = loop);\n    startPos && (this._startPos = startPos);\n    endPos && (this._endPos = endPos);\n    this._loadCallback = loadCallback;\n    this._playEndCallback = playEndCallback;\n    this._destroyCallback = destroyCallback;\n    this._fadeEndCallback = fadeEndCallback;\n    this._audioErrorCallback = audioErrorCallback;\n    this._stream = Boolean(stream);\n\n    this._endPos = this._stream ? this._audio.duration : this._buffer.duration;\n    this._duration = this._endPos - this._startPos;\n    this._isSprite = this._duration < this._endPos;\n\n    // If stream is `true` then set the playback rate, looping and listen to `error` event.\n    if (this._stream) {\n      this._audio.playbackRate = this._rate;\n      this._setLoop(this._loop);\n      this._audio.addEventListener('error', this._onAudioError);\n    }\n\n    // If web audio is available, create gain node and set the volume..\n    if (engine.isAudioAvailable()) {\n      this._context = engine.context();\n      this._gainNode = this._context.createGain();\n      this._gainNode.gain.setValueAtTime(this._muted ? 0 : this._volume, this._context.currentTime);\n\n      // Create media element audio source node.\n      if (this._stream) {\n        this._mediaElementAudioSourceNode = this._context.createMediaElementSource(this._audio);\n        this._mediaElementAudioSourceNode.connect(this._gainNode);\n      }\n    }\n  }\n\n  /**\n   * Pre-loads the underlying HTML audio node (only in case of stream).\n   */\n  load() {\n    if (!this._stream || this.isPlaying() || this.state() === SoundState.Destroyed) {\n      return;\n    }\n\n    this._audio.addEventListener('canplaythrough', this._onCanPlayThrough);\n    this._audio.currentTime = 0;\n\n    if (this._audio.readyState >= 3) {\n      this._onCanPlayThrough();\n    }\n  }\n\n  /**\n   * Plays the sound or the sound defined in the sprite.\n   * @return {Sound}\n   */\n  play() {\n    // If the sound is already playing then return.\n    if (this.isPlaying()) {\n      return this;\n    }\n\n    this._stream ? this._playHtml5() : this._playBuffer();\n\n    // Record the starting time and set the state.\n    this._startTime = this._context.currentTime;\n    this._state = SoundState.Playing;\n\n    return this;\n  }\n\n  /**\n   * Pauses the playing sound.\n   * @return {Sound}\n   */\n  pause() {\n    // If the sound is already playing return.\n    if (!this.isPlaying()) {\n      return this;\n    }\n\n    // Stop the current running fade.\n    this.fadeStop();\n\n    if (this._stream) {\n      this._audio.removeEventListener('ended', this._onHtml5Ended);\n      this._clearEndTimer();\n      this._audio.pause();\n    } else {\n      this._rateSeek = 0;\n      this._destroyBufferNode();\n    }\n\n    this._currentPos = this.seek();\n    this._state = SoundState.Paused;\n\n    return this;\n  }\n\n  /**\n   * Stops the sound that is playing or in paused state.\n   * @return {Sound}\n   */\n  stop() {\n    // If the sound is not playing or paused return.\n    if (!this.isPlaying() && !this.isPaused()) {\n      return this;\n    }\n\n    // Stop the current running fade.\n    this.fadeStop();\n\n    if (this._stream) {\n      this._audio.removeEventListener('ended', this._onHtml5Ended);\n      this._clearEndTimer();\n      this._audio.pause();\n      this._audio.currentTime = this._startPos || 0;\n    } else {\n      this._currentPos = 0;\n      this._rateSeek = 0;\n      this._destroyBufferNode();\n    }\n\n    this._lastPlayed = new Date();\n\n    this._state = SoundState.Ready;\n\n    return this;\n  }\n\n  /**\n   * Mutes the sound.\n   * @return {Sound}\n   */\n  mute() {\n    // Stop the current running fade.\n    this.fadeStop();\n\n    // Set the value of gain node to 0.\n    this._gainNode.gain.setValueAtTime(0, this._context.currentTime);\n\n    // Set the muted property true.\n    this._muted = true;\n\n    return this;\n  }\n\n  /**\n   * Un-mutes the sound.\n   * @return {Sound}\n   */\n  unmute() {\n    // Stop the current running fade.\n    this.fadeStop();\n\n    // Reset the gain node's value back to volume.\n    this._gainNode.gain.setValueAtTime(this._volume, this._context.currentTime);\n\n    // Set the muted property to false.\n    this._muted = false;\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the volume.\n   * @param {number} [vol] Should be from 0.0 to 1.0.\n   * @return {Sound|number}\n   */\n  volume(vol) {\n    // If no input parameter is passed then return the volume.\n    if (typeof vol === 'undefined') {\n      return this._volume;\n    }\n\n    // Stop the current running fade.\n    this.fadeStop();\n\n    // Set the gain's value to the passed volume.\n    this._gainNode.gain.setValueAtTime(this._muted ? 0 : vol, this._context.currentTime);\n\n    // Set the volume to the property.\n    this._volume = vol;\n\n    return this;\n  }\n\n  /**\n   * Fades the sound volume to the passed value in the passed duration.\n   * @param {number} to The destination volume.\n   * @param {number} duration The period of fade.\n   * @param {string} [type = linear] The fade type (linear or exponential).\n   * @return {Sound}\n   */\n  fade(to, duration, type = 'linear') {\n    // If a fade is already running stop it.\n    if (this._fading) {\n      this.fadeStop();\n    }\n\n    this._fading = true;\n\n    if (type === 'linear') {\n      this._gainNode.gain.linearRampToValueAtTime(to, this._context.currentTime + duration);\n    } else {\n      this._gainNode.gain.exponentialRampToValueAtTime(to, this._context.currentTime + duration);\n    }\n\n    this._fadeTimer = workerTimer.setTimeout(() => {\n      this.volume(to);\n\n      workerTimer.clearTimeout(this._fadeTimer);\n\n      this._fadeTimer = null;\n      this._fading = false;\n\n      this._fadeEndCallback && this._fadeEndCallback(this);\n    }, duration * 1000);\n\n    return this;\n  }\n\n  /**\n   * Stops the current running fade.\n   * @return {Sound}\n   */\n  fadeStop() {\n    if (!this._fading) {\n      return this;\n    }\n\n    this._gainNode.gain.cancelScheduledValues(this._context.currentTime);\n\n    if (this._fadeTimer) {\n      workerTimer.clearTimeout(this._fadeTimer);\n      this._fadeTimer = null;\n    }\n\n    this._fading = false;\n    this.volume(this._gainNode.gain.value);\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the playback rate.\n   * @param {number} [rate] The playback rate. Should be from 0.5 to 5.\n   * @return {Sound|number}\n   */\n  rate(rate) {\n    // If no input parameter is passed return the current rate.\n    if (typeof rate === 'undefined') {\n      return this._rate;\n    }\n\n    this._rate = rate;\n    this._rateSeek = this.seek();\n\n    if (this.isPlaying()) {\n      if (this._stream) {\n        this._audio.playbackRate = rate;\n\n        if (this._isSprite) {\n          this._clearEndTimer();\n          let [, duration] = this._getTimeVars();\n          this._endTimer = workerTimer.setTimeout(this._onHtml5Ended, (duration * 1000) / Math.abs(rate));\n        }\n      } else {\n        this._startTime = this._context.currentTime;\n        this._bufferSourceNode && (this._bufferSourceNode.playbackRate.setValueAtTime(rate, this._context.currentTime));\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the seek position.\n   * @param {number} [seek] The seek position.\n   * @return {Sound|number}\n   */\n  seek(seek) {\n    // If no parameter is passed return the current position.\n    if (typeof seek === 'undefined') {\n      if (this._stream) {\n        return this._audio.currentTime;\n      }\n\n      const realTime = this.isPlaying() ? this._context.currentTime - this._startTime : 0;\n      const rateElapsed = this._rateSeek ? this._rateSeek - this._currentPos : 0;\n      return this._currentPos + (rateElapsed + realTime * this._rate);\n    }\n\n    // If seeking outside the borders then return.\n    if (seek < this._startPos || seek > this._endPos) {\n      return this;\n    }\n\n    // If the sound is currently playing... pause it, set the seek position and then continue playing.\n    const isPlaying = this.isPlaying();\n\n    if (isPlaying) {\n      this.pause();\n    }\n\n    this._currentPos = seek;\n\n    if (isPlaying) {\n      this.play();\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets/sets the loop parameter of the sound.\n   * @param {boolean} [loop] True to loop the sound.\n   * @return {Sound/boolean}\n   */\n  loop(loop) {\n    if (typeof loop !== 'boolean') {\n      return this._loop;\n    }\n\n    this._loop = loop;\n    this._setLoop(loop);\n\n    return this;\n  }\n\n  /**\n   * Destroys the dependencies and release the memory.\n   * @return {Sound}\n   */\n  destroy() {\n    // If the sound is already destroyed return.\n    if (this._state === SoundState.Destroyed) {\n      return this;\n    }\n\n    // Stop the sound.\n    this.stop();\n\n    // Destroy the audio node and media element audio source node.\n    this._destroyAudio();\n    this._destroyMediaSourceNode();\n\n    // Disconnect from the master gain.\n    this._gainNode && this._gainNode.disconnect();\n\n    this._buffer = null;\n    this._context = null;\n    this._gainNode = null;\n\n    // Set the state to \"destroyed\".\n    this._state = SoundState.Destroyed;\n\n    this._destroyCallback && this._destroyCallback(this);\n\n    return this;\n  }\n\n  /**\n   * Returns the unique id of the sound.\n   * @return {number}\n   */\n  id() {\n    return this._id;\n  }\n\n  /**\n   * Returns whether the sound is muted or not.\n   * @return {boolean}\n   */\n  muted() {\n    return this._muted;\n  }\n\n  /**\n   * Returns the state of the sound.\n   * @return {SoundState}\n   */\n  state() {\n    return this._state;\n  }\n\n  /**\n   * Returns the total duration of the playback.\n   * @return {number}\n   */\n  duration() {\n    return this._duration;\n  }\n\n  /**\n   * Returns true if the buzz is playing.\n   * @return {boolean}\n   */\n  isPlaying() {\n    return this._state === SoundState.Playing;\n  }\n\n  /**\n   * Returns true if buzz is paused.\n   * @return {boolean}\n   */\n  isPaused() {\n    return this._state === SoundState.Paused;\n  }\n\n  /**\n   * Returns last played time.\n   * @return {number}\n   */\n  lastPlayed() {\n    return this._lastPlayed;\n  }\n\n  /**\n   * Disables auto-destroy.\n   */\n  persist() {\n    if (this._state === SoundState.Destroyed) {\n      return;\n    }\n\n    this._persist = true;\n  }\n\n  /**\n   * Enables auto-destroy.\n   */\n  abandon() {\n    if (this._state === SoundState.Destroyed) {\n      return;\n    }\n\n    this._persist = false;\n  }\n\n  /**\n   * Returns true if auto-destroy enabled.\n   * @return {boolean}\n   */\n  isPersistent() {\n    return this._persist;\n  }\n\n  /**\n   * HTML5 Audio error handler.\n   * @param {object} err Error object.\n   * @private\n   */\n  _onAudioError(err) {\n    this._audioErrorCallback && this._audioErrorCallback(this, err);\n  }\n\n  /**\n   * Returns the seek, duration and timeout for the playback.\n   * @return {[number, number, number]}\n   * @private\n   */\n  _getTimeVars() {\n    let seek = Math.max(0, this._currentPos > 0 ? this._currentPos : this._startPos),\n      duration = this._endPos - this._startPos,\n      timeout = (duration * 1000) / this._rate;\n\n    return [seek, duration, timeout];\n  }\n\n  /**\n   * Plays the audio using audio buffer.\n   * @private\n   */\n  _playBuffer() {\n    let [seek, duration] = this._getTimeVars();\n\n    // Create a new buffersourcenode to play the sound.\n    this._bufferSourceNode = this._context.createBufferSource();\n\n    // Set the buffer, playback rate and loop parameters\n    this._bufferSourceNode.buffer = this._buffer;\n    this._bufferSourceNode.playbackRate.setValueAtTime(this._rate, this._context.currentTime);\n    this._setLoop(this._loop);\n\n    // Connect the node to the audio graph.\n    this._bufferSourceNode.connect(this._gainNode);\n\n    // Listen to the \"ended\" event to reset/clean things.\n    this._bufferSourceNode.addEventListener('ended', this._onBufferEnded);\n\n    const startTime = this._context.currentTime;\n\n    // Call the supported method to play the sound.\n    if (typeof this._bufferSourceNode.start !== 'undefined') {\n      this._bufferSourceNode.start(startTime, seek, this._loop ? undefined : duration);\n    } else {\n      this._bufferSourceNode.noteGrainOn(startTime, seek, this._loop ? undefined : duration);\n    }\n  }\n\n  /**\n   * Plays the audio using HTML5 audio object.\n   * @private\n   */\n  _playHtml5() {\n    let [seek, , timeout] = this._getTimeVars();\n\n    this._audio.currentTime = seek;\n\n    if (this._isSprite) {\n      this._endTimer = workerTimer.setTimeout(this._onHtml5Ended, timeout);\n    } else {\n      this._audio.addEventListener('ended', this._onHtml5Ended);\n    }\n\n    this._audio.play();\n  }\n\n  /**\n   * Callback that is invoked after the buffer playback is ended.\n   * @private\n   */\n  _onBufferEnded() {\n    this._lastPlayed = new Date();\n\n    // Reset the seek positions\n    this._currentPos = 0;\n    this._rateSeek = 0;\n\n    // Destroy the node (AudioBufferSourceNodes are one-time use and throw objects).\n    this._destroyBufferNode();\n\n    // Reset the state to allow future actions.\n    this._state = SoundState.Ready;\n\n    // Invoke the callback if there is one.\n    this._playEndCallback && this._playEndCallback(this);\n  }\n\n  /**\n   * Callback that is invoked after the html audio playback is ended.\n   * @private\n   */\n  _onHtml5Ended() {\n    if (this._loop) {\n      this.stop().play();\n    } else {\n      this.stop();\n      this._state = SoundState.Ready;\n      this._playEndCallback && this._playEndCallback(this);\n    }\n  }\n\n  /**\n   * Clears the end-timer.\n   * @private\n   */\n  _clearEndTimer() {\n    if (!this._endTimer) {\n      return;\n    }\n\n    workerTimer.clearTimeout(this._endTimer);\n    this._endTimer = null;\n  }\n\n  /**\n   * Event handler for audio's \"canplaythrough\" event.\n   * @private\n   */\n  _onCanPlayThrough() {\n    this._loadCallback();\n    this._audio.removeEventListener('canplaythrough', this._onCanPlayThrough);\n  };\n\n  /**\n   * Returns the gain node.\n   * @return {GainNode}\n   */\n  _gain() {\n    return this._gainNode;\n  }\n\n  /**\n   * Stops the playing buffer source node and destroys it.\n   * @private\n   */\n  _destroyBufferNode() {\n    if (!this._bufferSourceNode) {\n      return;\n    }\n\n    if (typeof this._bufferSourceNode.stop !== 'undefined') {\n      this._bufferSourceNode.stop();\n    } else {\n      this._bufferSourceNode.noteGrainOff();\n    }\n\n    this._bufferSourceNode.disconnect();\n    this._bufferSourceNode.removeEventListener('ended', this._onBufferEnded);\n    this._bufferSourceNode = null;\n  }\n\n  /**\n   * Destroys the media audio source node.\n   * @private\n   */\n  _destroyMediaSourceNode() {\n    if (!this._mediaElementAudioSourceNode) {\n      return;\n    }\n\n    this._mediaElementAudioSourceNode.disconnect();\n    this._mediaElementAudioSourceNode = null;\n  }\n\n  /**\n   * Destroys the passed audio node.\n   * @private\n   */\n  _destroyAudio() {\n    if (!this._audio) {\n      return;\n    }\n\n    this._audio.removeEventListener('canplaythrough', this._onCanPlayThrough);\n    this._audio.removeEventListener('error', this._onAudioError);\n    this._audio.pause();\n    utility.isIE() && (this._audio.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA');\n    this._audio.onerror = null;\n    this._audio.onend = null;\n    this._audio.canplaythrough = null;\n    this._audio = null;\n  }\n\n  /**\n   * Sets the sound to play repeatedly or not.\n   * @param {boolean} loop True to play the sound repeatedly.\n   * @private\n   */\n  _setLoop(loop) {\n    if (this._stream) {\n      this._audio.loop = loop;\n    } else {\n      this._bufferSourceNode.loop = loop;\n\n      if (loop) {\n        this._bufferSourceNode.loopStart = this._startPos;\n        this._bufferSourceNode.loopEnd = this._endPos;\n      }\n    }\n  }\n}\n\nexport { Sound as default, SoundState };\n","// Credit: https://github.com/goldfire/howler.js/issues/626\n\nconst WORKER_SCRIPT = `\n  var timerIds = {}, timeoutWorker = {};\n  \n  timeoutWorker.setTimeout = function(timerId, duration) {\n    timerIds[timerId] = setTimeout(function() {\n      postMessage({ timerId: timerId });\n    }, duration);\n  };\n  \n  timeoutWorker.clearTimeout = function(timerId) {\n    clearTimeout(timerIds[timerId]);\n  };\n  \n  timeoutWorker.setInterval = function(timerId, duration) {\n    timerIds[timerId] = setInterval(function() {\n      postMessage({ timerId: timerId });\n    }, duration);\n  };\n  \n  timeoutWorker.clearInterval = function(timerId) {\n    clearInterval(timerIds[timerId]);\n  };\n  \n  onmessage = function(e) {\n    var command = e.data.command;\n    timeoutWorker[command](e.data.timerId, e.data.duration);\n  };\n`;\n\n/**\n * Provides more accurate timeouts and intervals when the browser tab is not active using Web Workers.\n * @class\n */\nclass WorkerTimer {\n\n  /**\n   * Web worker.\n   * @type {Worker}\n   * @private\n   */\n  _worker = null;\n\n  /**\n   * Whether Web Worker is available or not. If not available then normal setTimeout and setInterval will be used.\n   * @type {boolean}\n   * @private\n   */\n  _isWorkerThreadAvailable = false;\n\n  /**\n   * Dictionary to store the callbacks that should be invoked after timeouts and intervals.\n   * @type {{}}\n   * @private\n   */\n  _timerCallbacks = {};\n\n  /**\n   * The incrementing id that is used to link the timer running in worker with the callback.\n   * @type {number}\n   * @private\n   */\n  _timerId = 0;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._handleMessage = this._handleMessage.bind(this);\n  }\n\n  /**\n   * Initialize the worker\n   */\n  init() {\n    if (!Worker || this._worker) {\n      return;\n    }\n\n    let blob = this._getBlob(WORKER_SCRIPT);\n    if (blob === null) {\n      return;\n    }\n\n    let workerUrl = this._createObjectURL(blob);\n    if (workerUrl === null) {\n      return;\n    }\n\n    this._worker = new Worker(workerUrl);\n    this._worker.addEventListener('message', this._handleMessage);\n    this._isWorkerThreadAvailable = true;\n  }\n\n  /**\n   * Returns a blob.\n   * @param {string} script The javascript code string.\n   * @return {*}\n   * @private\n   */\n  _getBlob(script) {\n    let blob = null;\n\n    try {\n      blob = new Blob([script], { type: 'application/javascript' });\n    } catch (e) {\n      let blobBuilderType = null;\n\n      if (typeof BlobBuilder !== 'undefined') {\n        blobBuilderType = BlobBuilder;\n      } else if (typeof WebKitBlobBuilder !== 'undefined') {\n        blobBuilderType = WebKitBlobBuilder;\n      }\n\n      blob = new blobBuilderType(); // eslint-disable-line new-cap\n      blob.append(script);\n      blob = blob.getBlob();\n    }\n\n    return blob;\n  }\n\n  /**\n   * Returns object url.\n   * @param {*} file The blob.\n   * @return {*}\n   * @private\n   */\n  _createObjectURL(file) {\n    if (typeof URL !== 'undefined' && URL.createObjectURL) {\n      return URL.createObjectURL(file);\n    } else if (typeof webkitURL !== 'undefined') {\n      return webkitURL.createObjectURL(file);\n    }\n\n    return null;\n  }\n\n  /**\n   * Callback that handles the messages send by worker.\n   * @param {object} e Event argument that contains the message data and other information\n   * @private\n   */\n  _handleMessage(e) {\n    const callback = this._timerCallbacks[e.data.timerId];\n\n    if (callback && callback.cb) {\n      callback.cb();\n    }\n\n    if (!callback.repeat) {\n      delete this._timerCallbacks[e.data.timerId];\n    }\n  }\n\n  /**\n   * Invokes a callback after the passed time.\n   * @param {function} callback The callback that should be called after the elapsed period.\n   * @param {number} duration The time period in ms.\n   * @return {number}\n   */\n  setTimeout(callback, duration) {\n    if (!this._isWorkerThreadAvailable) {\n      return setTimeout(callback, duration);\n    }\n\n    this._timerId = this._timerId + 1;\n    this._timerCallbacks[this._timerId] = { cb: callback, repeat: false };\n    this._worker.postMessage({ command: 'setTimeout', timerId: this._timerId, duration: duration });\n    return this._timerId;\n  }\n\n  /**\n   * Clears the scheduled timeout.\n   * @param {number} timeoutId The timeout id.\n   */\n  clearTimeout(timeoutId) {\n    if (!this._isWorkerThreadAvailable) {\n      return clearTimeout(timeoutId);\n    }\n\n    this._worker.postMessage({ command: 'clearTimeout', timerId: timeoutId });\n    delete this._timerCallbacks[timeoutId];\n  }\n\n  /**\n   * Invokes the callback function at the passed interval.\n   * @param {function} callback The callback function.\n   * @param {number} duration The time interval.\n   * @return {number}\n   */\n  setInterval(callback, duration) {\n    if (!this._isWorkerThreadAvailable) {\n      return setInterval(callback, duration);\n    }\n\n    this._timerId = this._timerId + 1;\n    this._timerCallbacks[this._timerId] = { cb: callback, repeat: true };\n    this._worker.postMessage({ command: 'setInterval', timerId: this._timerId, duration: duration });\n    return this._timerId;\n  }\n\n  /**\n   * Clears the scheduled interval.\n   * @param {number} intervalId The interval id.\n   */\n  clearInterval(intervalId) {\n    if (!this._isWorkerThreadAvailable) {\n      return clearTimeout(intervalId);\n    }\n\n    this._worker.postMessage({ command: 'clearTimeout', timerId: intervalId });\n    delete this._timerCallbacks[intervalId];\n  }\n\n  /**\n   * Kills the worker thread.\n   */\n  terminate() {\n    if (this._worker) {\n      this._worker.removeEventListener('message', this._handleMessage);\n      this._worker.terminate();\n      this._worker = null;\n    }\n\n    this._isWorkerThreadAvailable = false;\n    this._timerCallbacks = {};\n    this._timerId = 0;\n  }\n}\n\nexport default new WorkerTimer();\n"],"sourceRoot":""}